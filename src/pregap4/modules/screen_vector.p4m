#
# Copyright (c) Medical Research Council, Laboratory of Molecular Biology,
# 1998. All rights reserved.
#
# This file is part of the Staden Package. See the Staden Package copyright
# notice for information on the restrictions for usage and distribution, and
# for a disclaimer of all warranties.
#

#
# Screen against vector module
#
# This processes Experiment files, reading the SF line type, rejecting any
# files that still contain unclipped vector.
#
set help {pregap4 {Pregap4-Modules-Screen Vector}}

proc init {} {
    mod_preset min_match 30
    mod_preset update_exp_file 1
}

proc run {files} {
    variable min_match
    variable update_exp_file
    variable report
    global file_type
    global file_error
    global fofn
    global modules
    global errorCode
	
    set report ""
    set new_files {}
    set tfiles {}

    set fd [open $fofn.tmp w]
    array set found {}
    foreach f $files {
	if {$file_type($f) == "EXP"} {
	    puts $fd $f
	    lappend tfiles $f
	    set found($f) 0
	} else {
	    lappend new_files $f
        }
    }
    close $fd

    set errorCode NONE
    if {[catch {exec vector_clip -r \
	-l $min_match \
	-p $fofn.screenvec_passed \
	-f $fofn.screenvec_failed \
	$fofn.tmp} var]} {
	if {$errorCode != "NONE"} {
	    append report "ERR: vector_clip failed with error message '$var'.\n"
	    return $files
	}
    }
    vmessage $var

    # Process passed file
    if {[catch {set fd [open $fofn.screenvec_passed r]}] == 0} {
	while {[gets $fd line] != -1} {
	    lappend new_files $line
	    catch {unset found($line)}
	    append report "SEQ $line: passed\n"
	}
        close $fd
    }

    # Process failed file
    if {[catch {set fd [open $fofn.screenvec_failed r]}] == 0} {
	while {[gets $fd line] != -1} {
	    if {[regsub {(.*) Error:.*} $line {\1} name] == 0} {
	        set name [lindex $line 0]
	    }
	    if {![info exists file_type($name)]} {
		verror ERR_WARN screen_vector \
		    "vector_clip has unknown reading '$name' in failed file"
		continue
	    }
	    regsub {^[^ ]* *((Error: *)|)} $line {} line
	    set file_error($name) "screen_vector: $line"
	    catch {unset found($name)}
	    if {$line != ""} {
		append report "SEQ $name: failed ($line)\n"
	    } else {
		append report "SEQ $name: failed\n"
	    }
	}
        close $fd
    }

    # Check that there aren't any missing - neither in passed or failed
    foreach f [array names found] {
	verror ERR_WARN screen_vector \
	    "vector_clip 'lost' reading with name '$f'"
	set file_error($f) "sequence_vector: lost file"
	append report "SEQ $f: lost\n"
    }

    catch {file delete $fofn.tmp}

    return $new_files
}

proc name {} {
    return "Screen For Unclipped Vector"
}

proc create_dialogue {w} {
    variable min_match

    xentry $w.min_match \
	-label "Minimum length of match" \
	-default $min_match \
	-width 7 \
	-type "int 1"

    pack $w.min_match -side top -fill both
}

proc check_params {} {
    if {"" != [set inv [local_param_exists [namespace current] min_match]]} {
    	return $inv
    }

    return ""
}

proc process_dialogue {w} {
    variable min_match

    # Algorithm adjustments
    if {[set min_match  [$w.min_match get]] == ""} { return 0 }

    return 1
}

proc configure_dialogue {w mode} {
    if {[string match save* $mode]} {
	mod_save min_match [$w.min_match get2]
    }
}
