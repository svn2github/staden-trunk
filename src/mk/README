James Bonfield, jkb@mrc-lmb.cam.ac.uk, 17th July 1996.

				   Contents
				   ========

Makefile Overview

The global Makefile

Configuring the system Makefile stub
	Compiling and linking
	System paths
	Dynamic linking

Writing a program Makefile
	Initialisation
	Includes
	Objects
	Linking
	Installation
	Dependencies
	Remote compilation

Notes
	Fast testing of libraries
	Obtaining GNU make


			      Makefile Overview
			      =================

Due to the necessity of compiling the package on several different platforms,
it is necessary to have slightly different Makefiles for each machine.
Additionally these Makefiles need to be in place for all the machines
simultaneously, so the standard method of using GNU autoconf is not suitable.
(It may be possible however to use it generate new system dependent Makefile
stubs.)

The Makefile system consists of three parts.

1) A global Makefile containing rules and information that may be needed by
   all programs on all systems.

2) A system dependent Makefile stub containing information such as linking
   flags and compiler info.

3) A directory dependent Makefile detailing the structure and dependencies of
   programs, together with their linking actions. This last part can include
   separately a dependency list produced by makedepend.

Requirements are either gmake or Sun's make.

The operation of the Makefile system requires two environment variables to be
set. Firstly, SRCROOT should be set to the location of the main source
directory (typically $STADENROOT/src). And secondly MACHINE should be set to
the name of one of the system Makefile stubs. Eg for alpha.mk set MACHINE to
be alpha.


			     The global Makefile
			     ===================

This file is held in $STADENROOT/src/mk/global.mk. It contains an overall
picture of what make options will be used. Such things will generally include
DEBUG or CFLAGS options. There are also a set of _defaults_ for many of the
system dependent defines. These need not be changed and may cause problems if
they are.

The system is designed so that changes for any single machine should be placed
in the system Makefile. This is done by making sure that there is always a
prefix and suffix option to set for any global.mk definitions. For instance
the CLDFLAGS is set to start with $(CLDFLAGS_S) and end with $(CLDFLAGS_E).
These are undefined in global.mk, but can be defined if required in the system
Makefile stubs. The reason for this somewhat cumbersome method is that Sun's
make does not support prepending to a definition.

The only suitable parts to change in the global Makefile would be the
debug/optimise strategy or to add new directory and library statements.
Specifically setting COPTDEBUG to either of CDEBUG or COPT, and setting
FOPTDEBUG to either of FDEBUG or FOPT, is the most probably change required.

Any commonly used pattern style targets (eg %.o from %.c) should be defined
here. Currently there exist targets for .o from .c, .o from .f, and .a from
.f. There are also some extra defines for commonly used object files from
different source directories. In these cases the compilation will
automatically change directory temporarily to build the object file (if
necessary) in the other source directory.

Finally, the list of main targets is as follows:

all
	Compile executables

clean
	Remove object files

cleanprogs
	Remove executables

spotless
	Remove executables and object files
	
relink
	Remove executables and relink them

depend
	Create the dependencies file


		     Configuring the system Makefile stub
		     ====================================

All system dependent definitions are contained here, such as which C compiler
and libraries to use. Many of these definitions will already have sensible
defaults listed in the global.mk file.

GNU make versions 3.63 and earlier could not support the += syntax of adding
to existing macros (instead they required "A := $(A) text" which Sun make does
not support). To attempt to have a more universal makefile we use the +=
syntax. Please see the section below entitled "Obtaining GNU make" for finding
an up-to-date copy.

The typical defines you'll wish to redefine in the system Makefiles will be
compiler tools, compiler flags, link flags and library and include file
locations. One typical example is often to change the program used for linking
mixed fortran and C files to the C compiler as some Fortran compilers dislike
such mixed linking.


Compiling and linking
---------------------

The available hooks to redefine are:

CC		C compiler program
F77		Fortran compiler program

CLD		What to use when linking purely C programs (default CC)
FLD		What to use when linking fortran+C programs (default F77)

RANLIB		The ranlib utility. On many systems this is part of ar, in
		which case define RANLIB to be /bin/true.

CLDFLAGS_S
CLDFLAGS_E
		CLDFLAGS is "$(CLDFLAGS_S) $(COPTDEBUG) $(CLDFLAGS_E)",
		which means that you set CLDFLAGS_S and CLDFLAGS_E to
		modify CLDFLAGS.

FLDFLAGS_S
FLDFLAGS_E
		As per CLDFLAGS above, but for the fortran linking options.

LIBSC_S
LIBSC_E
		LIBSC is specified at the end of each compile line when
		CLD is used. The definition for LIBSC is
		"$(LIBSC_S) $(EXTRA_LIBS) $(LIBSC_E)". Set LIBSC_S or LIBSC_E
		to change the libraries use when linking with C

LIBSF_S
LIBSF_E
		As per LIBSC above, but for the fortran linking libraries.

INCLUDES_S
INCLUDES_E
		Extends the include path (only used by the C compiler). The
		default include path contains the current directory and
		the Misc directory.


The following hooks should generally be modified rather than redefined, unless
you're really certain of the consequences.

CDEBUG		CC options when debugging
FDEBUG		F77 option when debugging

COPT		CC options when optimising
FOPT		F77 options when optimising

CFLAGS		Non debug/optimising arguments to pass to CC
FFLAGS		Non debug/optimising arguments to pass to F77

EXTRA_LIBS	Used as a common part of both LIBSC and LIBSF. That is
		any libraries added to this define will be used when linking
		with either C or Fortran.

System paths
------------

TCLBIN		Where to find tcl library. Defaults to /usr/local/lib

TKBIN		Where to find tk library. Defaults to /usr/local/lib

XBIN		Where to pick up all the X libraries (X11, Xaw, etc).
		Defaults to /usr/X11/lib.


Dynamic linking
---------------

After much thought and experiment we've found that part dynamic and part
static linking is the way to go. Basically as much as possible should be
dynamic, except for files that are non standard. These may include fortran
libraries, non standard X libraries, and tcl/tk (which are possibly static
only anyway).

It is important to be able to test the binaries afterwards to check that the
binary really does have no dynamic dependencies on local software. This method
changes from machine to machine. The following is an example of how to check
the library list. The commands should be invoked from sh or bash.

Digital Unix:	_RLD_ARGS=-v ./alpha-binaries/prog
Irix 5.3:	_RLD_ARGV=-v _RLD_PATH=/usr/lib/rld.debug ./sgi-binaries/prog
SunOS 4.1:	ldd ./sun-binaries/prog
Solaris 2.x:	ldd ./solaris-binaries/prog

The libraries to ensure that don't exist in the dynamic list are:

Digital Unix:
Irix 5.3:
Solaris 2.x:
	Fortran libraries (dynamic copies aren't installed by default)

SunOS4.1:
	Fortran libraries
	X11 libraries (we have compiled X11R6 ourselves)


			  Writing a program Makefile
			  ==========================

This is the final part of the Makefile scheme. The program Makefiles are the
real business end of things. They simply consist of includes of global.mk and
the system Makefile in addition to the program specific commands.


Initialisation
--------------

The start of the Makefile should contain the following. This is based around
the trev Makefile as an example.

--start--
PROGS = $(O)/trevsh

SRCROOT=..
#SRCROOT=$(STADENROOT)/src

# Uncomment this for compiling of remote sources
#REMOTESRC=$(TREVSRC)

include $(SRCROOT)/mk/global.mk
include $(SRCROOT)/mk/$(MACHINE).mk
---end---

The first line states which binaries need to be made when a 'make' or 'make
all' is performed. Don't write your own 'all' target. The $(O) is a short
macro (think "objects") for the location to place the object files. It expands
up to $MACHINE-binaries. "make all" will build all the executables listed in
the PROGS line. If you don't wish to compile all these then use an explicit
"make $MACHINE-binaries/program" command.

The SRCROOT line states where the rest of the source resides. Typically this
is in the parent directory, however in the case of working on programs
external to the master source repository we will wish to specify this
explicitly. The reason this is not the default is simply to reduce the
compilation line lengths.

The two include statements pick up the global and system dependant Makefile
stubs. The system copy picked up depends on the value of the MACHINE
environment variable. Set it to one of (eg) alpha, sgi, solaris or sun.


Includes
--------

The INCLUDES_E variable can be set to specify a list of extra include paths to
search. It appends this onto the default include paths, which are . and
$SRCROOT/misc. To prepend this list use INCLUDES_S instead.

--start--
INCLUDES_E += $(IOLIB_INC) $(TK_INC)
---end---

Note that this is an addition rather than a set. INCLUDES_E may have already
been edited by the system dependent Makefile stub.

IOLIB_INC and TK_INC are standard shortcuts for specifying the compiler flags
to include the correct paths. They are typically something like
"-I$(IOLIBSRC)/include" or "-I$(TREVSRC)". The complete list of available
shortcuts are follow. Note that if there's an extra include directory specific
to this program for which there is no shortcut, then simply use the "-Idir"
notation.

MISC_INC	The misc directory

TCL_INC		The system location for tcl.h

TK_INC		The system location for tk.h as well as tcl.h and X11.h
		which are both needed by tk.h

X_INC		Where to find X includes
XAW_INC		Same as X_INC

IOLIB_INC	These three are all the same (due to the layout of the io_lib
SCF_INC		source directories). Basically they specify the io_lib/include
EXP_INC		location.
IOUTILS_INC

G_INC		g directory

TCLUTILS_INC	tcl_utils directory

SEQUTILS_INC	seq_utils directory

SEQLIB_INC	seqlib directory


Objects
-------

The objects should be specified in the following manner:

--start--
TREVBIN=$(O)

TREV_OBJS = \
	$(TREVBIN)/tkTrace.o\
	$(TREVBIN)/tkTraceIO.o\
	$(TREVBIN)/tkAppInit.o\
	$(TREVBIN)/tkTraceDisp.o\
	$(TREVBIN)/tkTraceComp.o

---end---

See the remote compilations section for more details on editing this.
The "TREVBIN=$(O)" line is needed in order to prevent looping. Without it the
make command may attempt to cd to the current directory and remake again.
It also greatly tidies up the compile line.


Linking
-------

--start--
DEPS=\
	$(IOLIBBIN)/libread.a \
	$(IOLIBBIN)/libio-utils.a \
	$(MISCBIN)/libmisc.a

TREV_LIBS=\
	$(IOLIB_LIB) \
	$(MISC_LIB) \
	$(TK_LIB)

$(O)/trevsh:	$(TREV_OBJS) $(DEPS)
	$(CLD) -o $@ $(TREV_OBJS) $(TREV_LIBS) $(LIBSC)
---end---

The DEPS definition specifies dependences (FIXME: these need tidying up) for
library files included. Often this is blank.

The TREV_LIBS line specifies which libraries to link with. This consists of a
bunch of $(???_LIB) macros which contain both -L and -l options to the linker.
Eg TK_LIB is defined as "$(TK_LIB_S) -L$(TKBIN) $(TK_LIB_E) -ltk $(TCL_LIB)
$(X_LIB)". Most of that is blank hooks for system dependent extensions. Often
this boils down to -L/usr/local/lib -ltk -ltcl -lm

The complete list available includes the following:

MISC_LIB	The misc library

TCL_LIB		Tcl and maths libraries only 
TK_LIB		Tk+Tcl and maths libraries

X_LIB		X11 library only
XAW_LIB		Xaw and other X libraries (including X11)

IOLIB_LIB	read (which is all of scf, exp, and io-utils libraries)
SCF_LIB		scf and io-utils libraries
EXP_LIB		exp and io-utils libraries
IOUTILS_LIB	io-utils library only

G_LIB		g library

TCLUTILS_LIB	tcl_utils library

SEQUTILS_LIB	seq_utils library

SEQLIB_LIB	seqlib library


Finally comes the link line for trevsh. This states that TREV_OBJS (our
compiled source) and our dependent library need to be built first.
The link line will start with CLD or FLD. CLD is for entirely C (ignoring
Tcl/Tk at present) programs, and FLD is for programs contain some, or all,
Fortran. The corresponding LIBSC (for CLD) and LIBSF (for FLD) must be used to
specify the system libraries needed by each compiler.

Installation
------------

The term 'installation' in this context simply means installing the compiled
binaries in the STADENROOT/bin directory. In most cases it is nothing more
than copying $(PROGS), but in some cases we may have auxilary files to move
too. In this case we need to copy the 'trev' shell script (which invokes our
trevsh binary with the correct arguments).

--start--
install:
	cp $(PROGS) $(STADENROOT)/bin
	cp trev $(STADENROOT)/bin
---end---


Dependencies
------------

This section of the Makefile should be for specifying which objects need
to be checked for dependency with our local source code.

--start--
DEPEND_OBJ = $(TREV_OBJS)

include dependencies
---end---

For a Makefile with several binaries, list all in the DEPEND_OBJ line. This
list is then used by the 'make depend' target. This produces a dependencies
file which is then included by sequent make commands. The CFLAGS (and hence
INCLUDES list) are used in this operation too.


Remote compilations
-------------------

When working on a set of modified sources you only need copy the relevant
program Makefile, a blank dependencies file (more on this later) and any
sources to modify to your own local directory. This requires a few minor
changes to the program Makefile.

The (eg) "TREVBIN=$(O)" line states that all the object files are to be placed
in ./$MACHINE-binaries. Unless we wish to recompile everything, we need to
comment out this line. For the files that we have local copies of we then need
to state that the object file to use is also local. We do this by modifying
the (eg) "$(TREVBIN)/tkTrace.o" line in the objects listing to
"$(O)/tkTrace.o".

REMOTESRC can be defined to a directory to obtain more source when a target in
this directory fails. This is often commented out (or simply omitted) by
default in the program Makefiles.

An example use of this is when we have changed some important header files and
we need to recompile everything, not just our local sources. To do this we do
_not_ comment out the "TREVBIN=$(O)" line. This causes all object files to be
recompiled, and those that are not found are picked up from the main trev
source directory by defining "REMOTESRC=$(TREVSRC)".

Finally, note that the dependencies file will either need to rebuilt (possibly
using a more sophisticated system than "make depend"), or made into a blank
file (do this with something like "cp /dev/null dependencies"). The reason is
that the dependencies file will often include statements such as "fred.c
depends on ../elsewhere/shiela.c". Unless we also have copies of ../elsewhere
available, or have made a symbolic link for it, then this dependency will
always fail.


				    Notes
				    =====

Fast testing of libraries
-------------------------

Several of the package directories are dedicated to building libraries for use
with other programs. Whilst working on these libraries it is often preferable
to generate dynamic libraries so that a (dynamically compiled) test program
(which maybe something as large as gap4) can be used over and over again
without the need to recompile it whenever the library is recompiled. This can
be done on all of the currently supported platforms, but I list here only the
method for Digital Unix:

(In the library Makefile)
1. set PROGS to be a dynamic object. Eg:

LIBS = $(O)/libg.so
PROGS= $(LIBS)

2. produce the dynamic library

$(LIBS) : $(OBJS)
	ld -rpath `pwd`/$(O) -expect_unresolved "*" -shared $(OBJS) -o $(LIBS)
	mv so_locations $(O)
# Was:
#	/bin/rm -f $(LIBS) ;\
#	$(AR) $(ARFLAGS) $(LIBS) $(OBJS) ;\
#	$(RANLIB) $(LIBS)

3. Remove the static copy (eg rm alpha-binaries/libg.a) and relink the test
program.


Obtaining GNU make
------------------

GNU make version 3.64 (released April 21st 1993) or higher is required on non
Sun systems.

It can be obtained from any one of a number of GNU source repositories,
prep.ai.mit.edu being the base site. Please use archie to search for
'make-3.68' to find a local site to obtain GNU make from.
If you cannot obtain the newest release of gmake then change all the "A += X"
lines to "A := $(A) X" in Makefiles with, for instance, the following sed line:

sed 's/\([a-zA-Z_][a-zA-Z_0-9]*\)[ TAB]*\+=/\1 := $(\1) /'
	(where 'TAB' is a literal tab character)

When compiling GNU make on a DEC Alpha running OSF/1 V1.2 you should either
use cc, or change lines 178 and 181 of commands.c to read:

    cp[0 + (cp > caret_value ? -1 : 0)] = '\0';
    qp[0 + (qp > qmark_value ? -1 : 0)] = '\0';

This works around a bug in the c89 compiler. (These line numbers are valid for
GNU make version 3.68, but may be different for other versions.) Later
revisions of the OSF/1 (now known as Digital Unix) compiler have this problem
fixed.
