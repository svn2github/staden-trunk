*	BUG:
	tg_index DEMO.1.baf
	gap5 g_db

	Break Contig
	    Highlight (selecting) Contig6
	    Base pos: 2000
	    OK

	Seems Break Contig doesn't correctly move the 16 reads to the
	new contig?
	

*       Bins currently hold their position, size and left/right child
	numbers. Instead they could hold the left/right child record,
	position and sizes. This means we don't need to load the
	left/right child just to work out where it resides. Currently
	because of the possibility of overlapping bins we load twices
	as many as we actually need to (including the range array).

*	A binary tree of bins means lots of layers, say 15 for Chr1.
        With an 8-way or more tree we'd only need at most 6 layers
        (and in general approx 1/3rd the layers). This is 2-3x less
        I/O when joining, breaking, querying, etc.
	The optimal system may be an b-tree with a variable number of
        children per bin. This is a big change though.

*	BUG: Inserting/deleting from an individual sequence doesn't
        update the tags. This may mean moving annotations,
        growing/shrinking them or even deleting them entirely.

*	BUG: Contig selector shows full cutoff lengths and not clipped
        lengths. However right-click and edit contig adds left-clip point on
	so we can appear to want to edit outside the contig range.

*	BUG: Inserting into the consensus also inserts to cutoff sequences.

*	BUG: Searching by read name should point editor on the first
        used base, not the first base.

*	BUG: Can create tags off the ends of contigs.

*	BUG: Insert to consensus at pos -200 say (when only clipped
        data there), followed by undo => crash. (Cannot repeat)

*	Output P operators instead of D operators in sam. This should
        fix the samtools consensus generation.

*	Add Copy Database dialogue.

*	Sequence searching should underline the matching sequence,
        rather than just setting the cursor to the start.

*	User request: allow break contig from within the editor.

*	Add support for reference sequences. See also unpadded
        coordinates. (I suspect the two are connected.)

*	We can save some minor storage by rearranging the GRANGE_FLAG_
	variables. Currently we have in-memory and on-disk values
	mixed together; eg the computed "pair held within the same
	contig" value of 1<<3 and the stored "range has been deleted"
	value of 1<<10. If we shuffle these arround and only store the
	lower-bits then we can save space due to the way int2u7
	works.

*	Investigate order-1 range coding for the quality values. This
        would appear to be a good 10-15% smaller than gzip, at least
        when we haven't got a whole bunch of zeros to RLE.

*	Unpadded coordinates. We could store per bin some data of how
        many pads there are within it's boundaries. Even if we don't
        store where, that one single value is sufficient to make
        computing an unpadded coordinate a O(log(N)) computation.

*	Investigate use of seq_t->bin_index field. This is primarily
        used for the sequence_get_pair function and or the
        read-pairing during tg_index (which needs a rewrite
        anyway). Perhaps just duplicating range_t->pair_rec into the
        seq_t struct and removing bin_index field instead (so it's no
        larger in storage) would be better.

	The reason I'd like to remove this is that currently it means
	we cannot remove from a bin Range array; only mark as unused
	instead. (Removal would mean shuffling data down and
	consequentially updating all seq_t structs to have a new
	bin_index value.)

	It has impact on seq_t->mapping_qual vs range_t->mqual
	though. Currently this is duplicated. Should we treat the
	ranges array copy as simply a cache for faster viewing, or
	should we actually treat it as the primary copy and remove the
	duplicates? If we do the latter then we still need a fast way
	of going from seq_t to the range_t linking to it. One
	possibility would be to require that the data in a range_t
	array is sorted by position and then record number (and it
	probably is already), which allows for binary search.

*	Implement a proper record deallocation (or reuse) system.
	Right now contig_destroy and anno_ele_destroy just unlink the
	record, but leave the disk space used up.

*	NOTE: questionable change - need to ponder.

	When adding annotation elements for sequences, attempt to
        store in the same bin that the sequence resides in even if
        they could fit in a smaller bin. Eg right now:

	 +---------------------+
         |A     ......seq....  |
         +-----------+---------+
         |B          | .tag.  C|
	 +-----------+---------+
               
	.tag. on this sequence ends up in bin C while the sequence is
	in bin A.

	The reason for wanting both in the same bin is it makes some
	bin manipulation algorithms (eg break contig) easier if we
	know items attached to each other share the same bin.

	Suggest we create a bin_add_range_to() function that takes an
	existing bin and avoids the call to find bin for range.

*	When adding data in pair mode (tg_index -p), try using a 2
        pass affair. We observe that it slows down linearly and grows
        memory linearly. This is due to random scattering of
        read-pairs rather than neatly in order. This also translates
        to random I/O instead of mostly serial. Solution is:

	1) When we have 1st_read (written) and 2nd_read (just loaded
           from input data), do not edit 1st_read to point to
           2nd_read. Instead write the ID of 1st+2nd to a file. Use a
           2nd pass at end to relink all the 1st reads to their 2nd.
	   (Part 1 DONE)

	2) To reduce memory, perioidically purge the read name hash
           table and write out the purged data to a file too for
           subsequent fixing. This step would need a sort algorithm I
           think to relink 1st and 2nd together as both copies will
           need fixing.

*	Removal of iwidgets/itcl/itk?  itcl/itk widgets: itcl/itk =>
	{prefinish, spin, spin2, seqed}/*.itk

	iwidgets => *gap4/acd2tag.tcl, *contig_editor (tabset), gap_prefinish
		    *pregap4/gui.tcl (tabnotebook)
		    seqed/*
		    spin/*
		    spin2/*
		    spin_emboss/* (via acd2tcl)

*	Improve library displays and auto-sensing.

*	Improved depth caching (min/max as well as average)

*	Implement annotation links as well as annotation elements.

*	Add visualisation of annotations in template display.

*	Split up template display into multiple panels, for GC, depth,
        annotation, etc tracks.

*	Maq/BAM can store unaligned data where one end of a read-pair
	maps and the other end does not. The unaligned read is stored
	adjacen to the aligned read and just has a flag saying it's
	unaligned. Currently tg_index strips these out.

	Add a -u option to tg_index to store this with an appropriate
	flag. Add a function to gap5 to dump out a fastq of unaligned
	reads over a specific region. The purpose is, for example, to
	perform denovo assembly of unaligned reads around a deletion
	in order to identify the deleted sequence.

*	Contig notifications should be per io (base or child) and not
        solely on the base? Alternatively they should always be the
        base but the actual io should be known so windows can ignore
        ignore or delay handling of io events.

* 	Fix editor UNDO. (Only works for Tcl controlled I/O atm)

*	Annotations
	partially done.

*	Store alignments for trace displaying
	(PARTIALLY DONE: needs better format and use of them)

*	Mixed assemblies
	- splitting reads by type (sanger, solid, 454, solexa)

*	Fix reading name indexing.
	- B+Tree is OK for searching and small updates, but updating
	serially for every read 1 at a time is Nlog(N) complexity and
	becomes slow.
	- Suggest binning names to temporary files as we read them and
	then sorting within the bins and bulk uploading of the B+Tree.

*	DEBUG version:
	Cache items should have an md5 sum for the data structure
        created at population.
	Upon removal of cache, if the md5 sum has changed but our data
        hasn't been marked for r/w then we should fail. Alternatively
        if our data has been marked r/w but the md5 sum hasn't changed
        then we can print a warning about unnecessary writing of data
	structures.


BUG: Join Contigs with containment and one contig not starting at 1
causes issues.
Ie KEEP_POSITIONS defined in editor_join. Break suis1 at 17000. Join
suis1 and suis#1 with suis#1@17000 aligned against suis1@7000. This
gives incorrect start position and indeed seems to muddle left and
right contig somewhat.


Annotations
-----------

Annotations consist of two parts, an annotation element and the
annotation itself, which is a means of collating the elements
together. The annotation elements have a start/end range and are
attached to sequences or contigs.

This means that we can have one annotation element per sequence
marking a repeat, but all annotation elements are essentially part of
the same annotation. Hence we can tell which other sequences share
this annotation.

Similarly we could have one annotation with two elements, each at the
end of a contig. This forms a link between the two contigs and can
represent scaffolding or overlap graphs.

In short:

anno_element
	record type/number (GT_Seq/2378123, GT_Contig/4, etc);
	text comment
	anno_rec (link to anno below)

anno
	key (aka tag type)
	value (the text contents)
	Array of anno_element


The positioning of the annotation elements will be held in the contig
bin structures, just like sequences. Hence they get moved about by
insertions, deletions, joins, etc.


