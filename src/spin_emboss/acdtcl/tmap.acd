package require Iwidgets
namespace eval ::EMBOSS::tmap {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_tmap*Xentry.entry.width 30
option add *e_tmap*Entryfield.width 30
option add *e_tmap*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) tmap
    set w [xtoplevel .e_tmap -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - tmap}
    label $w._title -text {Displays membrane spanning regions}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(tmap._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequences
    set vars(sequences)       [get_active_seq_id 0]
    if {$vars(sequences) == -1} {set vars(sequences) [get_active_seq_id 0]}
    set vars(sequences.name)  [seq_info $vars(sequences) name]
    sequence_changed [namespace current] sequences
    set vars(sequences.type) [subst gapprotein]
    seq_id $w.sequences \
	-textvariable [namespace current]::vars(sequences.name)\
	-start_value $vars(sequences.begin)\
	-end_value $vars(sequences.end)\
	-to [seq_info $vars(sequences) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequences $w.sequences}"
    set vars(sequences) [subst {}]
    pack $w.sequences -side top -fill both
    set vars(sequences.path) $w.sequences
    set vars(sequences.required)  1
    trace variable vars(sequences.name) w  "::EMBOSS::sequence_changed [namespace current] sequences"
   set vars(sequences.totweight) [subst 0]
    set vars(sequences._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) xygraph

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) report

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/tmap.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

