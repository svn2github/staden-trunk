package require Iwidgets
namespace eval ::EMBOSS::dbiblast {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_dbiblast*Xentry.entry.width 30
option add *e_dbiblast*Entryfield.width 30
option add *e_dbiblast*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) dbiblast
    set w [xtoplevel .e_dbiblast -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - dbiblast}
    label $w._title -text {Index a BLAST database}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(dbiblast._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments dbname
    iwidgets::entryfield $w.dbname \
	-textvariable [namespace current]::vars(dbname) \
	-labeltext [subst {Database name}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.dbname component entry] -sticky nse
    set vars(dbname) [subst {}]
    pack $w.dbname -side top -fill both
    set vars(dbname.path) $w.dbname
    set vars(dbname.required)  1
    set vars(dbname._type) string

    lappend arguments directory
    xentry $w.directory \
	-label [subst {Database directory}]\
	-textvariable [namespace current]::vars(directory) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.directory delete 0 end
    $w.directory insert end [subst .]
    pack $w.directory -side top -fill both
    set vars(directory.path) $w.directory
    set vars(directory.required)  0
    set vars(directory._type) directory

    lappend arguments filenames
    iwidgets::entryfield $w.filenames \
	-textvariable [namespace current]::vars(filenames) \
	-labeltext [subst {Wildcard database filename}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.filenames component entry] -sticky nse
    set vars(filenames) [subst {[expr {$vars(dbname)}]}]
    pack $w.filenames -side top -fill both
    set vars(filenames.path) $w.filenames
    set vars(filenames.required)  0
    set vars(filenames.orig) $vars(filenames)
    set vars(filenames.expr) {[expr {$vars(dbname)}]}
    trace variable vars(dbname) w  "::EMBOSS::reset_value [namespace current] filenames"
    set vars(filenames._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments release
    iwidgets::entryfield $w.release \
	-textvariable [namespace current]::vars(release) \
	-labeltext [subst {Release number}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.release component entry] -sticky nse
    set vars(release) [subst 0.0]
    pack $w.release -side top -fill both
    set vars(release.path) $w.release
    set vars(release.required)  0
    set vars(release._type) string

    lappend arguments date
    iwidgets::entryfield $w.date \
	-textvariable [namespace current]::vars(date) \
	-labeltext [subst {Index date}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.date component entry] -sticky nse
    set vars(date) [subst 00/00/00]
    pack $w.date -side top -fill both
    set vars(date.path) $w.date
    set vars(date.required)  0
    set vars(date._type) string

    lappend arguments seqtype
    iwidgets::combobox $w.seqtype\
	-textvariable [namespace current]::vars(seqtype.name)\
	-labeltext [subst {Sequence type}]
    trace variable vars(seqtype.name) w  "::EMBOSS::list_changed [namespace current] seqtype"
    eval $w.seqtype insert list end nucleic protein unknown
    set vars(seqtype.mapping1) {unknown ? protein P nucleic N}
    set vars(seqtype.mapping2) {P protein N nucleic ? unknown}
    grid [$w.seqtype component entry] -sticky nse
    $w.seqtype delete entry 0 end
    array set tmpmap $vars(seqtype.mapping2)
    set def [subst unknown]
    catch {set def $tmpmap($def)}
    set vars(seqtype) $def
    $w.seqtype insert entry end $def
    $w.seqtype configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.seqtype -side top -fill both
    set vars(seqtype.path) $w.seqtype
    set vars(seqtype.required)  0
    set vars(seqtype.delimiter) {;}
    set vars(seqtype._type) list

    lappend arguments blastversion
    iwidgets::combobox $w.blastversion\
	-textvariable [namespace current]::vars(blastversion.name)\
	-labeltext [subst {Blast index version}]
    trace variable vars(blastversion.name) w  "::EMBOSS::list_changed [namespace current] blastversion"
    eval $w.blastversion insert list end {{wublast and setdb/pressdb}} formatdb unknown
    set vars(blastversion.mapping1) {unknown 0 {wublast and setdb/pressdb} 1 formatdb 2}
    set vars(blastversion.mapping2) {0 unknown 1 {wublast and setdb/pressdb} 2 formatdb}
    grid [$w.blastversion component entry] -sticky nse
    $w.blastversion delete entry 0 end
    array set tmpmap $vars(blastversion.mapping2)
    set def [subst unknown]
    catch {set def $tmpmap($def)}
    set vars(blastversion) $def
    $w.blastversion insert entry end $def
    $w.blastversion configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.blastversion -side top -fill both
    set vars(blastversion.path) $w.blastversion
    set vars(blastversion.required)  0
    set vars(blastversion.delimiter) {;}
    set vars(blastversion._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments fields
    iwidgets::scrolledlistbox $w.fields \
	-exportselection 0\
	-labeltext [subst {Select several}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] fields"\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.fields -side top -fill both -expand 1
    set vars(fields.mapping1) {Description des {Accession number} acnum {Sequence Version and GI} seqvn}
    set vars(fields.mapping2) {des Description acnum {Accession number} seqvn {Sequence Version and GI}}
    eval $w.fields insert end {{Accession number}} {{Sequence Version and GI}} Description
    set vars(fields.path) $w.fields
    set vars(fields.required)  0
    set vars(fields.delimiter) {;}
    trace variable vars(fields) w  "::EMBOSS::list_multi_changed [namespace current] fields"
    set vars(fields) [subst acnum]
    set vars(fields._type) list_multi

    lappend arguments exclude
    iwidgets::entryfield $w.exclude \
	-textvariable [namespace current]::vars(exclude) \
	-labeltext [subst {Wildcard filename(s) to exclude}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.exclude component entry] -sticky nse
    set vars(exclude) [subst {}]
    pack $w.exclude -side top -fill both
    set vars(exclude.path) $w.exclude
    set vars(exclude.required)  0
    set vars(exclude._type) string

    lappend arguments indexdirectory
    xentry $w.indexdirectory \
	-label [subst {Index directory}]\
	-textvariable [namespace current]::vars(indexdirectory) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.indexdirectory delete 0 end
    $w.indexdirectory insert end [subst .]
    pack $w.indexdirectory -side top -fill both
    set vars(indexdirectory.path) $w.indexdirectory
    set vars(indexdirectory.required)  0
    set vars(indexdirectory._type) directory

    lappend arguments sortoptions
    iwidgets::entryfield $w.sortoptions \
	-textvariable [namespace current]::vars(sortoptions) \
	-labeltext [subst {Sort option(s)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sortoptions component entry] -sticky nse
    set vars(sortoptions) [subst {-T . -k 1,1}]
    pack $w.sortoptions -side top -fill both
    set vars(sortoptions.path) $w.sortoptions
    set vars(sortoptions.required)  0
    set vars(sortoptions._type) string

    lappend arguments maxindex
    iwidgets::entryfield $w.maxindex \
	-validate integer \
	-textvariable [namespace current]::vars(maxindex) \
	-labeltext [subst {Maximum index length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxindex component entry] -sticky nse
    set vars(maxindex) [subst 0]
    pack $w.maxindex -side top -fill both
    set vars(maxindex.minimum) [subst 0]
    set vars(maxindex.path) $w.maxindex
    set vars(maxindex.required)  0
    set vars(maxindex._type) integer

    lappend arguments systemsort
    checkbutton $w.systemsort \
	-text [subst {Use system sort utility}]\
	-variable [namespace current]::vars(systemsort)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.systemsort -side top -anchor w
    set vars(systemsort) [subst Y]
    set vars(systemsort.path) $w.systemsort
    set vars(systemsort.required)  0
    set vars(systemsort._type) boolean

    lappend arguments cleanup
    checkbutton $w.cleanup \
	-text [subst {Clean up temporary files}]\
	-variable [namespace current]::vars(cleanup)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.cleanup -side top -anchor w
    set vars(cleanup) [subst Y]
    set vars(cleanup.path) $w.cleanup
    set vars(cleanup.required)  0
    set vars(cleanup._type) boolean

    lappend arguments sourcefile
    checkbutton $w.sourcefile \
	-text [subst {Use FASTA source file}]\
	-variable [namespace current]::vars(sourcefile)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.sourcefile -side top -anchor w
    set vars(sourcefile) [subst 0]
    set vars(sourcefile.path) $w.sourcefile
    set vars(sourcefile.required)  0
    set vars(sourcefile._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/dbiblast.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

