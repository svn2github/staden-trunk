package require Iwidgets
namespace eval ::EMBOSS::seqsearch {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_seqsearch*Xentry.entry.width 30
option add *e_seqsearch*Entryfield.width 30
option add *e_seqsearch*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) seqsearch
    set w [xtoplevel .e_seqsearch -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - seqsearch}
    label $w._title -text {Generate files of hits for families in a scop classification file by using PSI-BLAST with seed alignments.}
    pack $w._title -side top -fill both
    set vars(seqsearch._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments escop
    xentry $w.escop \
	-label [subst {Name of scop classification file (embl format input)}]\
	-textvariable [namespace current]::vars(escop) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.escop delete 0 end
    $w.escop insert end [subst Escop.dat]
    pack $w.escop -side top -fill both
    set vars(escop.path) $w.escop
    set vars(escop.required)  1
    set vars(escop._type) infile

    lappend arguments align
    iwidgets::entryfield $w.align \
	-textvariable [namespace current]::vars(align) \
	-labeltext [subst {Location of scop alignment files (input)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.align component entry] -sticky nse
    set vars(align) [subst ./]
    pack $w.align -side top -fill both
    set vars(align.path) $w.align
    set vars(align.required)  1
    set vars(align._type) string

    lappend arguments alignextn
    iwidgets::entryfield $w.alignextn \
	-textvariable [namespace current]::vars(alignextn) \
	-labeltext [subst {Extension of scop alignment files}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.alignextn component entry] -sticky nse
    set vars(alignextn) [subst .salign]
    pack $w.alignextn -side top -fill both
    set vars(alignextn.path) $w.alignextn
    set vars(alignextn.required)  1
    set vars(alignextn._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments niter
    iwidgets::entryfield $w.niter \
	-validate integer \
	-textvariable [namespace current]::vars(niter) \
	-labeltext [subst {Number of PSIBLAST iterations}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.niter component entry] -sticky nse
    set vars(niter) [subst 1]
    pack $w.niter -side top -fill both
    set vars(niter.path) $w.niter
    set vars(niter.required)  1
    set vars(niter._type) integer

    lappend arguments evalue
    iwidgets::entryfield $w.evalue \
	-validate real \
	-textvariable [namespace current]::vars(evalue) \
	-labeltext [subst {Threshold E-value for inclusion in family}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.evalue component entry] -sticky nse
    set vars(evalue) [subst 0.001]
    pack $w.evalue -side top -fill both
    set vars(evalue.path) $w.evalue
    set vars(evalue.required)  1
    set vars(evalue._type) float

    lappend arguments maxhits
    iwidgets::entryfield $w.maxhits \
	-validate integer \
	-textvariable [namespace current]::vars(maxhits) \
	-labeltext [subst {Maximum number of hits}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxhits component entry] -sticky nse
    set vars(maxhits) [subst 1000]
    pack $w.maxhits -side top -fill both
    set vars(maxhits.path) $w.maxhits
    set vars(maxhits.required)  1
    set vars(maxhits._type) integer

    lappend arguments submatrix
    iwidgets::entryfield $w.submatrix \
	-textvariable [namespace current]::vars(submatrix) \
	-labeltext [subst {Residue substitution matrix}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.submatrix component entry] -sticky nse
    set vars(submatrix) [subst ./EBLOSUM62]
    pack $w.submatrix -side top -fill both
    set vars(submatrix.path) $w.submatrix
    set vars(submatrix.required)  1
    set vars(submatrix._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments hits
    iwidgets::entryfield $w.hits \
	-textvariable [namespace current]::vars(hits) \
	-labeltext [subst {Location of scop hits files (output)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.hits component entry] -sticky nse
    set vars(hits) [subst ./]
    pack $w.hits -side top -fill both
    set vars(hits.path) $w.hits
    set vars(hits.required)  1
    set vars(hits._type) string

    lappend arguments hitsextn
    iwidgets::entryfield $w.hitsextn \
	-textvariable [namespace current]::vars(hitsextn) \
	-labeltext [subst {Extension of scop hits files}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.hitsextn component entry] -sticky nse
    set vars(hitsextn) [subst .hits]
    pack $w.hitsextn -side top -fill both
    set vars(hitsextn.path) $w.hitsextn
    set vars(hitsextn.required)  1
    set vars(hitsextn._type) string

    lappend arguments logf
    xentry $w.logf \
	-label [subst {Name of log file for the build}]\
	-textvariable [namespace current]::vars(logf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.logf delete 0 end
    $w.logf insert end [subst seqsearch.log]
    pack $w.logf -side top -fill both
    set vars(logf.path) $w.logf
    set vars(logf.required)  1
    set vars(logf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/seqsearch.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

