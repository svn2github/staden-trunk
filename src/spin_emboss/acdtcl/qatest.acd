package require Iwidgets
namespace eval ::EMBOSS::qatest {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_qatest*Xentry.entry.width 30
option add *e_qatest*Entryfield.width 30
option add *e_qatest*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) qatest
    set w [xtoplevel .e_qatest -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - qatest}
    label $w._title -text {ACD file for QA testing}
    pack $w._title -side top -fill both
    set vars(qatest._type) application

    lappend arguments asequence
    set vars(asequence)       [get_active_seq_id 0]
    if {$vars(asequence) == -1} {set vars(asequence) [get_active_seq_id 0]}
    set vars(asequence.name)  [seq_info $vars(asequence) name]
    sequence_changed [namespace current] asequence
    set vars(asequence.type) [subst any]
    seq_id $w.asequence \
	-textvariable [namespace current]::vars(asequence.name)\
	-start_value $vars(asequence.begin)\
	-end_value $vars(asequence.end)\
	-to [seq_info $vars(asequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] asequence $w.asequence}"
    set vars(asequence) [subst {}]
    pack $w.asequence -side top -fill both
    set vars(asequence.path) $w.asequence
    set vars(asequence.required)  1
    trace variable vars(asequence.name) w  "::EMBOSS::sequence_changed [namespace current] asequence"
    set vars(asequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst any]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  1
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence._type) sequence

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst qatest0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments aint
    iwidgets::entryfield $w.aint \
	-validate integer \
	-textvariable [namespace current]::vars(aint) \
	-labeltext [subst {first integer}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.aint component entry] -sticky nse
    set vars(aint) [subst 0]
    pack $w.aint -side top -fill both
    set vars(aint.path) $w.aint
    set vars(aint.required)  0
    set vars(aint._type) int

    lappend arguments bint
    iwidgets::entryfield $w.bint \
	-validate integer \
	-textvariable [namespace current]::vars(bint) \
	-labeltext [subst {second integer}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.bint component entry] -sticky nse
    set vars(bint) [subst 57]
    pack $w.bint -side top -fill both
    set vars(bint.path) $w.bint
    set vars(bint.required)  0
    set vars(bint._type) int

    lappend arguments testalen
    iwidgets::entryfield $w.testalen \
	-textvariable [namespace current]::vars(testalen) \
	-labeltext [subst {asequence length [expr {$vars(asequence.length)}]}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.testalen component entry] -sticky nse
    set vars(testalen) [subst {}]
    pack $w.testalen -side top -fill both
    set vars(testalen.path) $w.testalen
    set vars(testalen.required)  1
    set vars(testalen.info.expr) {asequence length [expr {$vars(asequence.length)}]}
    trace variable vars(asequence.length) w  "::EMBOSS::reset_name [namespace current] testalen"
    set vars(testalen._type) string

    lappend arguments testblen
    iwidgets::entryfield $w.testblen \
	-textvariable [namespace current]::vars(testblen) \
	-labeltext [subst {bsequence length [expr {$vars(bsequence.length)}]}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.testblen component entry] -sticky nse
    set vars(testblen) [subst {}]
    pack $w.testblen -side top -fill both
    set vars(testblen.path) $w.testblen
    set vars(testblen.required)  1
    set vars(testblen.info.expr) {bsequence length [expr {$vars(bsequence.length)}]}
    trace variable vars(bsequence.length) w  "::EMBOSS::reset_name [namespace current] testblen"
    set vars(testblen._type) string
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/qatest.html}
    pack $w._okcancelhelp -side bottom -fill x
}


}; # namespace eval

