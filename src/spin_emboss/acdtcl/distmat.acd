package require Iwidgets
namespace eval ::EMBOSS::distmat {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_distmat*Xentry.entry.width 30
option add *e_distmat*Entryfield.width 30
option add *e_distmat*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) distmat
    set w [xtoplevel .e_distmat -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - distmat}
    label $w._title -text {Creates a distance matrix from multiple alignments}
    pack $w._title -side top -fill both
    set vars(distmat._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments msf
    set vars(msf)       [get_active_seq_id 0]
    if {$vars(msf) == -1} {set vars(msf) [get_active_seq_id 0]}
    set vars(msf.name)  [seq_info $vars(msf) name]
    sequence_changed [namespace current] msf
    set vars(msf.type) [subst gapany]
    seq_id $w.msf \
	-textvariable [namespace current]::vars(msf.name)\
	-start_value $vars(msf.begin)\
	-end_value $vars(msf.end)\
	-to [seq_info $vars(msf) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] msf $w.msf}"
    set vars(msf) [subst {}]
    pack $w.msf -side top -fill both
    set vars(msf.path) $w.msf
    set vars(msf.required)  1
    trace variable vars(msf.name) w  "::EMBOSS::sequence_changed [namespace current] msf"
   set vars(msf.totweight) [subst 0]
    set vars(msf._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments nucmethod
    iwidgets::combobox $w.nucmethod\
	-textvariable [namespace current]::vars(nucmethod.name)\
	-labeltext [subst {Method to use}]
    trace variable vars(nucmethod.name) w  "::EMBOSS::list_changed [namespace current] nucmethod"
    eval $w.nucmethod insert list end Uncorrected Jukes-Cantor Kimura Tamura Tajima-Nei {{Jin-Nei Gamma}}
    set vars(nucmethod.mapping1) {{Jin-Nei Gamma} 5 Kimura 2 Tamura 3 Jukes-Cantor 1 Uncorrected 0 Tajima-Nei 4}
    set vars(nucmethod.mapping2) {4 Tajima-Nei 0 Uncorrected 5 {Jin-Nei Gamma} 1 Jukes-Cantor 2 Kimura 3 Tamura}
    grid [$w.nucmethod component entry] -sticky nse
    $w.nucmethod delete entry 0 end
    array set tmpmap $vars(nucmethod.mapping2)
    set def [subst 0]
    catch {set def $tmpmap($def)}
    set vars(nucmethod) $def
    $w.nucmethod insert entry end $def
    $w.nucmethod configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(msf.protein))}]}]]]
    pack $w.nucmethod -side top -fill both
    set vars(nucmethod.path) $w.nucmethod
    set vars(nucmethod.required)  0
    set vars(nucmethod.delimiter) {;}
    set vars(nucmethod._type) list
    set vars(nucmethod.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(msf.protein))}]]}
    trace variable vars(msf.protein) w  "::EMBOSS::reset_needed [namespace current] nucmethod"

    lappend arguments protmethod
    iwidgets::combobox $w.protmethod\
	-textvariable [namespace current]::vars(protmethod.name)\
	-labeltext [subst {Method to use}]
    trace variable vars(protmethod.name) w  "::EMBOSS::list_changed [namespace current] protmethod"
    eval $w.protmethod insert list end Uncorrected Jukes-Cantor {{Kimura Protein}} {{}}
    set vars(protmethod.mapping1) {{} {} {Kimura Protein} 2 Jukes-Cantor 1 Uncorrected 0}
    set vars(protmethod.mapping2) {{} {} 0 Uncorrected 1 Jukes-Cantor 2 {Kimura Protein}}
    grid [$w.protmethod component entry] -sticky nse
    $w.protmethod delete entry 0 end
    array set tmpmap $vars(protmethod.mapping2)
    set def [subst 0]
    catch {set def $tmpmap($def)}
    set vars(protmethod) $def
    $w.protmethod insert entry end $def
    $w.protmethod configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(msf.protein)}]}]]]
    pack $w.protmethod -side top -fill both
    set vars(protmethod.path) $w.protmethod
    set vars(protmethod.required)  0
    set vars(protmethod.delimiter) {;}
    set vars(protmethod._type) list
    set vars(protmethod.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(msf.protein)}]]}
    trace variable vars(msf.protein) w  "::EMBOSS::reset_needed [namespace current] protmethod"

    lappend arguments ambiguous
    checkbutton $w.ambiguous \
	-text [subst {Use the abiguous codes in the calculation.}]\
	-variable [namespace current]::vars(ambiguous)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.ambiguous -side top -anchor w
    set vars(ambiguous) [subst 0]
    set vars(ambiguous.path) $w.ambiguous
    set vars(ambiguous.required)  0
    set vars(ambiguous._type) bool

    lappend arguments gapweight
    iwidgets::entryfield $w.gapweight \
	-validate real \
	-textvariable [namespace current]::vars(gapweight) \
	-labeltext [subst {Weight given to gaps}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapweight component entry] -sticky nse
    set vars(gapweight) [subst 0.]
    pack $w.gapweight -side top -fill both
    set vars(gapweight.path) $w.gapweight
    set vars(gapweight.required)  0
    set vars(gapweight._type) float

    lappend arguments position
    iwidgets::entryfield $w.position \
	-validate integer \
	-textvariable [namespace current]::vars(position) \
	-labeltext [subst {Base position to analyse.}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.position component entry] -sticky nse
    set vars(position) [subst 123]
    pack $w.position -side top -fill both
    set vars(position.path) $w.position
    set vars(position.required)  0
    set vars(position._type) integer

    lappend arguments calculatea
    checkbutton $w.calculatea \
	-text [subst {Calculate the a-parameter}]\
	-variable [namespace current]::vars(calculatea)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.calculatea -side top -anchor w
    set vars(calculatea) [subst 0]
    set vars(calculatea.path) $w.calculatea
    set vars(calculatea.required)  0
    set vars(calculatea._type) bool

    lappend arguments parametera
    iwidgets::entryfield $w.parametera \
	-validate real \
	-textvariable [namespace current]::vars(parametera) \
	-labeltext [subst a-parameter]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.parametera component entry] -sticky nse
    set vars(parametera) [subst 1.0]
    pack $w.parametera -side top -fill both
    set vars(parametera.path) $w.parametera
    set vars(parametera.required)  0
    set vars(parametera._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outf
    xentry $w.outf \
	-label [subst {Enter a name for the distance matrix}]\
	-textvariable [namespace current]::vars(outf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outf delete 0 end
    $w.outf insert end [subst distmat0.out]
    pack $w.outf -side top -fill both
    set vars(outf.path) $w.outf
    set vars(outf.required)  1
    set vars(outf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/distmat.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

