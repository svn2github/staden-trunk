package require Iwidgets
namespace eval ::EMBOSS::interface {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_interface*Xentry.entry.width 30
option add *e_interface*Entryfield.width 30
option add *e_interface*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) interface
    set w [xtoplevel .e_interface -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - interface}
    label $w._title -text {Reads coordinate files and writes files of inter-chain residue-residue contact data.}
    pack $w._title -side top -fill both
    set vars(interface._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments in
    xentry $w.in \
	-label [subst {Name of protein coordinate file for input (embl format)}]\
	-textvariable [namespace current]::vars(in) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.in delete 0 end
    $w.in insert end [subst {}]
    pack $w.in -side top -fill both
    set vars(in.path) $w.in
    set vars(in.required)  1
    set vars(in._type) infile

    lappend arguments vdwf
    iwidgets::entryfield $w.vdwf \
	-textvariable [namespace current]::vars(vdwf) \
	-labeltext [subst {Name of data file with van der Waals radii}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.vdwf component entry] -sticky nse
    set vars(vdwf) [subst Evdw.dat]
    pack $w.vdwf -side top -fill both
    set vars(vdwf.path) $w.vdwf
    set vars(vdwf.required)  1
    set vars(vdwf._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments thresh
    iwidgets::entryfield $w.thresh \
	-validate real \
	-textvariable [namespace current]::vars(thresh) \
	-labeltext [subst {Threshold contact distance}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.thresh component entry] -sticky nse
    set vars(thresh) [subst 1.0]
    pack $w.thresh -side top -fill both
    set vars(thresh.path) $w.thresh
    set vars(thresh.required)  1
    set vars(thresh._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments ignore
    iwidgets::entryfield $w.ignore \
	-validate real \
	-textvariable [namespace current]::vars(ignore) \
	-labeltext [subst {Threshold ignore distance}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.ignore component entry] -sticky nse
    set vars(ignore) [subst 20.0]
    pack $w.ignore -side top -fill both
    set vars(ignore.path) $w.ignore
    set vars(ignore.required)  0
    set vars(ignore._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments out
    xentry $w.out \
	-label [subst {Name of contact file for output}]\
	-textvariable [namespace current]::vars(out) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.out delete 0 end
    $w.out insert end [subst test.con]
    pack $w.out -side top -fill both
    set vars(out.path) $w.out
    set vars(out.required)  1
    set vars(out._type) outfile

    lappend arguments conerrf
    xentry $w.conerrf \
	-label [subst {Name of log file for the build}]\
	-textvariable [namespace current]::vars(conerrf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.conerrf delete 0 end
    $w.conerrf insert end [subst interface.log]
    pack $w.conerrf -side top -fill both
    set vars(conerrf.path) $w.conerrf
    set vars(conerrf.required)  1
    set vars(conerrf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/interface.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

