package require Iwidgets
namespace eval ::EMBOSS::prima {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_prima*Xentry.entry.width 30
option add *e_prima*Entryfield.width 30
option add *e_prima*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) prima
    set w [xtoplevel .e_prima -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - prima}
    label $w._title -text {Selects primers for PCR and DNA amplification.}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(prima._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst dna]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    iwidgets::labeledframe $w.targetsection \
	-labeltext [subst {Target options}]
    pack $w.targetsection -side top -fill both
    lappend wlist $w
    append w .targetsection.childsite

    lappend arguments targetrange
    checkbutton $w.targetrange \
	-text [subst {Specify a Target Range?}]\
	-variable [namespace current]::vars(targetrange)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.targetrange -side top -anchor w
    set vars(targetrange) [subst N]
    set vars(targetrange.path) $w.targetrange
    set vars(targetrange.required)  1
    set vars(targetrange._type) toggle

    lappend arguments targetstart
    iwidgets::entryfield $w.targetstart \
	-validate integer \
	-textvariable [namespace current]::vars(targetstart) \
	-labeltext [subst {Target start position.}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.targetstart component entry] -sticky nse
    set vars(targetstart) [subst {[expr {$vars(sequence.begin)}]}]
    pack $w.targetstart -side top -fill both
    set vars(targetstart.path) $w.targetstart
    set vars(targetstart.required)  0
    set vars(targetstart.orig) $vars(targetstart)
    set vars(targetstart.expr) {[expr {$vars(sequence.begin)}]}
    trace variable vars(sequence.begin) w  "::EMBOSS::reset_value [namespace current] targetstart"
    set vars(targetstart._type) integer

    lappend arguments targetend
    iwidgets::entryfield $w.targetend \
	-validate integer \
	-textvariable [namespace current]::vars(targetend) \
	-labeltext [subst {Target end position.}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.targetend component entry] -sticky nse
    set vars(targetend) [subst {[expr {$vars(sequence.length)}]}]
    pack $w.targetend -side top -fill both
    set vars(targetend.path) $w.targetend
    set vars(targetend.required)  0
    set vars(targetend.orig) $vars(targetend)
    set vars(targetend.expr) {[expr {$vars(sequence.length)}]}
    trace variable vars(sequence.length) w  "::EMBOSS::reset_value [namespace current] targetend"
    set vars(targetend._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    lappend arguments minprimertm
    iwidgets::entryfield $w.minprimertm \
	-validate real \
	-textvariable [namespace current]::vars(minprimertm) \
	-labeltext [subst {Minimum Primer Tm (deg Celsius)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minprimertm component entry] -sticky nse
    set vars(minprimertm) [subst 53]
    pack $w.minprimertm -side top -fill both
    set vars(minprimertm.path) $w.minprimertm
    set vars(minprimertm.required)  0
    set vars(minprimertm._type) float

    lappend arguments maxprimertm
    iwidgets::entryfield $w.maxprimertm \
	-validate real \
	-textvariable [namespace current]::vars(maxprimertm) \
	-labeltext [subst {Maximum Primer Tm (deg Celsius)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxprimertm component entry] -sticky nse
    set vars(maxprimertm) [subst 58]
    pack $w.maxprimertm -side top -fill both
    set vars(maxprimertm.path) $w.maxprimertm
    set vars(maxprimertm.required)  0
    set vars(maxprimertm._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Additional section}]]
    lappend wlist $w
    set w $page

    iwidgets::labeledframe $w.productsection \
	-labeltext [subst {Product options}]
    pack $w.productsection -side top -fill both
    lappend wlist $w
    append w .productsection.childsite

    lappend arguments minprodlen
    iwidgets::entryfield $w.minprodlen \
	-validate integer \
	-textvariable [namespace current]::vars(minprodlen) \
	-labeltext [subst {Minimum product length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minprodlen component entry] -sticky nse
    set vars(minprodlen) [subst 100]
    pack $w.minprodlen -side top -fill both
    set vars(minprodlen.path) $w.minprodlen
    set vars(minprodlen.required)  0
    set vars(minprodlen._type) integer

    lappend arguments maxprodlen
    iwidgets::entryfield $w.maxprodlen \
	-validate integer \
	-textvariable [namespace current]::vars(maxprodlen) \
	-labeltext [subst {Maximum product length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxprodlen component entry] -sticky nse
    set vars(maxprodlen) [subst 300]
    pack $w.maxprodlen -side top -fill both
    set vars(maxprodlen.path) $w.maxprodlen
    set vars(maxprodlen.required)  0
    set vars(maxprodlen._type) integer

    lappend arguments minprodgccont
    iwidgets::entryfield $w.minprodgccont \
	-validate real \
	-textvariable [namespace current]::vars(minprodgccont) \
	-labeltext [subst {Minimum product GC fraction}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minprodgccont component entry] -sticky nse
    set vars(minprodgccont) [subst .40]
    pack $w.minprodgccont -side top -fill both
    set vars(minprodgccont.minimum) [subst .30]
    set vars(minprodgccont.maximum) [subst .70]
    set vars(minprodgccont.path) $w.minprodgccont
    set vars(minprodgccont.required)  0
    set vars(minprodgccont._type) float

    lappend arguments maxprodgccont
    iwidgets::entryfield $w.maxprodgccont \
	-validate real \
	-textvariable [namespace current]::vars(maxprodgccont) \
	-labeltext [subst {Maximum product GC fraction}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxprodgccont component entry] -sticky nse
    set vars(maxprodgccont) [subst .55]
    pack $w.maxprodgccont -side top -fill both
    set vars(maxprodgccont.minimum) [subst .30]
    set vars(maxprodgccont.maximum) [subst .70]
    set vars(maxprodgccont.path) $w.maxprodgccont
    set vars(maxprodgccont.required)  0
    set vars(maxprodgccont._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments overlap
    iwidgets::entryfield $w.overlap \
	-validate integer \
	-textvariable [namespace current]::vars(overlap) \
	-labeltext [subst {Minimum overlap of sequences}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.overlap component entry] -sticky nse
    set vars(overlap) [subst 50]
    pack $w.overlap -side top -fill both
    set vars(overlap.path) $w.overlap
    set vars(overlap.required)  0
    set vars(overlap._type) integer

    iwidgets::labeledframe $w.primersection \
	-labeltext [subst {Primer options}]
    pack $w.primersection -side top -fill both
    lappend wlist $w
    append w .primersection.childsite

    lappend arguments minprimerlen
    iwidgets::entryfield $w.minprimerlen \
	-validate integer \
	-textvariable [namespace current]::vars(minprimerlen) \
	-labeltext [subst {Minimum primer length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minprimerlen component entry] -sticky nse
    set vars(minprimerlen) [subst 18]
    pack $w.minprimerlen -side top -fill both
    set vars(minprimerlen.path) $w.minprimerlen
    set vars(minprimerlen.required)  0
    set vars(minprimerlen._type) integer

    lappend arguments maxprimerlen
    iwidgets::entryfield $w.maxprimerlen \
	-validate integer \
	-textvariable [namespace current]::vars(maxprimerlen) \
	-labeltext [subst {Maximum primer length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxprimerlen component entry] -sticky nse
    set vars(maxprimerlen) [subst 22]
    pack $w.maxprimerlen -side top -fill both
    set vars(maxprimerlen.path) $w.maxprimerlen
    set vars(maxprimerlen.required)  0
    set vars(maxprimerlen._type) integer

    lappend arguments minpmgccont
    iwidgets::entryfield $w.minpmgccont \
	-validate real \
	-textvariable [namespace current]::vars(minpmgccont) \
	-labeltext [subst {Minimum primer GC fraction}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minpmgccont component entry] -sticky nse
    set vars(minpmgccont) [subst .40]
    pack $w.minpmgccont -side top -fill both
    set vars(minpmgccont.minimum) [subst .30]
    set vars(minpmgccont.maximum) [subst .70]
    set vars(minpmgccont.path) $w.minpmgccont
    set vars(minpmgccont.required)  0
    set vars(minpmgccont._type) float

    lappend arguments maxpmgccont
    iwidgets::entryfield $w.maxpmgccont \
	-validate real \
	-textvariable [namespace current]::vars(maxpmgccont) \
	-labeltext [subst {Maximum primer GC fraction}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxpmgccont component entry] -sticky nse
    set vars(maxpmgccont) [subst .55]
    pack $w.maxpmgccont -side top -fill both
    set vars(maxpmgccont.minimum) [subst .30]
    set vars(maxpmgccont.maximum) [subst .70]
    set vars(maxpmgccont.path) $w.maxpmgccont
    set vars(maxpmgccont.required)  0
    set vars(maxpmgccont._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    lappend arguments saltconc
    iwidgets::entryfield $w.saltconc \
	-validate real \
	-textvariable [namespace current]::vars(saltconc) \
	-labeltext [subst {Salt concentration (mM)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.saltconc component entry] -sticky nse
    set vars(saltconc) [subst 50]
    pack $w.saltconc -side top -fill both
    set vars(saltconc.minimum) [subst 1]
    set vars(saltconc.maximum) [subst 100]
    set vars(saltconc.path) $w.saltconc
    set vars(saltconc.required)  0
    set vars(saltconc._type) float

    lappend arguments dnaconc
    iwidgets::entryfield $w.dnaconc \
	-validate real \
	-textvariable [namespace current]::vars(dnaconc) \
	-labeltext [subst {DNA concentration (mM)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.dnaconc component entry] -sticky nse
    set vars(dnaconc) [subst 50]
    pack $w.dnaconc -side top -fill both
    set vars(dnaconc.minimum) [subst 1]
    set vars(dnaconc.maximum) [subst 100]
    set vars(dnaconc.path) $w.dnaconc
    set vars(dnaconc.required)  0
    set vars(dnaconc._type) float

    lappend arguments list
    checkbutton $w.list \
	-text [subst {Force list-style output}]\
	-variable [namespace current]::vars(list)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.list -side top -anchor w
    set vars(list) [subst N]
    set vars(list.path) $w.list
    set vars(list.required)  0
    set vars(list._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst prima0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/prima.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

