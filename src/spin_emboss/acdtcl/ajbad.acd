package require Iwidgets
namespace eval ::EMBOSS::ajbad {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_ajbad*Xentry.entry.width 30
option add *e_ajbad*Entryfield.width 30
option add *e_ajbad*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) ajbad
    set w [xtoplevel .e_ajbad -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - ajbad}
    label $w._title -text {Test file for ACD parsing}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(ajbad._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments typea
    iwidgets::entryfield $w.typea \
	-textvariable [namespace current]::vars(typea) \
	-labeltext [subst {Sequence type}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.typea component entry] -sticky nse
    set vars(typea) [subst {}]
    pack $w.typea -side top -fill both
    set vars(typea.path) $w.typea
    set vars(typea.required)  0
    set vars(typea._type) string

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst {[expr {$vars(typea)}]}]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  0
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence.type.orig) $vars(sequence.type)
    set vars(sequence.type.expr) {[expr {$vars(typea)}]}
    trace variable vars(typea) w  "::EMBOSS::reset_value [namespace current] sequence.type"
    set vars(sequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst {[expr {$vars(seqa.type)}]}]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  0
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence.type.orig) $vars(bsequence.type)
    set vars(bsequence.type.expr) {[expr {$vars(seqa.type)}]}
    trace variable vars(seqa.type) w  "::EMBOSS::reset_value [namespace current] bsequence.type"
    set vars(bsequence._type) sequence

    lappend arguments cod
    iwidgets::combobox $w.cod\
	-textvariable [namespace current]::vars(cod)\
	-labeltext [subst {Codon usage table}]
    eval $w.cod insert list end [list_codon_tables]
    grid [$w.cod component entry] -sticky nse
    $w.cod delete entry 0 end
    $w.cod insert entry end [subst Ehum.cut]
    $w.cod configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.cod -side top -fill both
    set vars(cod.path) $w.cod
    set vars(cod.required)  0
    set vars(cod._type) codon

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments typeb
    iwidgets::entryfield $w.typeb \
	-textvariable [namespace current]::vars(typeb) \
	-labeltext [subst {Second type}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.typeb component entry] -sticky nse
    set vars(typeb) [subst {[expr {$vars(seqa.type)}]}]
    pack $w.typeb -side top -fill both
    set vars(typeb.path) $w.typeb
    set vars(typeb.required)  0
    set vars(typeb.orig) $vars(typeb)
    set vars(typeb.expr) {[expr {$vars(seqa.type)}]}
    trace variable vars(seqa.type) w  "::EMBOSS::reset_value [namespace current] typeb"
    set vars(typeb._type) string

    lappend arguments date
    iwidgets::entryfield $w.date \
	-textvariable [namespace current]::vars(date) \
	-labeltext [subst {Index date}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.date component entry] -sticky nse
    set vars(date) [subst 00/00/00]
    pack $w.date -side top -fill both
    set vars(date.path) $w.date
    set vars(date.required)  0
    set vars(date._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments a
    iwidgets::entryfield $w.a \
	-validate integer \
	-textvariable [namespace current]::vars(a) \
	-labeltext [subst {First number}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.a component entry] -sticky nse
    set vars(a) [subst 0]
    pack $w.a -side top -fill both
    set vars(a.minimum) [subst 0]
    set vars(a.path) $w.a
    set vars(a.required)  0
    set vars(a._type) integer

    lappend arguments b
    iwidgets::entryfield $w.b \
	-validate integer \
	-textvariable [namespace current]::vars(b) \
	-labeltext [subst {Second number}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.b component entry] -sticky nse
    set vars(b) [subst 15]
    pack $w.b -side top -fill both
    set vars(b.path) $w.b
    set vars(b.required)  0
    set vars(b._type) integer

    lappend arguments c
    iwidgets::entryfield $w.c \
	-validate real \
	-textvariable [namespace current]::vars(c) \
	-labeltext [subst {Third number}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.c component entry] -sticky nse
    set vars(c) [subst 1.6]
    pack $w.c -side top -fill both
    set vars(c.minimum) [subst -5]
    set vars(c.maximum) [subst 6.6666]
    set vars(c.path) $w.c
    set vars(c.required)  0
    set vars(c._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst ajbad0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/ajbad.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

