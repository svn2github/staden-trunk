package require Iwidgets
namespace eval ::EMBOSS::complex {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_complex*Xentry.entry.width 30
option add *e_complex*Entryfield.width 30
option add *e_complex*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) complex
    set w [xtoplevel .e_complex -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - complex}
    label $w._title -text {Find the linguistic complexity in nucleotide sequences}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(complex._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst dna]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    lappend arguments lwin
    iwidgets::entryfield $w.lwin \
	-validate integer \
	-textvariable [namespace current]::vars(lwin) \
	-labeltext [subst {Window length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.lwin component entry] -sticky nse
    set vars(lwin) [subst 100]
    pack $w.lwin -side top -fill both
    set vars(lwin.maximum) [subst {[expr {$vars(sequence.length)}]}]
    set vars(lwin.maximum.orig) $vars(lwin.maximum)
    set vars(lwin.maximum.expr) {[expr {$vars(sequence.length)}]}
    trace variable vars(sequence.length) w  "::EMBOSS::reset_value [namespace current] lwin.maximum"
    set vars(lwin.path) $w.lwin
    set vars(lwin.required)  0
    set vars(lwin._type) integer

    lappend arguments step
    iwidgets::entryfield $w.step \
	-validate integer \
	-textvariable [namespace current]::vars(step) \
	-labeltext [subst {Step size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.step component entry] -sticky nse
    set vars(step) [subst 5]
    pack $w.step -side top -fill both
    set vars(step.maximum) [subst {[expr {$vars(lwin)}]}]
    set vars(step.maximum.orig) $vars(step.maximum)
    set vars(step.maximum.expr) {[expr {$vars(lwin)}]}
    trace variable vars(lwin) w  "::EMBOSS::reset_value [namespace current] step.maximum"
    set vars(step.path) $w.step
    set vars(step.required)  0
    set vars(step._type) integer

    lappend arguments jmin
    iwidgets::entryfield $w.jmin \
	-validate integer \
	-textvariable [namespace current]::vars(jmin) \
	-labeltext [subst {Minimum word length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.jmin component entry] -sticky nse
    set vars(jmin) [subst 4]
    pack $w.jmin -side top -fill both
    set vars(jmin.minimum) [subst 2]
    set vars(jmin.maximum) [subst 20]
    set vars(jmin.path) $w.jmin
    set vars(jmin.required)  0
    set vars(jmin._type) integer

    lappend arguments jmax
    iwidgets::entryfield $w.jmax \
	-validate integer \
	-textvariable [namespace current]::vars(jmax) \
	-labeltext [subst {Maximum word length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.jmax component entry] -sticky nse
    set vars(jmax) [subst 6]
    pack $w.jmax -side top -fill both
    set vars(jmax.minimum) [subst 2]
    set vars(jmax.maximum) [subst 50]
    set vars(jmax.path) $w.jmax
    set vars(jmax.required)  0
    set vars(jmax._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments omnia
    checkbutton $w.omnia \
	-text [subst {All sequences}]\
	-variable [namespace current]::vars(omnia)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.omnia -side top -anchor w
    set vars(omnia) [subst N]
    set vars(omnia.path) $w.omnia
    set vars(omnia.required)  0
    set vars(omnia._type) toggle

    lappend arguments sim
    iwidgets::entryfield $w.sim \
	-validate integer \
	-textvariable [namespace current]::vars(sim) \
	-labeltext [subst Simulations]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sim component entry] -sticky nse
    set vars(sim) [subst 0]
    pack $w.sim -side top -fill both
    set vars(sim.path) $w.sim
    set vars(sim.required)  0
    set vars(sim._type) integer

    lappend arguments freq
    checkbutton $w.freq \
	-text [subst {Calculate frequency}]\
	-variable [namespace current]::vars(freq)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.freq -side top -anchor w
    set vars(freq) [subst N]
    set vars(freq.path) $w.freq
    set vars(freq.required)  0
    set vars(freq._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments print
    checkbutton $w.print \
	-text [subst {Print to file}]\
	-variable [namespace current]::vars(print)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.print -side top -anchor w
    set vars(print) [subst N]
    set vars(print.path) $w.print
    set vars(print.required)  0
    set vars(print._type) boolean

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst complex0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments ujtablefile
    xentry $w.ujtablefile \
	-label [subst {UjTable temporary file name}]\
	-textvariable [namespace current]::vars(ujtablefile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.ujtablefile delete 0 end
    $w.ujtablefile insert end [subst complex.ujtable]
    pack $w.ujtablefile -side top -fill both
    set vars(ujtablefile.path) $w.ujtablefile
    set vars(ujtablefile.required)  0
    set vars(ujtablefile._type) outfile

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst Filename]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence1.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  0
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqoutall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/complex.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

