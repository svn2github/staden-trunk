package require Iwidgets
namespace eval ::EMBOSS::sigplot {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_sigplot*Xentry.entry.width 30
option add *e_sigplot*Entryfield.width 30
option add *e_sigplot*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) sigplot
    set w [xtoplevel .e_sigplot -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - sigplot}
    label $w._title -text {Generates data files of signature performance}
    pack $w._title -side top -fill both
    set vars(sigplot._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments hitsin
    xentry $w.hitsin \
	-label [subst {Name of signature hits file for input}]\
	-textvariable [namespace current]::vars(hitsin) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.hitsin delete 0 end
    $w.hitsin insert end [subst test.sighits.in]
    pack $w.hitsin -side top -fill both
    set vars(hitsin.path) $w.hitsin
    set vars(hitsin.required)  1
    set vars(hitsin._type) infile

    lappend arguments validatin
    xentry $w.validatin \
	-label [subst {Name of seqsort validation file for input}]\
	-textvariable [namespace current]::vars(validatin) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.validatin delete 0 end
    $w.validatin insert end [subst test.valid.in]
    pack $w.validatin -side top -fill both
    set vars(validatin.path) $w.validatin
    set vars(validatin.required)  1
    set vars(validatin._type) infile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments splithit
    checkbutton $w.splithit \
	-text [subst {Graph 'true' hits as proportion of redundant and non-redundant hits}]\
	-variable [namespace current]::vars(splithit)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.splithit -side top -anchor w
    set vars(splithit) [subst 1]
    set vars(splithit.path) $w.splithit
    set vars(splithit.required)  1
    set vars(splithit._type) bool

    lappend arguments seedid
    checkbutton $w.seedid \
	-text [subst {Generate matrix of %id between seed proteins and hits}]\
	-variable [namespace current]::vars(seedid)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.seedid -side top -anchor w
    set vars(seedid) [subst 1]
    set vars(seedid.path) $w.seedid
    set vars(seedid.required)  1
    set vars(seedid._type) bool

    lappend arguments alignfile
    xentry $w.alignfile \
	-label [subst {Name of seed alignment file for input}]\
	-textvariable [namespace current]::vars(alignfile) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    $w.alignfile delete 0 end
    $w.alignfile insert end [subst test.salign.in]
    pack $w.alignfile -side top -fill both
    set vars(alignfile.path) $w.alignfile
    set vars(alignfile.required)  0
    set vars(alignfile._type) infile
    set vars(alignfile.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] alignfile"

    lappend arguments sigalignfile
    xentry $w.sigalignfile \
	-label [subst {Name of sigscan alignment file for input}]\
	-textvariable [namespace current]::vars(sigalignfile) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    $w.sigalignfile delete 0 end
    $w.sigalignfile insert end [subst test.sigalign.in]
    pack $w.sigalignfile -side top -fill both
    set vars(sigalignfile.path) $w.sigalignfile
    set vars(sigalignfile.required)  0
    set vars(sigalignfile._type) infile
    set vars(sigalignfile.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] sigalignfile"

    lappend arguments submat
    set vars(submat.protein) [subst 1]
    iwidgets::combobox $w.submat\
	-textvariable [namespace current]::vars(submat)\
	-labeltext [subst {Substitution matrix to be used}]
    eval $w.submat insert list end [list_matrices p]
    grid [$w.submat component entry] -sticky nse
    $w.submat delete entry 0 end
    $w.submat insert entry end [subst EBLOSUM62]
    $w.submat configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    pack $w.submat -side top -fill both
    set vars(submat.path) $w.submat
    set vars(submat.required)  0
    set vars(submat._type) matrixf
    set vars(submat.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] submat"

    lappend arguments gapopen
    iwidgets::entryfield $w.gapopen \
	-validate real \
	-textvariable [namespace current]::vars(gapopen) \
	-labeltext [subst {Gap insertion penalty}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    grid [$w.gapopen component entry] -sticky nse
    set vars(gapopen) [subst 10]
    pack $w.gapopen -side top -fill both
    set vars(gapopen.minimum) [subst 1.]
    set vars(gapopen.maximum) [subst 100.]
    set vars(gapopen.path) $w.gapopen
    set vars(gapopen.required)  0
    set vars(gapopen._type) float
    set vars(gapopen.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] gapopen"

    lappend arguments gapextn
    iwidgets::entryfield $w.gapextn \
	-validate real \
	-textvariable [namespace current]::vars(gapextn) \
	-labeltext [subst {Gap extension penalty}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    grid [$w.gapextn component entry] -sticky nse
    set vars(gapextn) [subst 0.5]
    pack $w.gapextn -side top -fill both
    set vars(gapextn.minimum) [subst 0.0]
    set vars(gapextn.maximum) [subst 10.]
    set vars(gapextn.path) $w.gapextn
    set vars(gapextn.required)  0
    set vars(gapextn._type) float
    set vars(gapextn.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] gapextn"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments datafile
    xentry $w.datafile \
	-label [subst {Name of GNUPLOT class data file for output}]\
	-textvariable [namespace current]::vars(datafile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.datafile delete 0 end
    $w.datafile insert end [subst test.dat]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  1
    set vars(datafile._type) outfile

    lappend arguments ssdatafile
    xentry $w.ssdatafile \
	-label [subst {Name of GNUPLOT specificty/sensitivity data file for output}]\
	-textvariable [namespace current]::vars(ssdatafile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.ssdatafile delete 0 end
    $w.ssdatafile insert end [subst sensi_speci.dat]
    pack $w.ssdatafile -side top -fill both
    set vars(ssdatafile.path) $w.ssdatafile
    set vars(ssdatafile.required)  1
    set vars(ssdatafile._type) outfile

    lappend arguments matrixout
    xentry $w.matrixout \
	-label [subst {Name of output file for %id matrix}]\
	-textvariable [namespace current]::vars(matrixout) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(seedid)}]}]]]
    $w.matrixout delete 0 end
    $w.matrixout insert end [subst testid.mat]
    pack $w.matrixout -side top -fill both
    set vars(matrixout.path) $w.matrixout
    set vars(matrixout.required)  0
    set vars(matrixout._type) outfile
    set vars(matrixout.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(seedid)}]]}
    trace variable vars(seedid) w  "::EMBOSS::reset_needed [namespace current] matrixout"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/sigplot.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

