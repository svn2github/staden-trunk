package require Iwidgets
namespace eval ::EMBOSS::diffseq {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_diffseq*Xentry.entry.width 30
option add *e_diffseq*Entryfield.width 30
option add *e_diffseq*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) diffseq
    set w [xtoplevel .e_diffseq -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - diffseq}
    label $w._title -text {Find differences (SNPs) between nearly identical sequences}
    pack $w._title -side top -fill both
    set vars(diffseq._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments asequence
    set vars(asequence)       [get_active_seq_id 0]
    if {$vars(asequence) == -1} {set vars(asequence) [get_active_seq_id 0]}
    set vars(asequence.name)  [seq_info $vars(asequence) name]
    sequence_changed [namespace current] asequence
    set vars(asequence.type) [subst any]
    seq_id $w.asequence \
	-textvariable [namespace current]::vars(asequence.name)\
	-start_value $vars(asequence.begin)\
	-end_value $vars(asequence.end)\
	-to [seq_info $vars(asequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] asequence $w.asequence}"
    set vars(asequence) [subst {}]
    pack $w.asequence -side top -fill both
    set vars(asequence.path) $w.asequence
    set vars(asequence.required)  1
    trace variable vars(asequence.name) w  "::EMBOSS::sequence_changed [namespace current] asequence"
    set vars(asequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst {[expr {($vars(asequence.protein) ? "stopprotein" : "nucleotide")}]}]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  1
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence.type.orig) $vars(bsequence.type)
    set vars(bsequence.type.expr) {[expr {($vars(asequence.protein) ? "stopprotein" : "nucleotide")}]}
    trace variable vars(asequence.protein) w  "::EMBOSS::reset_value [namespace current] bsequence.type"
    set vars(bsequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments wordsize
    iwidgets::entryfield $w.wordsize \
	-validate integer \
	-textvariable [namespace current]::vars(wordsize) \
	-labeltext [subst {Word size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.wordsize component entry] -sticky nse
    set vars(wordsize) [subst 10]
    pack $w.wordsize -side top -fill both
    set vars(wordsize.minimum) [subst 2]
    set vars(wordsize.path) $w.wordsize
    set vars(wordsize.required)  1
    set vars(wordsize._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output report file}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    lappend arguments afeatout
    xentry $w.afeatout \
	-label [subst {Feature file for output asequence}]\
	-textvariable [namespace current]::vars(afeatout) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.afeatout delete 0 end
    $w.afeatout insert end [subst {[expr {$vars(asequence.name)}].diffgff}]
    pack $w.afeatout -side top -fill both
    set vars(afeatout.path) $w.afeatout
    set vars(afeatout.required)  0
    set vars(afeatout.orig) $vars(afeatout)
    set vars(afeatout.expr) {[expr {$vars(asequence.name)}].diffgff}
    trace variable vars(asequence.name) w  "::EMBOSS::reset_value [namespace current] afeatout"
    set vars(afeatout._type) featout

    lappend arguments bfeatout
    xentry $w.bfeatout \
	-label [subst {Feature file for output bsequence}]\
	-textvariable [namespace current]::vars(bfeatout) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.bfeatout delete 0 end
    $w.bfeatout insert end [subst {[expr {$vars(bsequence.name)}].diffgff}]
    pack $w.bfeatout -side top -fill both
    set vars(bfeatout.path) $w.bfeatout
    set vars(bfeatout.required)  0
    set vars(bfeatout.orig) $vars(bfeatout)
    set vars(bfeatout.expr) {[expr {$vars(bsequence.name)}].diffgff}
    trace variable vars(bsequence.name) w  "::EMBOSS::reset_value [namespace current] bfeatout"
    set vars(bfeatout._type) featout

    lappend arguments columns
    checkbutton $w.columns \
	-text [subst {Output in columns format}]\
	-variable [namespace current]::vars(columns)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.columns -side top -anchor w
    set vars(columns) [subst 0]
    set vars(columns.path) $w.columns
    set vars(columns.required)  0
    set vars(columns._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/diffseq.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

