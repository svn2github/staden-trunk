package require Iwidgets
namespace eval ::EMBOSS::sirna {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_sirna*Xentry.entry.width 30
option add *e_sirna*Entryfield.width 30
option add *e_sirna*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) sirna
    set w [xtoplevel .e_sirna -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - sirna}
    label $w._title -text {Finds siRNA duplexes in mRNA}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(sirna._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    iwidgets::labeledframe $w.seqinsection \
	-labeltext [subst {Sequence input options}]
    pack $w.seqinsection -side top -fill both
    lappend wlist $w
    append w .seqinsection.childsite

    lappend arguments poliii
    checkbutton $w.poliii \
	-text [subst {Select probes for Pol III expression vectors}]\
	-variable [namespace current]::vars(poliii)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.poliii -side top -anchor w
    set vars(poliii) [subst N]
    set vars(poliii.path) $w.poliii
    set vars(poliii.required)  0
    set vars(poliii._type) boolean

    lappend arguments aa
    checkbutton $w.aa \
	-text [subst {Select only regions that start with AA}]\
	-variable [namespace current]::vars(aa)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.aa -side top -anchor w
    set vars(aa) [subst N]
    set vars(aa.path) $w.aa
    set vars(aa.required)  0
    set vars(aa._type) boolean

    lappend arguments tt
    checkbutton $w.tt \
	-text [subst {Select only regions that end with TT}]\
	-variable [namespace current]::vars(tt)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.tt -side top -anchor w
    set vars(tt) [subst N]
    set vars(tt.path) $w.tt
    set vars(tt.required)  0
    set vars(tt._type) boolean

    lappend arguments polybase
    checkbutton $w.polybase \
	-text [subst {Allow regions with 4 repeats of a base}]\
	-variable [namespace current]::vars(polybase)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.polybase -side top -anchor w
    set vars(polybase) [subst Y]
    set vars(polybase.path) $w.polybase
    set vars(polybase.required)  0
    set vars(polybase._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst Filename]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence1.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqoutall

    lappend arguments context
    checkbutton $w.context \
	-text [subst {Show the two bases before the output 21 base probe}]\
	-variable [namespace current]::vars(context)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.context -side top -anchor w
    set vars(context) [subst N]
    set vars(context.path) $w.context
    set vars(context.required)  0
    set vars(context._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/sirna.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

