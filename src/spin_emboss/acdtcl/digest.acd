package require Iwidgets
namespace eval ::EMBOSS::digest {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_digest*Xentry.entry.width 30
option add *e_digest*Entryfield.width 30
option add *e_digest*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) digest
    set w [xtoplevel .e_digest -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - digest}
    label $w._title -text {Protein proteolytic enzyme or reagent cleavage digest}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(digest._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst Protein]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    lappend arguments aadata
    xentry $w.aadata \
	-label [subst {Amino acid data file}]\
	-textvariable [namespace current]::vars(aadata) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.aadata delete 0 end
    $w.aadata insert end [subst Eamino.dat]
    pack $w.aadata -side top -fill both
    set vars(aadata.path) $w.aadata
    set vars(aadata.required)  0
    set vars(aadata._type) datafile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments menu
    iwidgets::combobox $w.menu\
	-textvariable [namespace current]::vars(menu.name)\
	-labeltext [subst {Select number}]
    trace variable vars(menu.name) w  "::EMBOSS::list_changed [namespace current] menu"
    eval $w.menu insert list end Trypsin Lys-C Arg-C Asp-N V8-bicarb V8-phosph Chymotrypsin CNBr
    set vars(menu.mapping1) {Lys-C 2 CNBr 8 Chymotrypsin 7 V8-phosph 6 Trypsin 1 V8-bicarb 5 Arg-C 3 Asp-N 4}
    set vars(menu.mapping2) {8 CNBr 4 Asp-N 5 V8-bicarb 1 Trypsin 6 V8-phosph 2 Lys-C 7 Chymotrypsin 3 Arg-C}
    grid [$w.menu component entry] -sticky nse
    $w.menu delete entry 0 end
    array set tmpmap $vars(menu.mapping2)
    set def [subst 1]
    catch {set def $tmpmap($def)}
    set vars(menu) $def
    $w.menu insert entry end $def
    $w.menu configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.menu -side top -fill both
    set vars(menu.path) $w.menu
    set vars(menu.required)  0
    set vars(menu.delimiter) ,
    set vars(menu._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments unfavoured
    checkbutton $w.unfavoured \
	-text [subst {Allow unfavoured cuts}]\
	-variable [namespace current]::vars(unfavoured)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.unfavoured -side top -anchor w
    set vars(unfavoured) [subst 0]
    set vars(unfavoured.path) $w.unfavoured
    set vars(unfavoured.required)  0
    set vars(unfavoured._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments overlap
    checkbutton $w.overlap \
	-text [subst {Show overlapping partials}]\
	-variable [namespace current]::vars(overlap)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.overlap -side top -anchor w
    set vars(overlap) [subst 0]
    set vars(overlap.path) $w.overlap
    set vars(overlap.required)  0
    set vars(overlap._type) boolean

    lappend arguments allpartials
    checkbutton $w.allpartials \
	-text [subst {Show all partials}]\
	-variable [namespace current]::vars(allpartials)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.allpartials -side top -anchor w
    set vars(allpartials) [subst 0]
    set vars(allpartials.path) $w.allpartials
    set vars(allpartials.required)  0
    set vars(allpartials._type) boolean

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/digest.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

