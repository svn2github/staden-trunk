package require Iwidgets
namespace eval ::EMBOSS::tranalign {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_tranalign*Xentry.entry.width 30
option add *e_tranalign*Entryfield.width 30
option add *e_tranalign*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) tranalign
    set w [xtoplevel .e_tranalign -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - tranalign}
    label $w._title -text {Align nucleic coding regions given the aligned proteins}
    pack $w._title -side top -fill both
    set vars(tranalign._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments nsequence
    set vars(nsequence)       [get_active_seq_id 0]
    if {$vars(nsequence) == -1} {set vars(nsequence) [get_active_seq_id 0]}
    set vars(nsequence.name)  [seq_info $vars(nsequence) name]
    sequence_changed [namespace current] nsequence
    set vars(nsequence.type) [subst nucleotide]
    seq_id $w.nsequence \
	-textvariable [namespace current]::vars(nsequence.name)\
	-start_value $vars(nsequence.begin)\
	-end_value $vars(nsequence.end)\
	-to [seq_info $vars(nsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] nsequence $w.nsequence}"
    set vars(nsequence) [subst {}]
    pack $w.nsequence -side top -fill both
    set vars(nsequence.path) $w.nsequence
    set vars(nsequence.required)  1
    trace variable vars(nsequence.name) w  "::EMBOSS::sequence_changed [namespace current] nsequence"
    set vars(nsequence._type) seqall

    lappend arguments psequence
    set vars(psequence)       [get_active_seq_id 1]
    if {$vars(psequence) == -1} {set vars(psequence) [get_active_seq_id 0]}
    set vars(psequence.name)  [seq_info $vars(psequence) name]
    sequence_changed [namespace current] psequence
    set vars(psequence.type) [subst gapprotein]
    seq_id $w.psequence \
	-textvariable [namespace current]::vars(psequence.name)\
	-start_value $vars(psequence.begin)\
	-end_value $vars(psequence.end)\
	-to [seq_info $vars(psequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] psequence $w.psequence}"
    set vars(psequence) [subst {}]
    pack $w.psequence -side top -fill both
    set vars(psequence.path) $w.psequence
    set vars(psequence.required)  1
    trace variable vars(psequence.name) w  "::EMBOSS::sequence_changed [namespace current] psequence"
   set vars(psequence.totweight) [subst 0]
    set vars(psequence._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments table
    iwidgets::combobox $w.table\
	-textvariable [namespace current]::vars(table.name)\
	-labeltext [subst {Code to use}]
    trace variable vars(table.name) w  "::EMBOSS::list_changed [namespace current] table"
    eval $w.table insert list end Standard {{Standard (with alternative initiation codons)}} {{Vertebrate Mitochondrial}} {{Yeast Mitochondrial}} {{Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma}} {{Invertebrate Mitochondrial}} {{Ciliate Macronuclear and Dasycladacean}} {{Echinoderm Mitochondrial}} {{Euplotid Nuclear}} Bacterial {{Alternative Yeast Nuclear}} {{Ascidian Mitochondrial}} {{Flatworm Mitochondrial}} {{Blepharisma Macronuclear}} {{Chlorophycean Mitochondrial}} {{Trematode Mitochondrial}} {{Scenedesmus obliquus}} {{Thraustochytrium Mitochondrial}}
    set vars(table.mapping1) {{Invertebrate Mitochondrial} 5 {Flatworm Mitochondrial} 14 Standard 0 {Vertebrate Mitochondrial} 2 {Trematode Mitochondrial} 21 {Standard (with alternative initiation codons)} 1 {Thraustochytrium Mitochondrial} 23 {Chlorophycean Mitochondrial} 16 {Blepharisma Macronuclear} 15 {Ciliate Macronuclear and Dasycladacean} 6 Bacterial 11 {Alternative Yeast Nuclear} 12 {Euplotid Nuclear} 10 {Ascidian Mitochondrial} 13 {Scenedesmus obliquus} 22 {Yeast Mitochondrial} 3 {Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma} 4 {Echinoderm Mitochondrial} 9}
    set vars(table.mapping2) {0 Standard 1 {Standard (with alternative initiation codons)} 2 {Vertebrate Mitochondrial} 21 {Trematode Mitochondrial} 3 {Yeast Mitochondrial} 22 {Scenedesmus obliquus} 4 {Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma} 23 {Thraustochytrium Mitochondrial} 5 {Invertebrate Mitochondrial} 6 {Ciliate Macronuclear and Dasycladacean} 9 {Echinoderm Mitochondrial} 10 {Euplotid Nuclear} 11 Bacterial 12 {Alternative Yeast Nuclear} 13 {Ascidian Mitochondrial} 14 {Flatworm Mitochondrial} 15 {Blepharisma Macronuclear} 16 {Chlorophycean Mitochondrial}}
    grid [$w.table component entry] -sticky nse
    $w.table delete entry 0 end
    array set tmpmap $vars(table.mapping2)
    set def [subst 0]
    catch {set def $tmpmap($def)}
    set vars(table) $def
    $w.table insert entry end $def
    $w.table configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.table -side top -fill both
    set vars(table.path) $w.table
    set vars(table.required)  0
    set vars(table.delimiter) {;}
    set vars(table._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst Filename]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqoutset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/tranalign.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

