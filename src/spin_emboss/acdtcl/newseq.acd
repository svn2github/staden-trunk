package require Iwidgets
namespace eval ::EMBOSS::newseq {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_newseq*Xentry.entry.width 30
option add *e_newseq*Entryfield.width 30
option add *e_newseq*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) newseq
    set w [xtoplevel .e_newseq -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - newseq}
    label $w._title -text {Type in a short new sequence.}
    pack $w._title -side top -fill both
    set vars(newseq._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {output Section}]]
    $w.book_1 view [subst {output Section}]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst {Sequence output filename}]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqout

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments name
    iwidgets::entryfield $w.name \
	-textvariable [namespace current]::vars(name) \
	-labeltext [subst {Name of the sequence}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.name component entry] -sticky nse
    set vars(name) [subst {}]
    pack $w.name -side top -fill both
    set vars(name.path) $w.name
    set vars(name.required)  1
    set vars(name._type) string

    lappend arguments description
    iwidgets::entryfield $w.description \
	-textvariable [namespace current]::vars(description) \
	-labeltext [subst {Description of the sequence}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.description component entry] -sticky nse
    set vars(description) [subst {}]
    pack $w.description -side top -fill both
    set vars(description.path) $w.description
    set vars(description.required)  1
    set vars(description._type) string

    lappend arguments type
    iwidgets::combobox $w.type\
	-textvariable [namespace current]::vars(type.name)\
	-labeltext [subst {Type of sequence}]
    trace variable vars(type.name) w  "::EMBOSS::list_changed [namespace current] type"
    eval $w.type insert list end Nucleic Protein
    set vars(type.mapping1) {Protein P Nucleic N}
    set vars(type.mapping2) {P Protein N Nucleic}
    grid [$w.type component entry] -sticky nse
    $w.type delete entry 0 end
    array set tmpmap $vars(type.mapping2)
    set def [subst N]
    catch {set def $tmpmap($def)}
    set vars(type) $def
    $w.type insert entry end $def
    $w.type configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.type -side top -fill both
    set vars(type.path) $w.type
    set vars(type.required)  1
    set vars(type.delimiter) ,
    set vars(type._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {input Section}]]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    iwidgets::entryfield $w.sequence \
	-textvariable [namespace current]::vars(sequence) \
	-labeltext [subst {Enter the sequence}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sequence component entry] -sticky nse
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    set vars(sequence._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/newseq.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

