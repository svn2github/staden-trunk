package require Iwidgets
namespace eval ::EMBOSS::seqnr {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_seqnr*Xentry.entry.width 30
option add *e_seqnr*Entryfield.width 30
option add *e_seqnr*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) seqnr
    set w [xtoplevel .e_seqnr -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - seqnr}
    label $w._title -text {Removes redundant hits from a scop families file.}
    pack $w._title -side top -fill both
    set vars(seqnr._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments inf
    xentry $w.inf \
	-label [subst {Name of the scop hits file (input)}]\
	-textvariable [namespace current]::vars(inf) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.inf delete 0 end
    $w.inf insert end [subst test.hits.in]
    pack $w.inf -side top -fill both
    set vars(inf.path) $w.inf
    set vars(inf.required)  1
    set vars(inf._type) infile

    lappend arguments vinf
    xentry $w.vinf \
	-label [subst {Name of validation file (input)}]\
	-textvariable [namespace current]::vars(vinf) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.vinf delete 0 end
    $w.vinf insert end [subst test.valid.in]
    pack $w.vinf -side top -fill both
    set vars(vinf.path) $w.vinf
    set vars(vinf.required)  1
    set vars(vinf._type) infile

    lappend arguments scopin
    xentry $w.scopin \
	-label [subst {Name of scop classification file (embl format input)}]\
	-textvariable [namespace current]::vars(scopin) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.scopin delete 0 end
    $w.scopin insert end [subst Escop.dat]
    pack $w.scopin -side top -fill both
    set vars(scopin.path) $w.scopin
    set vars(scopin.required)  1
    set vars(scopin._type) infile

    lappend arguments alignpath
    iwidgets::entryfield $w.alignpath \
	-textvariable [namespace current]::vars(alignpath) \
	-labeltext [subst {Location of scop alignment files (input)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.alignpath component entry] -sticky nse
    set vars(alignpath) [subst ./]
    pack $w.alignpath -side top -fill both
    set vars(alignpath.path) $w.alignpath
    set vars(alignpath.required)  1
    set vars(alignpath._type) string

    lappend arguments alignextn
    iwidgets::entryfield $w.alignextn \
	-textvariable [namespace current]::vars(alignextn) \
	-labeltext [subst {Extension of scop alignment files}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.alignextn component entry] -sticky nse
    set vars(alignextn) [subst .salign]
    pack $w.alignextn -side top -fill both
    set vars(alignextn.path) $w.alignextn
    set vars(alignextn.required)  1
    set vars(alignextn._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments datafile
    set vars(datafile.protein) [subst 1]
    iwidgets::combobox $w.datafile\
	-textvariable [namespace current]::vars(datafile)\
	-labeltext [subst {Residue substitution matrix}]
    eval $w.datafile insert list end [list_matrices p]
    grid [$w.datafile component entry] -sticky nse
    $w.datafile delete entry 0 end
    $w.datafile insert entry end [subst EBLOSUM62]
    $w.datafile configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  1
    set vars(datafile._type) matrixf

    lappend arguments thresh
    iwidgets::entryfield $w.thresh \
	-validate real \
	-textvariable [namespace current]::vars(thresh) \
	-labeltext [subst {The % sequence identity redundancy threshold}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.thresh component entry] -sticky nse
    set vars(thresh) [subst 95.0]
    pack $w.thresh -side top -fill both
    set vars(thresh.path) $w.thresh
    set vars(thresh.required)  1
    set vars(thresh._type) float

    lappend arguments mode
    iwidgets::scrolledlistbox $w.mode \
	-exportselection 0\
	-labeltext [subst {Mode of operation}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] mode"\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.mode -side top -fill both -expand 1
    set vars(mode.mapping1) {{Validation file for signatures from extended alignments} 2 {Validation file for signatures from structure-based sequence alignemnts} 1}
    set vars(mode.mapping2) {1 {Validation file for signatures from structure-based sequence alignemnts} 2 {Validation file for signatures from extended alignments}}
    eval $w.mode insert end {{Validation file for signatures from structure-based sequence alignemnts}} {{Validation file for signatures from extended alignments}}
    set vars(mode.path) $w.mode
    set vars(mode.required)  1
    set vars(mode.delimiter) ,
    trace variable vars(mode) w  "::EMBOSS::list_multi_changed [namespace current] mode"
    set vars(mode) [subst 1]
    set vars(mode._type) list_multi

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments gapopen
    iwidgets::entryfield $w.gapopen \
	-validate real \
	-textvariable [namespace current]::vars(gapopen) \
	-labeltext [subst {Gap insertion penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapopen component entry] -sticky nse
    set vars(gapopen) [subst 10]
    pack $w.gapopen -side top -fill both
    set vars(gapopen.minimum) [subst 1.]
    set vars(gapopen.maximum) [subst 100.]
    set vars(gapopen.path) $w.gapopen
    set vars(gapopen.required)  0
    set vars(gapopen._type) float

    lappend arguments gapextend
    iwidgets::entryfield $w.gapextend \
	-validate real \
	-textvariable [namespace current]::vars(gapextend) \
	-labeltext [subst {Gap extension penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapextend component entry] -sticky nse
    set vars(gapextend) [subst 0.5]
    pack $w.gapextend -side top -fill both
    set vars(gapextend.minimum) [subst 0.0]
    set vars(gapextend.maximum) [subst 10.]
    set vars(gapextend.path) $w.gapextend
    set vars(gapextend.required)  0
    set vars(gapextend._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outf
    xentry $w.outf \
	-label [subst {Name non-redundant scop hits file (output)}]\
	-textvariable [namespace current]::vars(outf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outf delete 0 end
    $w.outf insert end [subst test.hits.out]
    pack $w.outf -side top -fill both
    set vars(outf.path) $w.outf
    set vars(outf.required)  1
    set vars(outf._type) outfile

    lappend arguments voutfname
    iwidgets::entryfield $w.voutfname \
	-textvariable [namespace current]::vars(voutfname) \
	-labeltext [subst {Name of processed validation file (output)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.voutfname component entry] -sticky nse
    set vars(voutfname) [subst test.valid.out]
    pack $w.voutfname -side top -fill both
    set vars(voutfname.path) $w.voutfname
    set vars(voutfname.required)  1
    set vars(voutfname._type) string

    lappend arguments logf
    xentry $w.logf \
	-label [subst {Name seqnr log file (output)}]\
	-textvariable [namespace current]::vars(logf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.logf delete 0 end
    $w.logf insert end [subst seqnr.log]
    pack $w.logf -side top -fill both
    set vars(logf.path) $w.logf
    set vars(logf.required)  1
    set vars(logf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/seqnr.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

