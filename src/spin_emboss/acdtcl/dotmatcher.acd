package require Iwidgets
namespace eval ::EMBOSS::dotmatcher {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_dotmatcher*Xentry.entry.width 30
option add *e_dotmatcher*Entryfield.width 30
option add *e_dotmatcher*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) dotmatcher
    set w [xtoplevel .e_dotmatcher -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - dotmatcher}
    label $w._title -text {Displays a thresholded dotplot of two sequences}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(dotmatcher._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments asequence
    set vars(asequence)       [get_active_seq_id 0]
    if {$vars(asequence) == -1} {set vars(asequence) [get_active_seq_id 0]}
    set vars(asequence.name)  [seq_info $vars(asequence) name]
    sequence_changed [namespace current] asequence
    set vars(asequence.type) [subst any]
    seq_id $w.asequence \
	-textvariable [namespace current]::vars(asequence.name)\
	-start_value $vars(asequence.begin)\
	-end_value $vars(asequence.end)\
	-to [seq_info $vars(asequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] asequence $w.asequence}"
    set vars(asequence) [subst {}]
    pack $w.asequence -side top -fill both
    set vars(asequence.path) $w.asequence
    set vars(asequence.required)  0
    trace variable vars(asequence.name) w  "::EMBOSS::sequence_changed [namespace current] asequence"
    set vars(asequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  0
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence.type.orig) $vars(bsequence.type)
    set vars(bsequence.type.expr) {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}
    trace variable vars(acdprotein) w  "::EMBOSS::reset_value [namespace current] bsequence.type"
    set vars(bsequence._type) sequence

    lappend arguments matrixfile
    set vars(matrixfile.protein) [subst {[expr {$vars(acdprotein)}]}]
    iwidgets::combobox $w.matrixfile\
	-textvariable [namespace current]::vars(matrixfile)\
	-labeltext [subst {Matrix file}]
    eval $w.matrixfile insert list end [list_matrices p]
    grid [$w.matrixfile component entry] -sticky nse
    $w.matrixfile delete entry 0 end
    $w.matrixfile insert entry end [subst {[expr {$vars(matrixfile.protein)?"EBLOSUM62":"EDNAMAT"}]}]
    $w.matrixfile configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.matrixfile -side top -fill both
    set vars(matrixfile.path) $w.matrixfile
    set vars(matrixfile.required)  0
    set vars(matrixfile.protein.orig) $vars(matrixfile.protein)
    set vars(matrixfile.protein.expr) {[expr {$vars(acdprotein)}]}
    trace variable vars(acdprotein) w  "::EMBOSS::reset_value [namespace current] matrixfile.protein"
    set vars(matrixfile.orig) $vars(matrixfile)
    set vars(matrixfile.expr) {[expr {$vars(matrixfile.protein)?"EBLOSUM62":"EDNAMAT"}]}
    trace variable vars(matrixfile.protein) w  "::EMBOSS::reset_value [namespace current] matrixfile"
    set vars(matrixfile._type) matrix

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Additional section}]]
    lappend wlist $w
    set w $page

    lappend arguments windowsize
    iwidgets::entryfield $w.windowsize \
	-validate integer \
	-textvariable [namespace current]::vars(windowsize) \
	-labeltext [subst {Window size over which to test threshhold}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.windowsize component entry] -sticky nse
    set vars(windowsize) [subst 10]
    pack $w.windowsize -side top -fill both
    set vars(windowsize.minimum) [subst 3]
    set vars(windowsize.path) $w.windowsize
    set vars(windowsize.required)  0
    set vars(windowsize._type) integer

    lappend arguments threshold
    iwidgets::entryfield $w.threshold \
	-validate integer \
	-textvariable [namespace current]::vars(threshold) \
	-labeltext [subst Threshold]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.threshold component entry] -sticky nse
    set vars(threshold) [subst 23]
    pack $w.threshold -side top -fill both
    set vars(threshold.minimum) [subst 0]
    set vars(threshold.path) $w.threshold
    set vars(threshold.required)  0
    set vars(threshold._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments stretch
    checkbutton $w.stretch \
	-text [subst {Stretch plot}]\
	-variable [namespace current]::vars(stretch)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.stretch -side top -anchor w
    set vars(stretch) [subst N]
    set vars(stretch.path) $w.stretch
    set vars(stretch.required)  0
    set vars(stretch._type) toggle

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) graph

    lappend arguments xygraph
    iwidgets::combobox $w.xygraph\
	-textvariable [namespace current]::vars(xygraph)\
	-labeltext [subst {Graphics output format}]
    eval $w.xygraph insert list end [list_graph_types]
    grid [$w.xygraph component entry] -sticky nse
    $w.xygraph delete entry 0 end
    $w.xygraph insert entry end [subst data]
    $w.xygraph configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.xygraph -side top -fill both
    set vars(xygraph.path) $w.xygraph
    set vars(xygraph.required)  0
    set vars(xygraph._type) xygraph

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/dotmatcher.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

