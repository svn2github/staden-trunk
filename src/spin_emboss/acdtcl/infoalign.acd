package require Iwidgets
namespace eval ::EMBOSS::infoalign {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_infoalign*Xentry.entry.width 30
option add *e_infoalign*Entryfield.width 30
option add *e_infoalign*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) infoalign
    set w [xtoplevel .e_infoalign -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - infoalign}
    label $w._title -text {Information on a multiple sequence alignment}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(infoalign._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst gapany]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
   set vars(sequence.totweight) [subst 0]
    set vars(sequence._type) seqset

    lappend arguments matrix
    set vars(matrix.protein) [subst {[expr {$vars(acdprotein)}]}]
    iwidgets::combobox $w.matrix\
	-textvariable [namespace current]::vars(matrix)\
	-labeltext [subst {Similarity scoring Matrix file}]
    eval $w.matrix insert list end [list_matrices p]
    grid [$w.matrix component entry] -sticky nse
    $w.matrix delete entry 0 end
    $w.matrix insert entry end [subst {[expr {$vars(matrix.protein)?"EBLOSUM62":"EDNAMAT"}]}]
    $w.matrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.matrix -side top -fill both
    set vars(matrix.path) $w.matrix
    set vars(matrix.required)  0
    set vars(matrix.protein.orig) $vars(matrix.protein)
    set vars(matrix.protein.expr) {[expr {$vars(acdprotein)}]}
    trace variable vars(acdprotein) w  "::EMBOSS::reset_value [namespace current] matrix.protein"
    set vars(matrix.orig) $vars(matrix)
    set vars(matrix.expr) {[expr {$vars(matrix.protein)?"EBLOSUM62":"EDNAMAT"}]}
    trace variable vars(matrix.protein) w  "::EMBOSS::reset_value [namespace current] matrix"
    set vars(matrix._type) matrix

    lappend arguments refseq
    iwidgets::entryfield $w.refseq \
	-textvariable [namespace current]::vars(refseq) \
	-labeltext [subst {The number or the name of the reference sequence}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.refseq component entry] -sticky nse
    set vars(refseq) [subst 0]
    pack $w.refseq -side top -fill both
    set vars(refseq.path) $w.refseq
    set vars(refseq.required)  0
    set vars(refseq._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments plurality
    iwidgets::entryfield $w.plurality \
	-validate real \
	-textvariable [namespace current]::vars(plurality) \
	-labeltext [subst {Plurality check % for consensus}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.plurality component entry] -sticky nse
    set vars(plurality) [subst 50.0]
    pack $w.plurality -side top -fill both
    set vars(plurality.minimum) [subst 0.0]
    set vars(plurality.maximum) [subst 100.0]
    set vars(plurality.path) $w.plurality
    set vars(plurality.required)  0
    set vars(plurality._type) float

    lappend arguments identity
    iwidgets::entryfield $w.identity \
	-validate real \
	-textvariable [namespace current]::vars(identity) \
	-labeltext [subst {Required % of identities at a position fro consensus}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.identity component entry] -sticky nse
    set vars(identity) [subst 0.0]
    pack $w.identity -side top -fill both
    set vars(identity.minimum) [subst 0.0]
    set vars(identity.maximum) [subst 100.0]
    set vars(identity.path) $w.identity
    set vars(identity.required)  0
    set vars(identity._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst infoalign0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments html
    checkbutton $w.html \
	-text [subst {Format output as an HTML table}]\
	-variable [namespace current]::vars(html)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.html -side top -anchor w
    set vars(html) [subst N]
    set vars(html.path) $w.html
    set vars(html.required)  0
    set vars(html._type) boolean

    lappend arguments only
    checkbutton $w.only \
	-text [subst {Display the specified columns}]\
	-variable [namespace current]::vars(only)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.only -side top -anchor w
    set vars(only) [subst N]
    set vars(only.path) $w.only
    set vars(only.required)  0
    set vars(only._type) boolean

    lappend arguments heading
    checkbutton $w.heading \
	-text [subst {Display column headings}]\
	-variable [namespace current]::vars(heading)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.heading -side top -anchor w
    set vars(heading) [subst {[expr {(!$vars(only))}]}]
    set vars(heading.path) $w.heading
    set vars(heading.required)  0
    set vars(heading.orig) $vars(heading)
    set vars(heading.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] heading"
    set vars(heading._type) boolean

    lappend arguments usa
    checkbutton $w.usa \
	-text [subst {Display the USA of the sequence}]\
	-variable [namespace current]::vars(usa)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.usa -side top -anchor w
    set vars(usa) [subst {[expr {(!$vars(only))}]}]
    set vars(usa.path) $w.usa
    set vars(usa.required)  0
    set vars(usa.orig) $vars(usa)
    set vars(usa.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] usa"
    set vars(usa._type) boolean

    lappend arguments name
    checkbutton $w.name \
	-text [subst {Display 'name' column}]\
	-variable [namespace current]::vars(name)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.name -side top -anchor w
    set vars(name) [subst {[expr {(!$vars(only))}]}]
    set vars(name.path) $w.name
    set vars(name.required)  0
    set vars(name.orig) $vars(name)
    set vars(name.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] name"
    set vars(name._type) boolean

    lappend arguments seqlength
    checkbutton $w.seqlength \
	-text [subst {Display 'seqlength' column}]\
	-variable [namespace current]::vars(seqlength)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.seqlength -side top -anchor w
    set vars(seqlength) [subst {[expr {(!$vars(only))}]}]
    set vars(seqlength.path) $w.seqlength
    set vars(seqlength.required)  0
    set vars(seqlength.orig) $vars(seqlength)
    set vars(seqlength.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] seqlength"
    set vars(seqlength._type) boolean

    lappend arguments alignlength
    checkbutton $w.alignlength \
	-text [subst {Display 'alignlength' column}]\
	-variable [namespace current]::vars(alignlength)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.alignlength -side top -anchor w
    set vars(alignlength) [subst {[expr {(!$vars(only))}]}]
    set vars(alignlength.path) $w.alignlength
    set vars(alignlength.required)  0
    set vars(alignlength.orig) $vars(alignlength)
    set vars(alignlength.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] alignlength"
    set vars(alignlength._type) boolean

    lappend arguments gaps
    checkbutton $w.gaps \
	-text [subst {Display number of gaps}]\
	-variable [namespace current]::vars(gaps)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.gaps -side top -anchor w
    set vars(gaps) [subst {[expr {(!$vars(only))}]}]
    set vars(gaps.path) $w.gaps
    set vars(gaps.required)  0
    set vars(gaps.orig) $vars(gaps)
    set vars(gaps.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] gaps"
    set vars(gaps._type) boolean

    lappend arguments gapcount
    checkbutton $w.gapcount \
	-text [subst {Display number of gap positions}]\
	-variable [namespace current]::vars(gapcount)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.gapcount -side top -anchor w
    set vars(gapcount) [subst {[expr {(!$vars(only))}]}]
    set vars(gapcount.path) $w.gapcount
    set vars(gapcount.required)  0
    set vars(gapcount.orig) $vars(gapcount)
    set vars(gapcount.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] gapcount"
    set vars(gapcount._type) boolean

    lappend arguments idcount
    checkbutton $w.idcount \
	-text [subst {Display number of identical positions}]\
	-variable [namespace current]::vars(idcount)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.idcount -side top -anchor w
    set vars(idcount) [subst {[expr {(!$vars(only))}]}]
    set vars(idcount.path) $w.idcount
    set vars(idcount.required)  0
    set vars(idcount.orig) $vars(idcount)
    set vars(idcount.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] idcount"
    set vars(idcount._type) boolean

    lappend arguments simcount
    checkbutton $w.simcount \
	-text [subst {Display number of similar positions}]\
	-variable [namespace current]::vars(simcount)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.simcount -side top -anchor w
    set vars(simcount) [subst {[expr {(!$vars(only))}]}]
    set vars(simcount.path) $w.simcount
    set vars(simcount.required)  0
    set vars(simcount.orig) $vars(simcount)
    set vars(simcount.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] simcount"
    set vars(simcount._type) boolean

    lappend arguments diffcount
    checkbutton $w.diffcount \
	-text [subst {Display number of different positions}]\
	-variable [namespace current]::vars(diffcount)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.diffcount -side top -anchor w
    set vars(diffcount) [subst {[expr {(!$vars(only))}]}]
    set vars(diffcount.path) $w.diffcount
    set vars(diffcount.required)  0
    set vars(diffcount.orig) $vars(diffcount)
    set vars(diffcount.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] diffcount"
    set vars(diffcount._type) boolean

    lappend arguments change
    checkbutton $w.change \
	-text [subst {Display % number of changed positions}]\
	-variable [namespace current]::vars(change)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.change -side top -anchor w
    set vars(change) [subst {[expr {(!$vars(only))}]}]
    set vars(change.path) $w.change
    set vars(change.required)  0
    set vars(change.orig) $vars(change)
    set vars(change.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] change"
    set vars(change._type) boolean

    lappend arguments weight
    checkbutton $w.weight \
	-text [subst {Display 'weight' column}]\
	-variable [namespace current]::vars(weight)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.weight -side top -anchor w
    set vars(weight) [subst {[expr {(!$vars(only))}]}]
    set vars(weight.path) $w.weight
    set vars(weight.required)  0
    set vars(weight.orig) $vars(weight)
    set vars(weight.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] weight"
    set vars(weight._type) boolean

    lappend arguments description
    checkbutton $w.description \
	-text [subst {Display 'description' column}]\
	-variable [namespace current]::vars(description)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.description -side top -anchor w
    set vars(description) [subst {[expr {(!$vars(only))}]}]
    set vars(description.path) $w.description
    set vars(description.required)  0
    set vars(description.orig) $vars(description)
    set vars(description.expr) {[expr {(!$vars(only))}]}
    trace variable vars(only) w  "::EMBOSS::reset_value [namespace current] description"
    set vars(description._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/infoalign.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

