package require Iwidgets
namespace eval ::EMBOSS::pepnet {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_pepnet*Xentry.entry.width 30
option add *e_pepnet*Entryfield.width 30
option add *e_pepnet*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) pepnet
    set w [xtoplevel .e_pepnet -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - pepnet}
    label $w._title -text {Displays proteins as a helical net}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(pepnet._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst Protein]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments amphipathic
    checkbutton $w.amphipathic \
	-text [subst {Prompt for amphipathic residue marking}]\
	-variable [namespace current]::vars(amphipathic)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.amphipathic -side top -anchor w
    set vars(amphipathic) [subst 0]
    set vars(amphipathic.path) $w.amphipathic
    set vars(amphipathic.required)  0
    set vars(amphipathic._type) toggle

    lappend arguments squares
    iwidgets::entryfield $w.squares \
	-textvariable [namespace current]::vars(squares) \
	-labeltext [subst {Mark as squares}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.squares component entry] -sticky nse
    set vars(squares) [subst ILVM]
    pack $w.squares -side top -fill both
    set vars(squares.path) $w.squares
    set vars(squares.required)  0
    set vars(squares._type) string

    lappend arguments diamonds
    iwidgets::entryfield $w.diamonds \
	-textvariable [namespace current]::vars(diamonds) \
	-labeltext [subst {Mark as diamonds}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.diamonds component entry] -sticky nse
    set vars(diamonds) [subst DENQST]
    pack $w.diamonds -side top -fill both
    set vars(diamonds.path) $w.diamonds
    set vars(diamonds.required)  0
    set vars(diamonds._type) string

    lappend arguments octags
    iwidgets::entryfield $w.octags \
	-textvariable [namespace current]::vars(octags) \
	-labeltext [subst {Mark as octagons}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.octags component entry] -sticky nse
    set vars(octags) [subst HKR]
    pack $w.octags -side top -fill both
    set vars(octags.path) $w.octags
    set vars(octags.required)  0
    set vars(octags._type) string

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) graph

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/pepnet.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

