package require Iwidgets
namespace eval ::EMBOSS::seqrettype {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_seqrettype*Xentry.entry.width 30
option add *e_seqrettype*Entryfield.width 30
option add *e_seqrettype*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) seqrettype
    set w [xtoplevel .e_seqrettype -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - seqrettype}
    label $w._title -text {Reads and writes (returns) sequences}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(seqrettype._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments feature
    checkbutton $w.feature \
	-text [subst {Use feature information}]\
	-variable [namespace current]::vars(feature)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.feature -side top -anchor w
    set vars(feature) [subst 0]
    set vars(feature.path) $w.feature
    set vars(feature.required)  0
    set vars(feature._type) boolean

    lappend arguments type
    iwidgets::combobox $w.type\
	-textvariable [namespace current]::vars(type.name)\
	-labeltext [subst {Sequence type}]
    trace variable vars(type.name) w  "::EMBOSS::list_changed [namespace current] type"
    eval $w.type insert list end {{any valid sequence}} {{DNA sequence}} {{RNA sequence}} {{DNA, bases ACGT only}} {{RNA, bases ACGU only}} {{nucleotide sequence}} {{nucleotide, bases ACGTU only}} {{nucleotide, bases ACGTU with gaps}} {{DNA sequence with gaps}} {{RNA sequence with gaps}} {{protein sequence}} {{protein sequence with no selenocysteine}} {{protein sequence with gaps}} {{protein sequence with gaps but no selenocysteine}} {{protein sequence without BZ U or X}} {{protein sequence with a possible stop}} {{protein sequence with a possible stop but no selenocysteine}} {{any valid sequence with gaps}}
    set vars(type.mapping1) {{protein sequence with a possible stop but no selenocysteine} stopproteinstandard {protein sequence with gaps} gapprotein {any valid sequence} any {RNA sequence} rna {protein sequence with gaps but no selenocysteine} gapprotein {DNA sequence} dna {nucleotide sequence} nucleotide {DNA, bases ACGT only} puredna {any valid sequence with gaps} gapany {protein sequence without BZ U or X} pureprotein {nucleotide, bases ACGTU with gaps} gapnucleotide {RNA sequence with gaps} gaprna {protein sequence} protein {DNA sequence with gaps} gapdna {nucleotide, bases ACGTU only} purenucleotide {RNA, bases ACGU only} purerna {protein sequence with no selenocysteine} proteinstandard {protein sequence with a possible stop} stopprotein}
    set vars(type.mapping2) {stopproteinstandard {protein sequence with a possible stop but no selenocysteine} rna {RNA sequence} gaprna {RNA sequence with gaps} dna {DNA sequence} gapdna {DNA sequence with gaps} pureprotein {protein sequence without BZ U or X} gapany {any valid sequence with gaps} any {any valid sequence} purenucleotide {nucleotide, bases ACGTU only} gapprotein {protein sequence with gaps but no selenocysteine} protein {protein sequence} proteinstandard {protein sequence with no selenocysteine} nucleotide {nucleotide sequence} gapnucleotide {nucleotide, bases ACGTU with gaps} purerna {RNA, bases ACGU only} stopprotein {protein sequence with a possible stop} puredna {DNA, bases ACGT only}}
    grid [$w.type component entry] -sticky nse
    $w.type delete entry 0 end
    array set tmpmap $vars(type.mapping2)
    set def [subst any]
    catch {set def $tmpmap($def)}
    set vars(type) $def
    $w.type insert entry end $def
    $w.type configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.type -side top -fill both
    set vars(type.path) $w.type
    set vars(type.required)  0
    set vars(type.delimiter) {;}
    set vars(type._type) list

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst {[expr {$vars(type)}]}]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence.type.orig) $vars(sequence.type)
    set vars(sequence.type.expr) {[expr {$vars(type)}]}
    trace variable vars(type) w  "::EMBOSS::reset_value [namespace current] sequence.type"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments firstonly
    checkbutton $w.firstonly \
	-text [subst {Read one sequence and stop}]\
	-variable [namespace current]::vars(firstonly)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.firstonly -side top -anchor w
    set vars(firstonly) [subst 0]
    set vars(firstonly.path) $w.firstonly
    set vars(firstonly.required)  0
    set vars(firstonly._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst Filename]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqoutall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/seqrettype.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

