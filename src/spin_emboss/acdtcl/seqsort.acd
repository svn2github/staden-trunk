package require Iwidgets
namespace eval ::EMBOSS::seqsort {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_seqsort*Xentry.entry.width 30
option add *e_seqsort*Entryfield.width 30
option add *e_seqsort*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) seqsort
    set w [xtoplevel .e_seqsort -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - seqsort}
    label $w._title -text {Reads multiple files of hits and writes a non-ambiguous file of hits (scop families file) plus a validation file.}
    pack $w._title -side top -fill both
    set vars(seqsort._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {required Section}]]
    $w.book_1 view [subst {required Section}]
    lappend wlist $w
    set w $page

    lappend arguments mode
    iwidgets::scrolledlistbox $w.mode \
	-exportselection 0\
	-labeltext [subst {Mode of operation}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] mode"\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.mode -side top -fill both -expand 1
    set vars(mode.mapping1) {{Merge psiblast and swissparse hits} 3 {Process psiblast hits} 1 {Process swissparse hits} 2}
    set vars(mode.mapping2) {1 {Process psiblast hits} 2 {Process swissparse hits} 3 {Merge psiblast and swissparse hits}}
    eval $w.mode insert end {{Process psiblast hits}} {{Process swissparse hits}} {{Merge psiblast and swissparse hits}}
    set vars(mode.path) $w.mode
    set vars(mode.required)  1
    set vars(mode.delimiter) ,
    trace variable vars(mode) w  "::EMBOSS::list_multi_changed [namespace current] mode"
    set vars(mode) [subst 1]
    set vars(mode._type) list_multi

    lappend arguments psipath
    iwidgets::entryfield $w.psipath \
	-textvariable [namespace current]::vars(psipath) \
	-labeltext [subst {Location of scop hits files (input)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==1)}]}]]]
    grid [$w.psipath component entry] -sticky nse
    set vars(psipath) [subst ./]
    pack $w.psipath -side top -fill both
    set vars(psipath.path) $w.psipath
    set vars(psipath.required)  0
    set vars(psipath._type) string
    set vars(psipath.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==1)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] psipath"

    lappend arguments psiextn
    iwidgets::entryfield $w.psiextn \
	-textvariable [namespace current]::vars(psiextn) \
	-labeltext [subst {Extension of scop hits files}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==1)}]}]]]
    grid [$w.psiextn component entry] -sticky nse
    set vars(psiextn) [subst .hits]
    pack $w.psiextn -side top -fill both
    set vars(psiextn.path) $w.psiextn
    set vars(psiextn.required)  0
    set vars(psiextn._type) string
    set vars(psiextn.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==1)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] psiextn"

    lappend arguments swisspath
    iwidgets::entryfield $w.swisspath \
	-textvariable [namespace current]::vars(swisspath) \
	-labeltext [subst {Location of seqwords hits files}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==2)}]}]]]
    grid [$w.swisspath component entry] -sticky nse
    set vars(swisspath) [subst ./]
    pack $w.swisspath -side top -fill both
    set vars(swisspath.path) $w.swisspath
    set vars(swisspath.required)  0
    set vars(swisspath._type) string
    set vars(swisspath.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==2)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] swisspath"

    lappend arguments swissextn
    iwidgets::entryfield $w.swissextn \
	-textvariable [namespace current]::vars(swissextn) \
	-labeltext [subst {Extension of seqwords input files}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==2)}]}]]]
    grid [$w.swissextn component entry] -sticky nse
    set vars(swissextn) [subst .swissparse]
    pack $w.swissextn -side top -fill both
    set vars(swissextn.path) $w.swissextn
    set vars(swissextn.required)  0
    set vars(swissextn._type) string
    set vars(swissextn.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==2)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] swissextn"

    lappend arguments psifile
    iwidgets::entryfield $w.psifile \
	-textvariable [namespace current]::vars(psifile) \
	-labeltext [subst {Name of file containing processed scop hits file (input)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==3)}]}]]]
    grid [$w.psifile component entry] -sticky nse
    set vars(psifile) [subst {}]
    pack $w.psifile -side top -fill both
    set vars(psifile.path) $w.psifile
    set vars(psifile.required)  0
    set vars(psifile._type) string
    set vars(psifile.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==3)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] psifile"

    lappend arguments swissfile
    iwidgets::entryfield $w.swissfile \
	-textvariable [namespace current]::vars(swissfile) \
	-labeltext [subst {Name of file containing processed seqwords hits file (input)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==3)}]}]]]
    grid [$w.swissfile component entry] -sticky nse
    set vars(swissfile) [subst {}]
    pack $w.swissfile -side top -fill both
    set vars(swissfile.path) $w.swissfile
    set vars(swissfile.required)  0
    set vars(swissfile._type) string
    set vars(swissfile.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==3)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] swissfile"

    lappend arguments overlap
    iwidgets::entryfield $w.overlap \
	-validate integer \
	-textvariable [namespace current]::vars(overlap) \
	-labeltext [subst {number of overlapping residues required for merging of two hits}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.overlap component entry] -sticky nse
    set vars(overlap) [subst 10]
    pack $w.overlap -side top -fill both
    set vars(overlap.path) $w.overlap
    set vars(overlap.required)  1
    set vars(overlap._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments hitsf
    xentry $w.hitsf \
	-label [subst {Name of scop hits file (output)}]\
	-textvariable [namespace current]::vars(hitsf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.hitsf delete 0 end
    $w.hitsf insert end [subst seqsort.fam]
    pack $w.hitsf -side top -fill both
    set vars(hitsf.path) $w.hitsf
    set vars(hitsf.required)  1
    set vars(hitsf._type) outfile

    lappend arguments validf
    xentry $w.validf \
	-label [subst {Name of validation file (output)}]\
	-textvariable [namespace current]::vars(validf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.validf delete 0 end
    $w.validf insert end [subst seqsort.all]
    pack $w.validf -side top -fill both
    set vars(validf.path) $w.validf
    set vars(validf.required)  1
    set vars(validf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/seqsort.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

