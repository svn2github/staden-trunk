package require Iwidgets
namespace eval ::EMBOSS::pasteseq {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_pasteseq*Xentry.entry.width 30
option add *e_pasteseq*Entryfield.width 30
option add *e_pasteseq*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) pasteseq
    set w [xtoplevel .e_pasteseq -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - pasteseq}
    label $w._title -text {Insert one sequence into another}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(pasteseq._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments asequence
    set vars(asequence)       [get_active_seq_id 0]
    if {$vars(asequence) == -1} {set vars(asequence) [get_active_seq_id 0]}
    set vars(asequence.name)  [seq_info $vars(asequence) name]
    sequence_changed [namespace current] asequence
    set vars(asequence.type) [subst any]
    seq_id $w.asequence \
	-textvariable [namespace current]::vars(asequence.name)\
	-start_value $vars(asequence.begin)\
	-end_value $vars(asequence.end)\
	-to [seq_info $vars(asequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] asequence $w.asequence}"
    set vars(asequence) [subst {}]
    pack $w.asequence -side top -fill both
    set vars(asequence.path) $w.asequence
    set vars(asequence.required)  1
    trace variable vars(asequence.name) w  "::EMBOSS::sequence_changed [namespace current] asequence"
    set vars(asequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  1
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence.type.orig) $vars(bsequence.type)
    set vars(bsequence.type.expr) {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}
    trace variable vars(acdprotein) w  "::EMBOSS::reset_value [namespace current] bsequence.type"
    set vars(bsequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments pos
    iwidgets::entryfield $w.pos \
	-validate integer \
	-textvariable [namespace current]::vars(pos) \
	-labeltext [subst {Position to insert after}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pos component entry] -sticky nse
    set vars(pos) [subst {[expr {$vars(asequence.end)}]}]
    pack $w.pos -side top -fill both
    set vars(pos.minimum) [subst 0]
    set vars(pos.maximum) [subst {[expr {$vars(asequence.end)}]}]
    set vars(pos.maximum.orig) $vars(pos.maximum)
    set vars(pos.maximum.expr) {[expr {$vars(asequence.end)}]}
    trace variable vars(asequence.end) w  "::EMBOSS::reset_value [namespace current] pos.maximum"
    set vars(pos.path) $w.pos
    set vars(pos.required)  0
    set vars(pos.orig) $vars(pos)
    set vars(pos.expr) {[expr {$vars(asequence.end)}]}
    trace variable vars(asequence.end) w  "::EMBOSS::reset_value [namespace current] pos"
    set vars(pos._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst {Sequence output filename}]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqout

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/pasteseq.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

