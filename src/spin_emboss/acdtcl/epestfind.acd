package require Iwidgets
namespace eval ::EMBOSS::epestfind {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_epestfind*Xentry.entry.width 30
option add *e_epestfind*Entryfield.width 30
option add *e_epestfind*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) epestfind
    set w [xtoplevel .e_epestfind -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - epestfind}
    label $w._title -text {Finds PEST motifs as potential proteolytic cleavage sites}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(epestfind._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst protein]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    lappend arguments aadata
    xentry $w.aadata \
	-label [subst {Amino acid data file}]\
	-textvariable [namespace current]::vars(aadata) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.aadata delete 0 end
    $w.aadata insert end [subst Eamino.dat]
    pack $w.aadata -side top -fill both
    set vars(aadata.path) $w.aadata
    set vars(aadata.required)  0
    set vars(aadata._type) datafile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments window
    iwidgets::entryfield $w.window \
	-validate integer \
	-textvariable [namespace current]::vars(window) \
	-labeltext [subst {Window length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.window component entry] -sticky nse
    set vars(window) [subst 10]
    pack $w.window -side top -fill both
    set vars(window.minimum) [subst 2]
    set vars(window.maximum) [subst {[expr {$vars(sequence.length)}]}]
    set vars(window.maximum.orig) $vars(window.maximum)
    set vars(window.maximum.expr) {[expr {$vars(sequence.length)}]}
    trace variable vars(sequence.length) w  "::EMBOSS::reset_value [namespace current] window.maximum"
    set vars(window.path) $w.window
    set vars(window.required)  0
    set vars(window._type) integer

    lappend arguments order
    iwidgets::combobox $w.order\
	-textvariable [namespace current]::vars(order)\
	-labeltext [subst {Sort order of results}]
    eval $w.order insert list end length position score
    grid [$w.order component entry] -sticky nse
    $w.order delete entry 0 end
    $w.order insert entry end [subst score]
    $w.order configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.order -side top -fill both
    set vars(order.path) $w.order
    set vars(order.required)  0
    set vars(order._type) selection

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    lappend wlist $w
    set w $page

    lappend arguments potential
    checkbutton $w.potential \
	-text [subst {Display potential PEST motifs}]\
	-variable [namespace current]::vars(potential)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.potential -side top -anchor w
    set vars(potential) [subst Y]
    set vars(potential.path) $w.potential
    set vars(potential.required)  0
    set vars(potential._type) boolean

    lappend arguments poor
    checkbutton $w.poor \
	-text [subst {Display poor PEST motifs}]\
	-variable [namespace current]::vars(poor)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.poor -side top -anchor w
    set vars(poor) [subst Y]
    set vars(poor.path) $w.poor
    set vars(poor.required)  0
    set vars(poor._type) boolean

    lappend arguments invalid
    checkbutton $w.invalid \
	-text [subst {Display invalid PEST motifs}]\
	-variable [namespace current]::vars(invalid)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.invalid -side top -anchor w
    set vars(invalid) [subst N]
    set vars(invalid.path) $w.invalid
    set vars(invalid.required)  0
    set vars(invalid._type) boolean

    lappend arguments map
    checkbutton $w.map \
	-text [subst {Display PEST motifs map}]\
	-variable [namespace current]::vars(map)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.map -side top -anchor w
    set vars(map) [subst Y]
    set vars(map.path) $w.map
    set vars(map.required)  0
    set vars(map._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst epestfind0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) xygraph

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Additional section}]]
    lappend wlist $w
    set w $page

    lappend arguments threshold
    iwidgets::entryfield $w.threshold \
	-validate real \
	-textvariable [namespace current]::vars(threshold) \
	-labeltext [subst {Threshold score}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.threshold component entry] -sticky nse
    set vars(threshold) [subst +5.0]
    pack $w.threshold -side top -fill both
    set vars(threshold.minimum) [subst -55.0]
    set vars(threshold.maximum) [subst +55.0]
    set vars(threshold.path) $w.threshold
    set vars(threshold.required)  0
    set vars(threshold._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/epestfind.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

