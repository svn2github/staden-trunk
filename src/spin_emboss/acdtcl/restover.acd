package require Iwidgets
namespace eval ::EMBOSS::restover {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_restover*Xentry.entry.width 30
option add *e_restover*Entryfield.width 30
option add *e_restover*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) restover
    set w [xtoplevel .e_restover -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - restover}
    label $w._title -text {Finds restriction enzymes that produce a specific overhang}
    pack $w._title -side top -fill both
    set vars(restover._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments seqcomp
    iwidgets::entryfield $w.seqcomp \
	-textvariable [namespace current]::vars(seqcomp) \
	-labeltext [subst {Overlap sequence}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.seqcomp component entry] -sticky nse
    set vars(seqcomp) [subst {}]
    pack $w.seqcomp -side top -fill both
    set vars(seqcomp.path) $w.seqcomp
    set vars(seqcomp.required)  1
    set vars(seqcomp._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments min
    iwidgets::entryfield $w.min \
	-validate integer \
	-textvariable [namespace current]::vars(min) \
	-labeltext [subst {Minimum cuts per RE}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.min component entry] -sticky nse
    set vars(min) [subst 1]
    pack $w.min -side top -fill both
    set vars(min.minimum) [subst 1]
    set vars(min.maximum) [subst 1000]
    set vars(min.path) $w.min
    set vars(min.required)  0
    set vars(min._type) integer

    lappend arguments max
    iwidgets::entryfield $w.max \
	-validate integer \
	-textvariable [namespace current]::vars(max) \
	-labeltext [subst {Maximum cuts per RE}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.max component entry] -sticky nse
    set vars(max) [subst 2000000000]
    pack $w.max -side top -fill both
    set vars(max.minimum) [subst {[expr {$vars(min)}]}]
    set vars(max.minimum.orig) $vars(max.minimum)
    set vars(max.minimum.expr) {[expr {$vars(min)}]}
    trace variable vars(min) w  "::EMBOSS::reset_value [namespace current] max.minimum"
    set vars(max.maximum) [subst 2000000000]
    set vars(max.path) $w.max
    set vars(max.required)  0
    set vars(max._type) integer

    lappend arguments single
    checkbutton $w.single \
	-text [subst {Force single site only cuts}]\
	-variable [namespace current]::vars(single)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.single -side top -anchor w
    set vars(single) [subst 0]
    set vars(single.path) $w.single
    set vars(single.required)  0
    set vars(single._type) bool

    lappend arguments threeprime
    checkbutton $w.threeprime \
	-text [subst {3' overhang? (else 5') e.g. BamHI has CTAG as a 5' overhang, and ApaI has CCGG as 3' overhang.}]\
	-variable [namespace current]::vars(threeprime)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.threeprime -side top -anchor w
    set vars(threeprime) [subst 0]
    set vars(threeprime.path) $w.threeprime
    set vars(threeprime.required)  0
    set vars(threeprime._type) bool

    lappend arguments blunt
    checkbutton $w.blunt \
	-text [subst {Allow blunt end cutters}]\
	-variable [namespace current]::vars(blunt)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.blunt -side top -anchor w
    set vars(blunt) [subst 1]
    set vars(blunt.path) $w.blunt
    set vars(blunt.required)  0
    set vars(blunt._type) bool

    lappend arguments sticky
    checkbutton $w.sticky \
	-text [subst {Allow sticky end cutters}]\
	-variable [namespace current]::vars(sticky)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.sticky -side top -anchor w
    set vars(sticky) [subst 1]
    set vars(sticky.path) $w.sticky
    set vars(sticky.required)  0
    set vars(sticky._type) bool

    lappend arguments ambiguity
    checkbutton $w.ambiguity \
	-text [subst {Allow ambiguous matches}]\
	-variable [namespace current]::vars(ambiguity)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.ambiguity -side top -anchor w
    set vars(ambiguity) [subst 1]
    set vars(ambiguity.path) $w.ambiguity
    set vars(ambiguity.required)  0
    set vars(ambiguity._type) bool

    lappend arguments plasmid
    checkbutton $w.plasmid \
	-text [subst {Allow circular DNA}]\
	-variable [namespace current]::vars(plasmid)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plasmid -side top -anchor w
    set vars(plasmid) [subst 0]
    set vars(plasmid.path) $w.plasmid
    set vars(plasmid.required)  0
    set vars(plasmid._type) bool

    lappend arguments commercial
    checkbutton $w.commercial \
	-text [subst {Only enzymes with suppliers}]\
	-variable [namespace current]::vars(commercial)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.commercial -side top -anchor w
    set vars(commercial) [subst 1]
    set vars(commercial.path) $w.commercial
    set vars(commercial.required)  0
    set vars(commercial._type) bool

    lappend arguments datafile
    iwidgets::entryfield $w.datafile \
	-textvariable [namespace current]::vars(datafile) \
	-labeltext [subst {Alternative RE data file}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.datafile component entry] -sticky nse
    set vars(datafile) [subst {}]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  0
    set vars(datafile._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments html
    checkbutton $w.html \
	-text [subst {Create HTML output}]\
	-variable [namespace current]::vars(html)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.html -side top -anchor w
    set vars(html) [subst 0]
    set vars(html.path) $w.html
    set vars(html.required)  0
    set vars(html._type) bool

    lappend arguments limit
    checkbutton $w.limit \
	-text [subst {Limits reports to one isoschizomer}]\
	-variable [namespace current]::vars(limit)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.limit -side top -anchor w
    set vars(limit) [subst 1]
    set vars(limit.path) $w.limit
    set vars(limit.required)  0
    set vars(limit._type) bool

    lappend arguments preferred
    checkbutton $w.preferred \
	-text [subst {Report preferred isoschizomers}]\
	-variable [namespace current]::vars(preferred)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.preferred -side top -anchor w
    set vars(preferred) [subst 0]
    set vars(preferred.path) $w.preferred
    set vars(preferred.required)  0
    set vars(preferred._type) bool

    lappend arguments alphabetic
    checkbutton $w.alphabetic \
	-text [subst {Sort output alphabetically}]\
	-variable [namespace current]::vars(alphabetic)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.alphabetic -side top -anchor w
    set vars(alphabetic) [subst 0]
    set vars(alphabetic.path) $w.alphabetic
    set vars(alphabetic.required)  0
    set vars(alphabetic._type) bool

    lappend arguments fragments
    checkbutton $w.fragments \
	-text [subst {Show fragment lengths}]\
	-variable [namespace current]::vars(fragments)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.fragments -side top -anchor w
    set vars(fragments) [subst 0]
    set vars(fragments.path) $w.fragments
    set vars(fragments.required)  0
    set vars(fragments._type) bool

    lappend arguments name
    checkbutton $w.name \
	-text [subst {Show sequence name}]\
	-variable [namespace current]::vars(name)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.name -side top -anchor w
    set vars(name) [subst 0]
    set vars(name.path) $w.name
    set vars(name.required)  0
    set vars(name._type) bool

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst restover0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/restover.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

