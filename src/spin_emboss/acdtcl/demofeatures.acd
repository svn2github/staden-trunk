package require Iwidgets
namespace eval ::EMBOSS::demofeatures {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_demofeatures*Xentry.entry.width 30
option add *e_demofeatures*Entryfield.width 30
option add *e_demofeatures*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) demofeatures
    set w [xtoplevel .e_demofeatures -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - demofeatures}
    label $w._title -text {demonstration of the feature functions}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(demofeatures._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Advanced section}]]
    $w.book_1 view [subst {Advanced section}]
    lappend wlist $w
    set w $page

    lappend arguments typesort
    checkbutton $w.typesort \
	-text [subst {Do you want to Sort by Type}]\
	-variable [namespace current]::vars(typesort)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.typesort -side top -anchor w
    set vars(typesort) [subst N]
    set vars(typesort.path) $w.typesort
    set vars(typesort.required)  0
    set vars(typesort._type) boolean

    lappend arguments startsort
    checkbutton $w.startsort \
	-text [subst {Do you want to Sort by Start position}]\
	-variable [namespace current]::vars(startsort)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.startsort -side top -anchor w
    set vars(startsort) [subst N]
    set vars(startsort.path) $w.startsort
    set vars(startsort.required)  0
    set vars(startsort._type) boolean

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfeat
    xentry $w.outfeat \
	-label [subst {Feature output filename}]\
	-textvariable [namespace current]::vars(outfeat) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfeat delete 0 end
    $w.outfeat insert end [subst gff:demofeatures.gff]
    pack $w.outfeat -side top -fill both
    set vars(outfeat.path) $w.outfeat
    set vars(outfeat.required)  1
    set vars(outfeat._type) featout

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/demofeatures.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

