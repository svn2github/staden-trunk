package require Iwidgets
namespace eval ::EMBOSS::scopnr {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_scopnr*Xentry.entry.width 30
option add *e_scopnr*Entryfield.width 30
option add *e_scopnr*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) scopnr
    set w [xtoplevel .e_scopnr -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - scopnr}
    label $w._title -text {Removes redundant domains from a scop classification file.}
    pack $w._title -side top -fill both
    set vars(scopnr._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments scopin
    xentry $w.scopin \
	-label [subst {Name of scop classification file (embl format input)}]\
	-textvariable [namespace current]::vars(scopin) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.scopin delete 0 end
    $w.scopin insert end [subst Escop.dat]
    pack $w.scopin -side top -fill both
    set vars(scopin.path) $w.scopin
    set vars(scopin.required)  1
    set vars(scopin._type) infile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments mode
    iwidgets::scrolledlistbox $w.mode \
	-exportselection 0\
	-labeltext [subst {Redundancy removal options}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] mode"\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.mode -side top -fill both -expand 1
    set vars(mode.mapping1) {{Remove redundancy outside a range of acceptable threshold % similarity} 2 {Remove redundancy at a single threshold % sequence similarity} 1}
    set vars(mode.mapping2) {1 {Remove redundancy at a single threshold % sequence similarity} 2 {Remove redundancy outside a range of acceptable threshold % similarity}}
    eval $w.mode insert end {{Remove redundancy at a single threshold % sequence similarity}} {{Remove redundancy outside a range of acceptable threshold % similarity}}
    set vars(mode.path) $w.mode
    set vars(mode.required)  1
    set vars(mode.delimiter) ,
    trace variable vars(mode) w  "::EMBOSS::list_multi_changed [namespace current] mode"
    set vars(mode) [subst 1]
    set vars(mode._type) list_multi

    lappend arguments thresh
    iwidgets::entryfield $w.thresh \
	-validate real \
	-textvariable [namespace current]::vars(thresh) \
	-labeltext [subst {The % sequence identity redundancy threshold}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==1)}]}]]]
    grid [$w.thresh component entry] -sticky nse
    set vars(thresh) [subst 95.0]
    pack $w.thresh -side top -fill both
    set vars(thresh.path) $w.thresh
    set vars(thresh.required)  0
    set vars(thresh._type) float
    set vars(thresh.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==1)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] thresh"

    lappend arguments threshlow
    iwidgets::entryfield $w.threshlow \
	-validate real \
	-textvariable [namespace current]::vars(threshlow) \
	-labeltext [subst {The % sequence identity redundancy threshold (lower limit)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==2)}]}]]]
    grid [$w.threshlow component entry] -sticky nse
    set vars(threshlow) [subst 30.0]
    pack $w.threshlow -side top -fill both
    set vars(threshlow.path) $w.threshlow
    set vars(threshlow.required)  0
    set vars(threshlow._type) float
    set vars(threshlow.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==2)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] threshlow"

    lappend arguments threshup
    iwidgets::entryfield $w.threshup \
	-validate real \
	-textvariable [namespace current]::vars(threshup) \
	-labeltext [subst {The % sequence identity redundancy threshold (upper limit)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(mode)==2)}]}]]]
    grid [$w.threshup component entry] -sticky nse
    set vars(threshup) [subst 90.0]
    pack $w.threshup -side top -fill both
    set vars(threshup.path) $w.threshup
    set vars(threshup.required)  0
    set vars(threshup._type) float
    set vars(threshup.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(mode)==2)}]]}
    trace variable vars(mode) w  "::EMBOSS::reset_needed [namespace current] threshup"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments datafile
    set vars(datafile.protein) [subst 1]
    iwidgets::combobox $w.datafile\
	-textvariable [namespace current]::vars(datafile)\
	-labeltext [subst {Residue substitution matrix}]
    eval $w.datafile insert list end [list_matrices p]
    grid [$w.datafile component entry] -sticky nse
    $w.datafile delete entry 0 end
    $w.datafile insert entry end [subst EBLOSUM62]
    $w.datafile configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  0
    set vars(datafile._type) matrixf

    lappend arguments gapopen
    iwidgets::entryfield $w.gapopen \
	-validate real \
	-textvariable [namespace current]::vars(gapopen) \
	-labeltext [subst {Gap insertion penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapopen component entry] -sticky nse
    set vars(gapopen) [subst 10]
    pack $w.gapopen -side top -fill both
    set vars(gapopen.minimum) [subst 1.]
    set vars(gapopen.maximum) [subst 100.]
    set vars(gapopen.path) $w.gapopen
    set vars(gapopen.required)  0
    set vars(gapopen._type) float

    lappend arguments gapextend
    iwidgets::entryfield $w.gapextend \
	-validate real \
	-textvariable [namespace current]::vars(gapextend) \
	-labeltext [subst {Gap extension penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapextend component entry] -sticky nse
    set vars(gapextend) [subst 0.5]
    pack $w.gapextend -side top -fill both
    set vars(gapextend.minimum) [subst 0.0]
    set vars(gapextend.maximum) [subst 10.]
    set vars(gapextend.path) $w.gapextend
    set vars(gapextend.required)  0
    set vars(gapextend._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments scopout
    xentry $w.scopout \
	-label [subst {Name of non-redundant scop classification file (embl format output)}]\
	-textvariable [namespace current]::vars(scopout) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.scopout delete 0 end
    $w.scopout insert end [subst Escop_90.dat]
    pack $w.scopout -side top -fill both
    set vars(scopout.path) $w.scopout
    set vars(scopout.required)  1
    set vars(scopout._type) outfile

    lappend arguments errf
    xentry $w.errf \
	-label [subst {Name of log file for the build}]\
	-textvariable [namespace current]::vars(errf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.errf delete 0 end
    $w.errf insert end [subst scopnr.log]
    pack $w.errf -side top -fill both
    set vars(errf.path) $w.errf
    set vars(errf.required)  1
    set vars(errf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/scopnr.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

