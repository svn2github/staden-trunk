package require Iwidgets
namespace eval ::EMBOSS::dan {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_dan*Xentry.entry.width 30
option add *e_dan*Entryfield.width 30
option add *e_dan*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) dan
    set w [xtoplevel .e_dan -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - dan}
    label $w._title -text {Calculates DNA RNA/DNA melting temperature}
    pack $w._title -side top -fill both
    set vars(dan._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments windowsize
    iwidgets::entryfield $w.windowsize \
	-validate integer \
	-textvariable [namespace current]::vars(windowsize) \
	-labeltext [subst {Enter window size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.windowsize component entry] -sticky nse
    set vars(windowsize) [subst 20]
    pack $w.windowsize -side top -fill both
    set vars(windowsize.minimum) [subst 1]
    set vars(windowsize.maximum) [subst 100]
    set vars(windowsize.path) $w.windowsize
    set vars(windowsize.required)  1
    set vars(windowsize._type) integer

    lappend arguments shiftincrement
    iwidgets::entryfield $w.shiftincrement \
	-validate integer \
	-textvariable [namespace current]::vars(shiftincrement) \
	-labeltext [subst {Enter Shift Increment}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.shiftincrement component entry] -sticky nse
    set vars(shiftincrement) [subst 1]
    pack $w.shiftincrement -side top -fill both
    set vars(shiftincrement.minimum) [subst 1]
    set vars(shiftincrement.maximum) [subst {[expr {$vars(windowsize)}]}]
    set vars(shiftincrement.maximum.orig) $vars(shiftincrement.maximum)
    set vars(shiftincrement.maximum.expr) {[expr {$vars(windowsize)}]}
    trace variable vars(windowsize) w  "::EMBOSS::reset_value [namespace current] shiftincrement.maximum"
    set vars(shiftincrement.path) $w.shiftincrement
    set vars(shiftincrement.required)  1
    set vars(shiftincrement._type) integer

    lappend arguments dnaconc
    iwidgets::entryfield $w.dnaconc \
	-validate real \
	-textvariable [namespace current]::vars(dnaconc) \
	-labeltext [subst {Enter DNA concentration (nM)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.dnaconc component entry] -sticky nse
    set vars(dnaconc) [subst 50.]
    pack $w.dnaconc -side top -fill both
    set vars(dnaconc.minimum) [subst 1.]
    set vars(dnaconc.maximum) [subst 100000.]
    set vars(dnaconc.path) $w.dnaconc
    set vars(dnaconc.required)  1
    set vars(dnaconc._type) float

    lappend arguments saltconc
    iwidgets::entryfield $w.saltconc \
	-validate real \
	-textvariable [namespace current]::vars(saltconc) \
	-labeltext [subst {Enter salt concentration (mM)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.saltconc component entry] -sticky nse
    set vars(saltconc) [subst 50.]
    pack $w.saltconc -side top -fill both
    set vars(saltconc.minimum) [subst 1.]
    set vars(saltconc.maximum) [subst 1000.]
    set vars(saltconc.path) $w.saltconc
    set vars(saltconc.required)  1
    set vars(saltconc._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments rna
    checkbutton $w.rna \
	-text [subst {Use RNA data values}]\
	-variable [namespace current]::vars(rna)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.rna -side top -anchor w
    set vars(rna) [subst 0]
    set vars(rna.path) $w.rna
    set vars(rna.required)  0
    set vars(rna._type) bool

    iwidgets::labeledframe $w.productsection \
	-labeltext [subst {productsection Section}]
    pack $w.productsection -side top -fill both
    lappend wlist $w
    append w .productsection.childsite

    lappend arguments product
    checkbutton $w.product \
	-text [subst {Prompt for product values}]\
	-variable [namespace current]::vars(product)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.product -side top -anchor w
    set vars(product) [subst 0]
    set vars(product.path) $w.product
    set vars(product.required)  0
    set vars(product._type) bool

    lappend arguments formamide
    iwidgets::entryfield $w.formamide \
	-validate real \
	-textvariable [namespace current]::vars(formamide) \
	-labeltext [subst {Enter percentage of formamide}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(product)}]}]]]
    grid [$w.formamide component entry] -sticky nse
    set vars(formamide) [subst 0.]
    pack $w.formamide -side top -fill both
    set vars(formamide.minimum) [subst 0.]
    set vars(formamide.maximum) [subst 100.]
    set vars(formamide.path) $w.formamide
    set vars(formamide.required)  0
    set vars(formamide._type) float
    set vars(formamide.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(product)}]]}
    trace variable vars(product) w  "::EMBOSS::reset_needed [namespace current] formamide"

    lappend arguments mismatch
    iwidgets::entryfield $w.mismatch \
	-validate real \
	-textvariable [namespace current]::vars(mismatch) \
	-labeltext [subst {Enter percent mismatch}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(product)}]}]]]
    grid [$w.mismatch component entry] -sticky nse
    set vars(mismatch) [subst 0.]
    pack $w.mismatch -side top -fill both
    set vars(mismatch.minimum) [subst 0.]
    set vars(mismatch.maximum) [subst 100.]
    set vars(mismatch.path) $w.mismatch
    set vars(mismatch.required)  0
    set vars(mismatch._type) float
    set vars(mismatch.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(product)}]]}
    trace variable vars(product) w  "::EMBOSS::reset_needed [namespace current] mismatch"

    lappend arguments prodlen
    iwidgets::entryfield $w.prodlen \
	-validate integer \
	-textvariable [namespace current]::vars(prodlen) \
	-labeltext [subst {Enter the product length}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(product)}]}]]]
    grid [$w.prodlen component entry] -sticky nse
    set vars(prodlen) [subst {[expr {$vars(windowsize)}]}]
    pack $w.prodlen -side top -fill both
    set vars(prodlen.minimum) [subst {[expr {$vars(windowsize)}]}]
    set vars(prodlen.minimum.orig) $vars(prodlen.minimum)
    set vars(prodlen.minimum.expr) {[expr {$vars(windowsize)}]}
    trace variable vars(windowsize) w  "::EMBOSS::reset_value [namespace current] prodlen.minimum"
    set vars(prodlen.path) $w.prodlen
    set vars(prodlen.required)  0
    set vars(prodlen.orig) $vars(prodlen)
    set vars(prodlen.expr) {[expr {$vars(windowsize)}]}
    trace variable vars(windowsize) w  "::EMBOSS::reset_value [namespace current] prodlen"
    set vars(prodlen._type) integer
    set vars(prodlen.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(product)}]]}
    trace variable vars(product) w  "::EMBOSS::reset_needed [namespace current] prodlen"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    iwidgets::labeledframe $w.thermosection \
	-labeltext [subst {thermosection Section}]
    pack $w.thermosection -side top -fill both
    lappend wlist $w
    append w .thermosection.childsite

    lappend arguments thermo
    checkbutton $w.thermo \
	-text [subst {Thermodynamic calculations}]\
	-variable [namespace current]::vars(thermo)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.thermo -side top -anchor w
    set vars(thermo) [subst 0]
    set vars(thermo.path) $w.thermo
    set vars(thermo.required)  0
    set vars(thermo._type) bool

    lappend arguments temperature
    iwidgets::entryfield $w.temperature \
	-validate real \
	-textvariable [namespace current]::vars(temperature) \
	-labeltext [subst {Enter temperature}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.temperature component entry] -sticky nse
    set vars(temperature) [subst 25.]
    pack $w.temperature -side top -fill both
    set vars(temperature.minimum) [subst 0.]
    set vars(temperature.maximum) [subst 100.]
    set vars(temperature.path) $w.temperature
    set vars(temperature.required)  0
    set vars(temperature._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments plot
    checkbutton $w.plot \
	-text [subst {Produce a plot}]\
	-variable [namespace current]::vars(plot)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plot -side top -anchor w
    set vars(plot) [subst 0]
    set vars(plot.path) $w.plot
    set vars(plot.required)  0
    set vars(plot._type) bool

    lappend arguments mintemp
    iwidgets::entryfield $w.mintemp \
	-validate real \
	-textvariable [namespace current]::vars(mintemp) \
	-labeltext [subst {Enter minimum temperature}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(plot)}]}]]]
    grid [$w.mintemp component entry] -sticky nse
    set vars(mintemp) [subst 55.]
    pack $w.mintemp -side top -fill both
    set vars(mintemp.minimum) [subst 0.]
    set vars(mintemp.maximum) [subst 150.]
    set vars(mintemp.path) $w.mintemp
    set vars(mintemp.required)  0
    set vars(mintemp._type) float
    set vars(mintemp.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(plot)}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] mintemp"

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(plot)}]}]]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) xygraph
    set vars(graph.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(plot)}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] graph"

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output data file}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(plot))}]}]]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) report
    set vars(outfile.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(plot))}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] outfile"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/dan.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

