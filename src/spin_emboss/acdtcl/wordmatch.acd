package require Iwidgets
namespace eval ::EMBOSS::wordmatch {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_wordmatch*Xentry.entry.width 30
option add *e_wordmatch*Entryfield.width 30
option add *e_wordmatch*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) wordmatch
    set w [xtoplevel .e_wordmatch -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - wordmatch}
    label $w._title -text {Finds all exact matches of a given size between 2 sequences}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(wordmatch._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments asequence
    set vars(asequence)       [get_active_seq_id 0]
    if {$vars(asequence) == -1} {set vars(asequence) [get_active_seq_id 0]}
    set vars(asequence.name)  [seq_info $vars(asequence) name]
    sequence_changed [namespace current] asequence
    set vars(asequence.type) [subst any]
    seq_id $w.asequence \
	-textvariable [namespace current]::vars(asequence.name)\
	-start_value $vars(asequence.begin)\
	-end_value $vars(asequence.end)\
	-to [seq_info $vars(asequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] asequence $w.asequence}"
    set vars(asequence) [subst {}]
    pack $w.asequence -side top -fill both
    set vars(asequence.path) $w.asequence
    set vars(asequence.required)  1
    trace variable vars(asequence.name) w  "::EMBOSS::sequence_changed [namespace current] asequence"
    set vars(asequence._type) sequence

    lappend arguments bsequence
    set vars(bsequence)       [get_active_seq_id 1]
    if {$vars(bsequence) == -1} {set vars(bsequence) [get_active_seq_id 0]}
    set vars(bsequence.name)  [seq_info $vars(bsequence) name]
    sequence_changed [namespace current] bsequence
    set vars(bsequence.type) [subst {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}]
    seq_id $w.bsequence \
	-textvariable [namespace current]::vars(bsequence.name)\
	-start_value $vars(bsequence.begin)\
	-end_value $vars(bsequence.end)\
	-to [seq_info $vars(bsequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] bsequence $w.bsequence}"
    set vars(bsequence) [subst {}]
    pack $w.bsequence -side top -fill both
    set vars(bsequence.path) $w.bsequence
    set vars(bsequence.required)  1
    trace variable vars(bsequence.name) w  "::EMBOSS::sequence_changed [namespace current] bsequence"
    set vars(bsequence.type.orig) $vars(bsequence.type)
    set vars(bsequence.type.expr) {[expr {($vars(acdprotein) ? "stopprotein" : "nucleotide")}]}
    trace variable vars(acdprotein) w  "::EMBOSS::reset_value [namespace current] bsequence.type"
    set vars(bsequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments wordsize
    iwidgets::entryfield $w.wordsize \
	-validate integer \
	-textvariable [namespace current]::vars(wordsize) \
	-labeltext [subst {Word size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.wordsize component entry] -sticky nse
    set vars(wordsize) [subst 4]
    pack $w.wordsize -side top -fill both
    set vars(wordsize.minimum) [subst 2]
    set vars(wordsize.path) $w.wordsize
    set vars(wordsize.required)  0
    set vars(wordsize._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Alignment output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst align0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) align

    lappend arguments aoutfeat
    xentry $w.aoutfeat \
	-label [subst {Feature output filename}]\
	-textvariable [namespace current]::vars(aoutfeat) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.aoutfeat delete 0 end
    $w.aoutfeat insert end [subst feature1.out]
    pack $w.aoutfeat -side top -fill both
    set vars(aoutfeat.path) $w.aoutfeat
    set vars(aoutfeat.required)  1
    set vars(aoutfeat._type) featout

    lappend arguments boutfeat
    xentry $w.boutfeat \
	-label [subst {Feature output filename}]\
	-textvariable [namespace current]::vars(boutfeat) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.boutfeat delete 0 end
    $w.boutfeat insert end [subst feature2.out]
    pack $w.boutfeat -side top -fill both
    set vars(boutfeat.path) $w.boutfeat
    set vars(boutfeat.required)  1
    set vars(boutfeat._type) featout

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/wordmatch.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

