package require Iwidgets
namespace eval ::EMBOSS::silent {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_silent*Xentry.entry.width 30
option add *e_silent*Entryfield.width 30
option add *e_silent*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) silent
    set w [xtoplevel .e_silent -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - silent}
    label $w._title -text {Silent mutation restriction enzyme scan}
    pack $w._title -side top -fill both
    ::EMBOSS::init_dialogue [namespace current]
    set vars(silent._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {Input section}]]
    $w.book_1 view [subst {Input section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 0]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 0]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst dna]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Required section}]]
    lappend wlist $w
    set w $page

    lappend arguments enzymes
    iwidgets::entryfield $w.enzymes \
	-textvariable [namespace current]::vars(enzymes) \
	-labeltext [subst {Comma separated enzyme list}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.enzymes component entry] -sticky nse
    set vars(enzymes) [subst all]
    pack $w.enzymes -side top -fill both
    set vars(enzymes.path) $w.enzymes
    set vars(enzymes.required)  0
    set vars(enzymes._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {Output section}]]
    lappend wlist $w
    set w $page

    lappend arguments sshow
    checkbutton $w.sshow \
	-text [subst {Display untranslated sequence}]\
	-variable [namespace current]::vars(sshow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.sshow -side top -anchor w
    set vars(sshow) [subst N]
    set vars(sshow.path) $w.sshow
    set vars(sshow.required)  0
    set vars(sshow._type) boolean

    lappend arguments tshow
    checkbutton $w.tshow \
	-text [subst {Display translated sequence}]\
	-variable [namespace current]::vars(tshow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.tshow -side top -anchor w
    set vars(tshow) [subst N]
    set vars(tshow.path) $w.tshow
    set vars(tshow.required)  0
    set vars(tshow._type) boolean

    lappend arguments allmut
    checkbutton $w.allmut \
	-text [subst {Display all mutations}]\
	-variable [namespace current]::vars(allmut)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.allmut -side top -anchor w
    set vars(allmut) [subst N]
    set vars(allmut.path) $w.allmut
    set vars(allmut.required)  0
    set vars(allmut._type) boolean

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/silent.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

