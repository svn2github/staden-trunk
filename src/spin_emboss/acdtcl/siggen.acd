package require Iwidgets
namespace eval ::EMBOSS::siggen {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_siggen*Xentry.entry.width 30
option add *e_siggen*Entryfield.width 30
option add *e_siggen*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) siggen
    set w [xtoplevel .e_siggen -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - siggen}
    label $w._title -text {Generates a sparse protein signature from an alignment and residue contact data.}
    pack $w._title -side top -fill both
    set vars(siggen._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments algpath
    iwidgets::entryfield $w.algpath \
	-textvariable [namespace current]::vars(algpath) \
	-labeltext [subst {Location of scop structure-based sequence alignment files (input)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.algpath component entry] -sticky nse
    set vars(algpath) [subst ./]
    pack $w.algpath -side top -fill both
    set vars(algpath.path) $w.algpath
    set vars(algpath.required)  1
    set vars(algpath._type) string

    lappend arguments algextn
    iwidgets::entryfield $w.algextn \
	-textvariable [namespace current]::vars(algextn) \
	-labeltext [subst {Extension of alignment files}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.algextn component entry] -sticky nse
    set vars(algextn) [subst .salign]
    pack $w.algextn -side top -fill both
    set vars(algextn.path) $w.algextn
    set vars(algextn.required)  1
    set vars(algextn._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments sparsity
    iwidgets::entryfield $w.sparsity \
	-validate integer \
	-textvariable [namespace current]::vars(sparsity) \
	-labeltext [subst {% sparsity of signature}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sparsity component entry] -sticky nse
    set vars(sparsity) [subst 10]
    pack $w.sparsity -side top -fill both
    set vars(sparsity.path) $w.sparsity
    set vars(sparsity.required)  1
    set vars(sparsity._type) integer

    lappend arguments randomise
    checkbutton $w.randomise \
	-text [subst {Generate a randomised signature}]\
	-variable [namespace current]::vars(randomise)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.randomise -side top -anchor w
    set vars(randomise) [subst 0]
    set vars(randomise.path) $w.randomise
    set vars(randomise.required)  0
    set vars(randomise._type) bool

    lappend arguments seqoption
    iwidgets::scrolledlistbox $w.seqoption \
	-exportselection 0\
	-labeltext [subst {Sequence variability scoring method}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] seqoption"\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    pack $w.seqoption -side top -fill both -expand 1
    set vars(seqoption.mapping1) {None 3 {Substitution matrix} 1 {Residue class} 2}
    set vars(seqoption.mapping2) {1 {Substitution matrix} 2 {Residue class} 3 None}
    eval $w.seqoption insert end {{Substitution matrix}} {{Residue class}} None
    set vars(seqoption.path) $w.seqoption
    set vars(seqoption.required)  0
    set vars(seqoption.delimiter) ,
    trace variable vars(seqoption) w  "::EMBOSS::list_multi_changed [namespace current] seqoption"
    set vars(seqoption) [subst 3]
    set vars(seqoption._type) list_multi
    set vars(seqoption.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] seqoption"

    lappend arguments datafile
    set vars(datafile.protein) [subst 1]
    iwidgets::combobox $w.datafile\
	-textvariable [namespace current]::vars(datafile)\
	-labeltext [subst {Substitution matrix to be used}]
    eval $w.datafile insert list end [list_matrices p]
    grid [$w.datafile component entry] -sticky nse
    $w.datafile delete entry 0 end
    $w.datafile insert entry end [subst EBLOSUM62]
    $w.datafile configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(seqoption)==1)}]}]]]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  0
    set vars(datafile._type) matrixf
    set vars(datafile.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(seqoption)==1)}]]}
    trace variable vars(seqoption) w  "::EMBOSS::reset_needed [namespace current] datafile"

    lappend arguments conoption
    iwidgets::scrolledlistbox $w.conoption \
	-exportselection 0\
	-labeltext [subst {Residue contacts scoring method}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] conoption"\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    pack $w.conoption -side top -fill both -expand 1
    set vars(conoption.mapping1) {None 4 Number 1 {Number and conservation} 3 Conservation 2}
    set vars(conoption.mapping2) {4 None 1 Number 2 Conservation 3 {Number and conservation}}
    eval $w.conoption insert end Number Conservation {{Number and conservation}} None
    set vars(conoption.path) $w.conoption
    set vars(conoption.required)  0
    set vars(conoption.delimiter) ,
    trace variable vars(conoption) w  "::EMBOSS::list_multi_changed [namespace current] conoption"
    set vars(conoption) [subst 4]
    set vars(conoption._type) list_multi
    set vars(conoption.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] conoption"

    lappend arguments filtercon
    checkbutton $w.filtercon \
	-text [subst {Ignore alignment positions making less than a threshold number of contacts}]\
	-variable [namespace current]::vars(filtercon)\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    pack $w.filtercon -side top -anchor w
    set vars(filtercon) [subst 0]
    set vars(filtercon.path) $w.filtercon
    set vars(filtercon.required)  0
    set vars(filtercon._type) bool
    set vars(filtercon.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] filtercon"

    lappend arguments conthresh
    iwidgets::entryfield $w.conthresh \
	-validate integer \
	-textvariable [namespace current]::vars(conthresh) \
	-labeltext [subst {Threshold contact number}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(filtercon)}]}]]]
    grid [$w.conthresh component entry] -sticky nse
    set vars(conthresh) [subst 10]
    pack $w.conthresh -side top -fill both
    set vars(conthresh.path) $w.conthresh
    set vars(conthresh.required)  0
    set vars(conthresh._type) integer
    set vars(conthresh.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(filtercon)}]]}
    trace variable vars(filtercon) w  "::EMBOSS::reset_needed [namespace current] conthresh"

    lappend arguments conpath
    iwidgets::entryfield $w.conpath \
	-textvariable [namespace current]::vars(conpath) \
	-labeltext [subst {Location of contact files (input)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    grid [$w.conpath component entry] -sticky nse
    set vars(conpath) [subst ./]
    pack $w.conpath -side top -fill both
    set vars(conpath.path) $w.conpath
    set vars(conpath.required)  0
    set vars(conpath._type) string
    set vars(conpath.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] conpath"

    lappend arguments conextn
    iwidgets::entryfield $w.conextn \
	-textvariable [namespace current]::vars(conextn) \
	-labeltext [subst {Extension of contact files}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    grid [$w.conextn component entry] -sticky nse
    set vars(conextn) [subst .con]
    pack $w.conextn -side top -fill both
    set vars(conextn.path) $w.conextn
    set vars(conextn.required)  0
    set vars(conextn._type) string
    set vars(conextn.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] conextn"

    lappend arguments cpdbpath
    iwidgets::entryfield $w.cpdbpath \
	-textvariable [namespace current]::vars(cpdbpath) \
	-labeltext [subst {Location of domain coordinate files (embl format input)}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    grid [$w.cpdbpath component entry] -sticky nse
    set vars(cpdbpath) [subst ./]
    pack $w.cpdbpath -side top -fill both
    set vars(cpdbpath.path) $w.cpdbpath
    set vars(cpdbpath.required)  0
    set vars(cpdbpath._type) string
    set vars(cpdbpath.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] cpdbpath"

    lappend arguments cpdbextn
    iwidgets::entryfield $w.cpdbextn \
	-textvariable [namespace current]::vars(cpdbextn) \
	-labeltext [subst {Extension of coordinate files}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    grid [$w.cpdbextn component entry] -sticky nse
    set vars(cpdbextn) [subst .pxyz]
    pack $w.cpdbextn -side top -fill both
    set vars(cpdbextn.path) $w.cpdbextn
    set vars(cpdbextn.required)  0
    set vars(cpdbextn._type) string
    set vars(cpdbextn.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] cpdbextn"

    lappend arguments filterpsim
    checkbutton $w.filterpsim \
	-text [subst {Ignore alignment postitions with post_similar value of 0}]\
	-variable [namespace current]::vars(filterpsim)\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(randomise))}]}]]]
    pack $w.filterpsim -side top -anchor w
    set vars(filterpsim) [subst 0]
    set vars(filterpsim.path) $w.filterpsim
    set vars(filterpsim.required)  0
    set vars(filterpsim._type) bool
    set vars(filterpsim.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(randomise))}]]}
    trace variable vars(randomise) w  "::EMBOSS::reset_needed [namespace current] filterpsim"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments sigpath
    iwidgets::entryfield $w.sigpath \
	-textvariable [namespace current]::vars(sigpath) \
	-labeltext [subst {Location of signature files (output)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sigpath component entry] -sticky nse
    set vars(sigpath) [subst ./]
    pack $w.sigpath -side top -fill both
    set vars(sigpath.path) $w.sigpath
    set vars(sigpath.required)  1
    set vars(sigpath._type) string

    lappend arguments sigextn
    iwidgets::entryfield $w.sigextn \
	-textvariable [namespace current]::vars(sigextn) \
	-labeltext [subst {Extension of signature files}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sigextn component entry] -sticky nse
    set vars(sigextn) [subst .sig]
    pack $w.sigextn -side top -fill both
    set vars(sigextn.path) $w.sigextn
    set vars(sigextn.required)  1
    set vars(sigextn._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/siggen.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

