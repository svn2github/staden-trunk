package require Iwidgets
namespace eval ::EMBOSS::tfscan {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_tfscan*Xentry.entry.width 30
option add *e_tfscan*Entryfield.width 30
option add *e_tfscan*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) tfscan
    set w [xtoplevel .e_tfscan -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - tfscan}
    label $w._title -text {Scans DNA sequences for transcription factors}
    pack $w._title -side top -fill both
    set vars(tfscan._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments menu
    iwidgets::combobox $w.menu\
	-textvariable [namespace current]::vars(menu.name)\
	-labeltext [subst {Select class}]
    trace variable vars(menu.name) w  "::EMBOSS::list_changed [namespace current] menu"
    eval $w.menu insert list end fungi insect plant vertebrate other
    set vars(menu.mapping1) {vertebrate V fungi F other O insect I plant P}
    set vars(menu.mapping2) {P plant I insect V vertebrate F fungi O other}
    grid [$w.menu component entry] -sticky nse
    $w.menu delete entry 0 end
    array set tmpmap $vars(menu.mapping2)
    set def [subst V]
    catch {set def $tmpmap($def)}
    set vars(menu) $def
    $w.menu insert entry end $def
    $w.menu configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.menu -side top -fill both
    set vars(menu.path) $w.menu
    set vars(menu.required)  1
    set vars(menu.delimiter) ,
    set vars(menu._type) list

    lappend arguments mismatch
    iwidgets::entryfield $w.mismatch \
	-validate integer \
	-textvariable [namespace current]::vars(mismatch) \
	-labeltext [subst {Number of mismatches}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.mismatch component entry] -sticky nse
    set vars(mismatch) [subst 0]
    pack $w.mismatch -side top -fill both
    set vars(mismatch.minimum) [subst 0]
    set vars(mismatch.path) $w.mismatch
    set vars(mismatch.required)  1
    set vars(mismatch._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst tfscan0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/tfscan.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

