package require Iwidgets
namespace eval ::EMBOSS::iep {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_iep*Xentry.entry.width 30
option add *e_iep*Entryfield.width 30
option add *e_iep*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) iep
    set w [xtoplevel .e_iep -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - iep}
    label $w._title -text {Calculates the isoelectric point of a protein}
    pack $w._title -side top -fill both
    set vars(iep._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequencea
    set vars(sequencea)       [get_active_seq_id 1]
    if {$vars(sequencea) == -1} {set vars(sequencea) [get_active_seq_id 1]}
    set vars(sequencea.name)  [seq_info $vars(sequencea) name]
    sequence_changed [namespace current] sequencea
    set vars(sequencea.type) [subst pureprotein]
    seq_id $w.sequencea \
	-textvariable [namespace current]::vars(sequencea.name)\
	-start_value $vars(sequencea.begin)\
	-end_value $vars(sequencea.end)\
	-to [seq_info $vars(sequencea) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequencea $w.sequencea}"
    set vars(sequencea) [subst {}]
    pack $w.sequencea -side top -fill both
    set vars(sequencea.path) $w.sequencea
    set vars(sequencea.required)  1
    trace variable vars(sequencea.name) w  "::EMBOSS::sequence_changed [namespace current] sequencea"
    set vars(sequencea._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments step
    iwidgets::entryfield $w.step \
	-validate real \
	-textvariable [namespace current]::vars(step) \
	-labeltext [subst {pH step value}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.step component entry] -sticky nse
    set vars(step) [subst .5]
    pack $w.step -side top -fill both
    set vars(step.minimum) [subst .01]
    set vars(step.maximum) [subst 1.]
    set vars(step.path) $w.step
    set vars(step.required)  0
    set vars(step._type) float

    lappend arguments amino
    iwidgets::entryfield $w.amino \
	-validate integer \
	-textvariable [namespace current]::vars(amino) \
	-labeltext [subst {Number of N-termini}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.amino component entry] -sticky nse
    set vars(amino) [subst 1]
    pack $w.amino -side top -fill both
    set vars(amino.path) $w.amino
    set vars(amino.required)  0
    set vars(amino._type) integer

    lappend arguments termini
    checkbutton $w.termini \
	-text [subst {Include charge at N and C terminus}]\
	-variable [namespace current]::vars(termini)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.termini -side top -anchor w
    set vars(termini) [subst 1]
    set vars(termini.path) $w.termini
    set vars(termini.required)  0
    set vars(termini._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments plot
    checkbutton $w.plot \
	-text [subst {Plot charge vs pH}]\
	-variable [namespace current]::vars(plot)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plot -side top -anchor w
    set vars(plot) [subst 0]
    set vars(plot.path) $w.plot
    set vars(plot.required)  0
    set vars(plot._type) bool

    lappend arguments report
    checkbutton $w.report \
	-text [subst {Write results to a file}]\
	-variable [namespace current]::vars(report)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.report -side top -anchor w
    set vars(report) [subst 1]
    set vars(report.path) $w.report
    set vars(report.required)  0
    set vars(report._type) bool

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(plot)}]}]]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) xygraph
    set vars(graph.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(plot)}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] graph"

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(report)}]}]]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst iep0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) outfile
    set vars(outfile.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(report)}]]}
    trace variable vars(report) w  "::EMBOSS::reset_needed [namespace current] outfile"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/iep.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

