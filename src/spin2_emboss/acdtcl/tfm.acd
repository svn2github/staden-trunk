package require Iwidgets
namespace eval ::EMBOSS::tfm {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_tfm*Xentry.entry.width 30
option add *e_tfm*Entryfield.width 30
option add *e_tfm*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) tfm
    set w [xtoplevel .e_tfm -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - tfm}
    label $w._title -text {Displays a program's help documentation manual}
    pack $w._title -side top -fill both
    set vars(tfm._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments program
    iwidgets::entryfield $w.program \
	-textvariable [namespace current]::vars(program) \
	-labeltext [subst {Program to search for}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.program component entry] -sticky nse
    set vars(program) [subst {}]
    pack $w.program -side top -fill both
    set vars(program.path) $w.program
    set vars(program.required)  1
    set vars(program._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output program details to a file}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst stdout]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) outfile

    lappend arguments html
    checkbutton $w.html \
	-text [subst {Format the output for HTML}]\
	-variable [namespace current]::vars(html)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.html -side top -anchor w
    set vars(html) [subst 0]
    set vars(html.path) $w.html
    set vars(html.required)  0
    set vars(html._type) bool

    lappend arguments more
    checkbutton $w.more \
	-text [subst {Display a screenful at a time}]\
	-variable [namespace current]::vars(more)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.more -side top -anchor w
    set vars(more) [subst {[expr {(!$vars(html))}]}]
    set vars(more.path) $w.more
    set vars(more.required)  0
    set vars(more.orig) $vars(more)
    set vars(more.expr) {[expr {(!$vars(html))}]}
    trace variable vars(html) w  "::EMBOSS::reset_value [namespace current] more"
    set vars(more._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/tfm.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

