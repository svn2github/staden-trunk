package require Iwidgets
namespace eval ::EMBOSS::listor {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_listor*Xentry.entry.width 30
option add *e_listor*Entryfield.width 30
option add *e_listor*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) listor
    set w [xtoplevel .e_listor -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - listor}
    label $w._title -text {Writes a list file of the logical OR of two sets of sequences}
    pack $w._title -side top -fill both
    set vars(listor._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments firstset
    set vars(firstset)       [get_active_seq_id 1]
    if {$vars(firstset) == -1} {set vars(firstset) [get_active_seq_id 1]}
    set vars(firstset.name)  [seq_info $vars(firstset) name]
    sequence_changed [namespace current] firstset
    set vars(firstset.type) [subst any]
    seq_id $w.firstset \
	-textvariable [namespace current]::vars(firstset.name)\
	-start_value $vars(firstset.begin)\
	-end_value $vars(firstset.end)\
	-to [seq_info $vars(firstset) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] firstset $w.firstset}"
    set vars(firstset) [subst {}]
    pack $w.firstset -side top -fill both
    set vars(firstset.path) $w.firstset
    set vars(firstset.required)  1
    trace variable vars(firstset.name) w  "::EMBOSS::sequence_changed [namespace current] firstset"
   set vars(firstset.totweight) [subst 0]
    set vars(firstset._type) seqset

    lappend arguments secondset
    set vars(secondset)       [get_active_seq_id 2]
    if {$vars(secondset) == -1} {set vars(secondset) [get_active_seq_id 1]}
    set vars(secondset.name)  [seq_info $vars(secondset) name]
    sequence_changed [namespace current] secondset
    set vars(secondset.type) [subst any]
    seq_id $w.secondset \
	-textvariable [namespace current]::vars(secondset.name)\
	-start_value $vars(secondset.begin)\
	-end_value $vars(secondset.end)\
	-to [seq_info $vars(secondset) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] secondset $w.secondset}"
    set vars(secondset) [subst {}]
    pack $w.secondset -side top -fill both
    set vars(secondset.path) $w.secondset
    set vars(secondset.required)  1
    trace variable vars(secondset.name) w  "::EMBOSS::sequence_changed [namespace current] secondset"
   set vars(secondset.totweight) [subst 0]
    set vars(secondset._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments operator
    iwidgets::combobox $w.operator\
	-textvariable [namespace current]::vars(operator.name)\
	-labeltext [subst {Enter the logical operator to combine the sequences}]
    trace variable vars(operator.name) w  "::EMBOSS::list_changed [namespace current] operator"
    eval $w.operator insert list end {{OR - merger of both sets}} {{AND - only those in both sets}} {{XOR - only those not in both sets}} {{NOT - those of the first set that are not in the second}}
    set vars(operator.mapping1) {{AND - only those in both sets} A {NOT - those of the first set that are not in the second} N {OR - merger of both sets} O {XOR - only those not in both sets} X}
    set vars(operator.mapping2) {X {XOR - only those not in both sets} A {AND - only those in both sets} N {NOT - those of the first set that are not in the second} O {OR - merger of both sets}}
    grid [$w.operator component entry] -sticky nse
    $w.operator delete entry 0 end
    array set tmpmap $vars(operator.mapping2)
    set def [subst OR]
    catch {set def $tmpmap($def)}
    set vars(operator) $def
    $w.operator insert entry end $def
    $w.operator configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.operator -side top -fill both
    set vars(operator.path) $w.operator
    set vars(operator.required)  0
    set vars(operator.delimiter) ,
    set vars(operator._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outlist
    xentry $w.outlist \
	-label [subst {Output list file}]\
	-textvariable [namespace current]::vars(outlist) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outlist delete 0 end
    $w.outlist insert end [subst listor0.out]
    pack $w.outlist -side top -fill both
    set vars(outlist.path) $w.outlist
    set vars(outlist.required)  1
    set vars(outlist._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/listor.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

