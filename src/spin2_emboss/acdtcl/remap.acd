package require Iwidgets
namespace eval ::EMBOSS::remap {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_remap*Xentry.entry.width 30
option add *e_remap*Entryfield.width 30
option add *e_remap*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) remap
    set w [xtoplevel .e_remap -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - remap}
    label $w._title -text {Display a sequence with restriction cut sites, translation etc..}
    pack $w._title -side top -fill both
    set vars(remap._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments enzymes
    iwidgets::entryfield $w.enzymes \
	-textvariable [namespace current]::vars(enzymes) \
	-labeltext [subst {Comma separated enzyme list}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.enzymes component entry] -sticky nse
    set vars(enzymes) [subst all]
    pack $w.enzymes -side top -fill both
    set vars(enzymes.path) $w.enzymes
    set vars(enzymes.required)  1
    set vars(enzymes._type) string

    lappend arguments sitelen
    iwidgets::entryfield $w.sitelen \
	-validate integer \
	-textvariable [namespace current]::vars(sitelen) \
	-labeltext [subst {Minimum recognition site length}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sitelen component entry] -sticky nse
    set vars(sitelen) [subst 4]
    pack $w.sitelen -side top -fill both
    set vars(sitelen.minimum) [subst 2]
    set vars(sitelen.maximum) [subst 20]
    set vars(sitelen.path) $w.sitelen
    set vars(sitelen.required)  1
    set vars(sitelen._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments mincuts
    iwidgets::entryfield $w.mincuts \
	-validate integer \
	-textvariable [namespace current]::vars(mincuts) \
	-labeltext [subst {Minimum cuts per RE}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.mincuts component entry] -sticky nse
    set vars(mincuts) [subst 1]
    pack $w.mincuts -side top -fill both
    set vars(mincuts.minimum) [subst 1]
    set vars(mincuts.maximum) [subst 1000]
    set vars(mincuts.path) $w.mincuts
    set vars(mincuts.required)  0
    set vars(mincuts._type) integer

    lappend arguments maxcuts
    iwidgets::entryfield $w.maxcuts \
	-validate integer \
	-textvariable [namespace current]::vars(maxcuts) \
	-labeltext [subst {Maximum cuts per RE}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxcuts component entry] -sticky nse
    set vars(maxcuts) [subst 2000000000]
    pack $w.maxcuts -side top -fill both
    set vars(maxcuts.minimum) [subst {[expr {$vars(mincuts)}]}]
    set vars(maxcuts.minimum.orig) $vars(maxcuts.minimum)
    set vars(maxcuts.minimum.expr) {[expr {$vars(mincuts)}]}
    trace variable vars(mincuts) w  "::EMBOSS::reset_value [namespace current] maxcuts.minimum"
    set vars(maxcuts.maximum) [subst 2000000000]
    set vars(maxcuts.path) $w.maxcuts
    set vars(maxcuts.required)  0
    set vars(maxcuts._type) integer

    lappend arguments single
    checkbutton $w.single \
	-text [subst {Force single site only cuts}]\
	-variable [namespace current]::vars(single)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.single -side top -anchor w
    set vars(single) [subst 0]
    set vars(single.path) $w.single
    set vars(single.required)  0
    set vars(single._type) bool

    lappend arguments blunt
    checkbutton $w.blunt \
	-text [subst {Allow blunt end cutters}]\
	-variable [namespace current]::vars(blunt)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.blunt -side top -anchor w
    set vars(blunt) [subst 1]
    set vars(blunt.path) $w.blunt
    set vars(blunt.required)  0
    set vars(blunt._type) bool

    lappend arguments sticky
    checkbutton $w.sticky \
	-text [subst {Allow sticky end cutters}]\
	-variable [namespace current]::vars(sticky)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.sticky -side top -anchor w
    set vars(sticky) [subst 1]
    set vars(sticky.path) $w.sticky
    set vars(sticky.required)  0
    set vars(sticky._type) bool

    lappend arguments ambiguity
    checkbutton $w.ambiguity \
	-text [subst {Allow ambiguous matches}]\
	-variable [namespace current]::vars(ambiguity)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.ambiguity -side top -anchor w
    set vars(ambiguity) [subst 1]
    set vars(ambiguity.path) $w.ambiguity
    set vars(ambiguity.required)  0
    set vars(ambiguity._type) bool

    lappend arguments plasmid
    checkbutton $w.plasmid \
	-text [subst {Allow circular DNA}]\
	-variable [namespace current]::vars(plasmid)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plasmid -side top -anchor w
    set vars(plasmid) [subst 0]
    set vars(plasmid.path) $w.plasmid
    set vars(plasmid.required)  0
    set vars(plasmid._type) bool

    lappend arguments commercial
    checkbutton $w.commercial \
	-text [subst {Only enzymes with suppliers}]\
	-variable [namespace current]::vars(commercial)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.commercial -side top -anchor w
    set vars(commercial) [subst 1]
    set vars(commercial.path) $w.commercial
    set vars(commercial.required)  0
    set vars(commercial._type) bool

    lappend arguments table
    iwidgets::combobox $w.table\
	-textvariable [namespace current]::vars(table.name)\
	-labeltext [subst {Code to use}]
    trace variable vars(table.name) w  "::EMBOSS::list_changed [namespace current] table"
    eval $w.table insert list end Standard {{Standard (with alternative initiation codons)}} {{Vertebrate Mitochondrial}} {{Yeast Mitochondrial}} {{Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma}} {{Invertebrate Mitochondrial}} {{Ciliate Macronuclear and Dasycladacean}} {{Echinoderm Mitochondrial}} {{Euplotid Nuclear}} Bacterial {{Alternative Yeast Nuclear}} {{Ascidian Mitochondrial}} {{Flatworm Mitochondrial}} {{Blepharisma Macronuclear}} {{Chlorophycean Mitochondrial}} {{Trematode Mitochondrial}} {{Scenedesmus obliquus}} {{Thraustochytrium Mitochondrial}}
    set vars(table.mapping1) {{Invertebrate Mitochondrial} 5 {Flatworm Mitochondrial} 14 Standard 0 {Vertebrate Mitochondrial} 2 {Trematode Mitochondrial} 21 {Standard (with alternative initiation codons)} 1 {Thraustochytrium Mitochondrial} 23 {Chlorophycean Mitochondrial} 16 {Blepharisma Macronuclear} 15 {Ciliate Macronuclear and Dasycladacean} 6 Bacterial 11 {Alternative Yeast Nuclear} 12 {Euplotid Nuclear} 10 {Ascidian Mitochondrial} 13 {Scenedesmus obliquus} 22 {Yeast Mitochondrial} 3 {Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma} 4 {Echinoderm Mitochondrial} 9}
    set vars(table.mapping2) {0 Standard 1 {Standard (with alternative initiation codons)} 2 {Vertebrate Mitochondrial} 21 {Trematode Mitochondrial} 3 {Yeast Mitochondrial} 22 {Scenedesmus obliquus} 4 {Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma} 23 {Thraustochytrium Mitochondrial} 5 {Invertebrate Mitochondrial} 6 {Ciliate Macronuclear and Dasycladacean} 9 {Echinoderm Mitochondrial} 10 {Euplotid Nuclear} 11 Bacterial 12 {Alternative Yeast Nuclear} 13 {Ascidian Mitochondrial} 14 {Flatworm Mitochondrial} 15 {Blepharisma Macronuclear} 16 {Chlorophycean Mitochondrial}}
    grid [$w.table component entry] -sticky nse
    $w.table delete entry 0 end
    array set tmpmap $vars(table.mapping2)
    set def [subst 0]
    catch {set def $tmpmap($def)}
    set vars(table) $def
    $w.table insert entry end $def
    $w.table configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.table -side top -fill both
    set vars(table.path) $w.table
    set vars(table.required)  0
    set vars(table.delimiter) {;}
    set vars(table._type) list

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output sequence details to a file}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst remap0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments cutlist
    checkbutton $w.cutlist \
	-text [subst {List the enzymes that cut}]\
	-variable [namespace current]::vars(cutlist)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.cutlist -side top -anchor w
    set vars(cutlist) [subst 1]
    set vars(cutlist.path) $w.cutlist
    set vars(cutlist.required)  0
    set vars(cutlist._type) bool

    lappend arguments flatreformat
    checkbutton $w.flatreformat \
	-text [subst {Display RE sites in flat format}]\
	-variable [namespace current]::vars(flatreformat)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.flatreformat -side top -anchor w
    set vars(flatreformat) [subst 0]
    set vars(flatreformat.path) $w.flatreformat
    set vars(flatreformat.required)  0
    set vars(flatreformat._type) bool

    lappend arguments limit
    checkbutton $w.limit \
	-text [subst {Limits reports to one isoschizomer}]\
	-variable [namespace current]::vars(limit)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.limit -side top -anchor w
    set vars(limit) [subst 1]
    set vars(limit.path) $w.limit
    set vars(limit.required)  0
    set vars(limit._type) bool

    lappend arguments preferred
    checkbutton $w.preferred \
	-text [subst {Report preferred isoschizomers}]\
	-variable [namespace current]::vars(preferred)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.preferred -side top -anchor w
    set vars(preferred) [subst 0]
    set vars(preferred.path) $w.preferred
    set vars(preferred.required)  0
    set vars(preferred._type) bool

    lappend arguments translation
    checkbutton $w.translation \
	-text [subst {Display translation}]\
	-variable [namespace current]::vars(translation)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.translation -side top -anchor w
    set vars(translation) [subst 1]
    set vars(translation.path) $w.translation
    set vars(translation.required)  0
    set vars(translation._type) bool

    lappend arguments reverse
    checkbutton $w.reverse \
	-text [subst {Display cut sites and translation of reverse sense}]\
	-variable [namespace current]::vars(reverse)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.reverse -side top -anchor w
    set vars(reverse) [subst 1]
    set vars(reverse.path) $w.reverse
    set vars(reverse.required)  0
    set vars(reverse._type) bool

    lappend arguments orfminsize
    iwidgets::entryfield $w.orfminsize \
	-validate integer \
	-textvariable [namespace current]::vars(orfminsize) \
	-labeltext [subst {Minimum size of ORFs}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.orfminsize component entry] -sticky nse
    set vars(orfminsize) [subst 0]
    pack $w.orfminsize -side top -fill both
    set vars(orfminsize.minimum) [subst 0]
    set vars(orfminsize.path) $w.orfminsize
    set vars(orfminsize.required)  0
    set vars(orfminsize._type) integer

    lappend arguments uppercase
    iwidgets::entryfield $w.uppercase \
	-textvariable [namespace current]::vars(uppercase) \
	-labeltext [subst {Regions to put in uppercase (eg: 4-57,78-94)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.uppercase component entry] -sticky nse
    set vars(uppercase) [subst {}]
    pack $w.uppercase -side top -fill both
    set vars(uppercase.path) $w.uppercase
    set vars(uppercase.required)  0
    set vars(uppercase._type) range

    lappend arguments highlight
    iwidgets::entryfield $w.highlight \
	-textvariable [namespace current]::vars(highlight) \
	-labeltext [subst {Regions to colour in HTML (eg: 4-57 red 78-94 green)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.highlight component entry] -sticky nse
    set vars(highlight) [subst {}]
    pack $w.highlight -side top -fill both
    set vars(highlight.path) $w.highlight
    set vars(highlight.required)  0
    set vars(highlight._type) range

    lappend arguments threeletter
    checkbutton $w.threeletter \
	-text [subst {Display protein sequences in three-letter code}]\
	-variable [namespace current]::vars(threeletter)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.threeletter -side top -anchor w
    set vars(threeletter) [subst 0]
    set vars(threeletter.path) $w.threeletter
    set vars(threeletter.required)  0
    set vars(threeletter._type) bool

    lappend arguments number
    checkbutton $w.number \
	-text [subst {Number the sequences}]\
	-variable [namespace current]::vars(number)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.number -side top -anchor w
    set vars(number) [subst 0]
    set vars(number.path) $w.number
    set vars(number.required)  0
    set vars(number._type) bool

    lappend arguments width
    iwidgets::entryfield $w.width \
	-validate integer \
	-textvariable [namespace current]::vars(width) \
	-labeltext [subst {Width of sequence to display}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.width component entry] -sticky nse
    set vars(width) [subst 60]
    pack $w.width -side top -fill both
    set vars(width.minimum) [subst 1]
    set vars(width.path) $w.width
    set vars(width.required)  0
    set vars(width._type) integer

    lappend arguments length
    iwidgets::entryfield $w.length \
	-validate integer \
	-textvariable [namespace current]::vars(length) \
	-labeltext [subst {Line length of page (0 for indefinite)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.length component entry] -sticky nse
    set vars(length) [subst 0]
    pack $w.length -side top -fill both
    set vars(length.minimum) [subst 0]
    set vars(length.path) $w.length
    set vars(length.required)  0
    set vars(length._type) integer

    lappend arguments margin
    iwidgets::entryfield $w.margin \
	-validate integer \
	-textvariable [namespace current]::vars(margin) \
	-labeltext [subst {Margin around sequence for numbering}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.margin component entry] -sticky nse
    set vars(margin) [subst 10]
    pack $w.margin -side top -fill both
    set vars(margin.minimum) [subst 0]
    set vars(margin.path) $w.margin
    set vars(margin.required)  0
    set vars(margin._type) integer

    lappend arguments name
    checkbutton $w.name \
	-text [subst {Display sequence ID}]\
	-variable [namespace current]::vars(name)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.name -side top -anchor w
    set vars(name) [subst 1]
    set vars(name.path) $w.name
    set vars(name.required)  0
    set vars(name._type) bool

    lappend arguments description
    checkbutton $w.description \
	-text [subst {Display description}]\
	-variable [namespace current]::vars(description)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.description -side top -anchor w
    set vars(description) [subst 1]
    set vars(description.path) $w.description
    set vars(description.required)  0
    set vars(description._type) bool

    lappend arguments offset
    iwidgets::entryfield $w.offset \
	-validate integer \
	-textvariable [namespace current]::vars(offset) \
	-labeltext [subst {Offset to start numbering the sequence from}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.offset component entry] -sticky nse
    set vars(offset) [subst 1]
    pack $w.offset -side top -fill both
    set vars(offset.path) $w.offset
    set vars(offset.required)  0
    set vars(offset._type) integer

    lappend arguments html
    checkbutton $w.html \
	-text [subst {Use HTML formatting}]\
	-variable [namespace current]::vars(html)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.html -side top -anchor w
    set vars(html) [subst 0]
    set vars(html.path) $w.html
    set vars(html.required)  0
    set vars(html._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/remap.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

