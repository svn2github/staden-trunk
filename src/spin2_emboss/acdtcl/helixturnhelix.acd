package require Iwidgets
namespace eval ::EMBOSS::helixturnhelix {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_helixturnhelix*Xentry.entry.width 30
option add *e_helixturnhelix*Entryfield.width 30
option add *e_helixturnhelix*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) helixturnhelix
    set w [xtoplevel .e_helixturnhelix -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - helixturnhelix}
    label $w._title -text {Report nucleic acid binding motifs}
    pack $w._title -side top -fill both
    set vars(helixturnhelix._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst PureProtein]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments mean
    iwidgets::entryfield $w.mean \
	-validate real \
	-textvariable [namespace current]::vars(mean) \
	-labeltext [subst {Mean value}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.mean component entry] -sticky nse
    set vars(mean) [subst 238.71]
    pack $w.mean -side top -fill both
    set vars(mean.minimum) [subst 1.]
    set vars(mean.maximum) [subst 10000.]
    set vars(mean.path) $w.mean
    set vars(mean.required)  0
    set vars(mean._type) float

    lappend arguments sd
    iwidgets::entryfield $w.sd \
	-validate real \
	-textvariable [namespace current]::vars(sd) \
	-labeltext [subst {Standard Deviation value}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sd component entry] -sticky nse
    set vars(sd) [subst 293.61]
    pack $w.sd -side top -fill both
    set vars(sd.minimum) [subst 1.]
    set vars(sd.maximum) [subst 10000.]
    set vars(sd.path) $w.sd
    set vars(sd.required)  0
    set vars(sd._type) float

    lappend arguments minsd
    iwidgets::entryfield $w.minsd \
	-validate real \
	-textvariable [namespace current]::vars(minsd) \
	-labeltext [subst {Minimum SD}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minsd component entry] -sticky nse
    set vars(minsd) [subst 2.5]
    pack $w.minsd -side top -fill both
    set vars(minsd.minimum) [subst 0.]
    set vars(minsd.maximum) [subst 100.]
    set vars(minsd.path) $w.minsd
    set vars(minsd.required)  0
    set vars(minsd._type) float

    lappend arguments eightyseven
    checkbutton $w.eightyseven \
	-text [subst {Use the old (1987) weight data}]\
	-variable [namespace current]::vars(eightyseven)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.eightyseven -side top -anchor w
    set vars(eightyseven) [subst 0]
    set vars(eightyseven.path) $w.eightyseven
    set vars(eightyseven.required)  0
    set vars(eightyseven._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/helixturnhelix.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

