package require Iwidgets
namespace eval ::EMBOSS::charge {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_charge*Xentry.entry.width 30
option add *e_charge*Entryfield.width 30
option add *e_charge*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) charge
    set w [xtoplevel .e_charge -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - charge}
    label $w._title -text {Protein charge plot}
    pack $w._title -side top -fill both
    set vars(charge._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments seqall
    set vars(seqall)       [get_active_seq_id 1]
    if {$vars(seqall) == -1} {set vars(seqall) [get_active_seq_id 1]}
    set vars(seqall.name)  [seq_info $vars(seqall) name]
    sequence_changed [namespace current] seqall
    set vars(seqall.type) [subst protein]
    seq_id $w.seqall \
	-textvariable [namespace current]::vars(seqall.name)\
	-start_value $vars(seqall.begin)\
	-end_value $vars(seqall.end)\
	-to [seq_info $vars(seqall) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] seqall $w.seqall}"
    set vars(seqall) [subst {}]
    pack $w.seqall -side top -fill both
    set vars(seqall.path) $w.seqall
    set vars(seqall.required)  1
    trace variable vars(seqall.name) w  "::EMBOSS::sequence_changed [namespace current] seqall"
    set vars(seqall._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments window
    iwidgets::entryfield $w.window \
	-validate integer \
	-textvariable [namespace current]::vars(window) \
	-labeltext [subst Window]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.window component entry] -sticky nse
    set vars(window) [subst 5]
    pack $w.window -side top -fill both
    set vars(window.minimum) [subst 1]
    set vars(window.path) $w.window
    set vars(window.required)  0
    set vars(window._type) integer

    lappend arguments aadata
    iwidgets::entryfield $w.aadata \
	-textvariable [namespace current]::vars(aadata) \
	-labeltext [subst {Amino acid property data file name}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.aadata component entry] -sticky nse
    set vars(aadata) [subst Eamino.dat]
    pack $w.aadata -side top -fill both
    set vars(aadata.path) $w.aadata
    set vars(aadata.required)  0
    set vars(aadata._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments plot
    checkbutton $w.plot \
	-text [subst {Produce graphic}]\
	-variable [namespace current]::vars(plot)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plot -side top -anchor w
    set vars(plot) [subst 0]
    set vars(plot.path) $w.plot
    set vars(plot.required)  0
    set vars(plot._type) bool

    lappend arguments graph
    iwidgets::combobox $w.graph\
	-textvariable [namespace current]::vars(graph)\
	-labeltext [subst {Graphics output format}]
    eval $w.graph insert list end [list_graph_types]
    grid [$w.graph component entry] -sticky nse
    $w.graph delete entry 0 end
    $w.graph insert entry end [subst data]
    $w.graph configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(plot)}]}]]]
    pack $w.graph -side top -fill both
    set vars(graph.path) $w.graph
    set vars(graph.required)  0
    set vars(graph._type) xygraph
    set vars(graph.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(plot)}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] graph"

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {(!$vars(plot))}]}]]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst charge0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  0
    set vars(outfile._type) outfile
    set vars(outfile.needed_expr)  {[::EMBOSS::convert_bool [expr {(!$vars(plot))}]]}
    trace variable vars(plot) w  "::EMBOSS::reset_needed [namespace current] outfile"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/charge.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

