package require Iwidgets
namespace eval ::EMBOSS::showorf {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_showorf*Xentry.entry.width 30
option add *e_showorf*Entryfield.width 30
option add *e_showorf*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) showorf
    set w [xtoplevel .e_showorf -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - showorf}
    label $w._title -text {Pretty output of DNA translations}
    pack $w._title -side top -fill both
    set vars(showorf._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst DNA]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments frames
    iwidgets::scrolledlistbox $w.frames \
	-exportselection 0\
	-labeltext [subst {Select Frames To Translate}] \
	-hscrollmode dynamic\
	-vscrollmode dynamic\
	-selectmode extended\
	-selectioncommand "::EMBOSS::listbox_selected [namespace current] frames"\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.frames -side top -fill both -expand 1
    set vars(frames.mapping1) {R2 5 F2 2 None 0 R3 6 F3 3 R1 4 F1 1}
    set vars(frames.mapping2) {4 R1 0 None 5 R2 1 F1 6 R3 2 F2 3 F3}
    eval $w.frames insert end None F1 F2 F3 R1 R2 R3
    set vars(frames.path) $w.frames
    set vars(frames.required)  1
    set vars(frames.delimiter) ,
    trace variable vars(frames) w  "::EMBOSS::list_multi_changed [namespace current] frames"
    set vars(frames) [subst 1,2,3,4,5,6]
    set vars(frames._type) list_multi

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments cfile
    iwidgets::combobox $w.cfile\
	-textvariable [namespace current]::vars(cfile)\
	-labeltext [subst {Codon usage file}]
    eval $w.cfile insert list end [list_codon_tables]
    grid [$w.cfile component entry] -sticky nse
    $w.cfile delete entry 0 end
    $w.cfile insert entry end [subst Ehum.cut]
    $w.cfile configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.cfile -side top -fill both
    set vars(cfile.path) $w.cfile
    set vars(cfile.required)  0
    set vars(cfile._type) codon

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst showorf0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    lappend arguments ruler
    checkbutton $w.ruler \
	-text [subst {Add a ruler}]\
	-variable [namespace current]::vars(ruler)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.ruler -side top -anchor w
    set vars(ruler) [subst 1]
    set vars(ruler.path) $w.ruler
    set vars(ruler.required)  0
    set vars(ruler._type) bool

    lappend arguments plabel
    checkbutton $w.plabel \
	-text [subst {Number translations}]\
	-variable [namespace current]::vars(plabel)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.plabel -side top -anchor w
    set vars(plabel) [subst 1]
    set vars(plabel.path) $w.plabel
    set vars(plabel.required)  0
    set vars(plabel._type) bool

    lappend arguments nlabel
    checkbutton $w.nlabel \
	-text [subst {Number DNA sequence}]\
	-variable [namespace current]::vars(nlabel)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.nlabel -side top -anchor w
    set vars(nlabel) [subst 1]
    set vars(nlabel.path) $w.nlabel
    set vars(nlabel.required)  0
    set vars(nlabel._type) bool

    lappend arguments width
    iwidgets::entryfield $w.width \
	-validate integer \
	-textvariable [namespace current]::vars(width) \
	-labeltext [subst {Width of screen}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.width component entry] -sticky nse
    set vars(width) [subst 50]
    pack $w.width -side top -fill both
    set vars(width.minimum) [subst 10]
    set vars(width.path) $w.width
    set vars(width.required)  0
    set vars(width._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/showorf.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

