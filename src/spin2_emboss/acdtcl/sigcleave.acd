package require Iwidgets
namespace eval ::EMBOSS::sigcleave {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_sigcleave*Xentry.entry.width 30
option add *e_sigcleave*Entryfield.width 30
option add *e_sigcleave*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) sigcleave
    set w [xtoplevel .e_sigcleave -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - sigcleave}
    label $w._title -text {Reports protein signal cleavage sites}
    pack $w._title -side top -fill both
    set vars(sigcleave._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst PureProtein]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments minweight
    iwidgets::entryfield $w.minweight \
	-validate real \
	-textvariable [namespace current]::vars(minweight) \
	-labeltext [subst {Minimum weight}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minweight component entry] -sticky nse
    set vars(minweight) [subst 3.5]
    pack $w.minweight -side top -fill both
    set vars(minweight.minimum) [subst 0.]
    set vars(minweight.maximum) [subst 100.]
    set vars(minweight.path) $w.minweight
    set vars(minweight.required)  1
    set vars(minweight._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments prokaryote
    checkbutton $w.prokaryote \
	-text [subst {Use prokaryotic cleavage data}]\
	-variable [namespace current]::vars(prokaryote)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.prokaryote -side top -anchor w
    set vars(prokaryote) [subst 0]
    set vars(prokaryote.path) $w.prokaryote
    set vars(prokaryote.required)  0
    set vars(prokaryote._type) bool

    lappend arguments pval
    iwidgets::entryfield $w.pval \
	-validate integer \
	-textvariable [namespace current]::vars(pval) \
	-labeltext [subst Pval]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pval component entry] -sticky nse
    set vars(pval) [subst -13]
    pack $w.pval -side top -fill both
    set vars(pval.minimum) [subst -13]
    set vars(pval.maximum) [subst -1]
    set vars(pval.path) $w.pval
    set vars(pval.required)  0
    set vars(pval._type) integer

    lappend arguments nval
    iwidgets::entryfield $w.nval \
	-validate integer \
	-textvariable [namespace current]::vars(nval) \
	-labeltext [subst Nval]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.nval component entry] -sticky nse
    set vars(nval) [subst {[expr {(15+$vars(pval))}]}]
    pack $w.nval -side top -fill both
    set vars(nval.minimum) [subst 1]
    set vars(nval.maximum) [subst {[expr {(15+$vars(pval))}]}]
    set vars(nval.maximum.orig) $vars(nval.maximum)
    set vars(nval.maximum.expr) {[expr {(15+$vars(pval))}]}
    trace variable vars(pval) w  "::EMBOSS::reset_value [namespace current] nval.maximum"
    set vars(nval.path) $w.nval
    set vars(nval.required)  0
    set vars(nval.orig) $vars(nval)
    set vars(nval.expr) {[expr {(15+$vars(pval))}]}
    trace variable vars(pval) w  "::EMBOSS::reset_value [namespace current] nval"
    set vars(nval._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Report output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst report0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) report

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/sigcleave.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

