package require Iwidgets
namespace eval ::EMBOSS::emma {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_emma*Xentry.entry.width 30
option add *e_emma*Entryfield.width 30
option add *e_emma*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) emma
    set w [xtoplevel .e_emma -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - emma}
    label $w._title -text {Multiple alignment program - interface to ClustalW program}
    pack $w._title -side top -fill both
    set vars(emma._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments inseqs
    set vars(inseqs)       [get_active_seq_id 1]
    if {$vars(inseqs) == -1} {set vars(inseqs) [get_active_seq_id 1]}
    set vars(inseqs.name)  [seq_info $vars(inseqs) name]
    sequence_changed [namespace current] inseqs
    set vars(inseqs.type) [subst gapany]
    seq_id $w.inseqs \
	-textvariable [namespace current]::vars(inseqs.name)\
	-start_value $vars(inseqs.begin)\
	-end_value $vars(inseqs.end)\
	-to [seq_info $vars(inseqs) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] inseqs $w.inseqs}"
    set vars(inseqs) [subst {}]
    pack $w.inseqs -side top -fill both
    set vars(inseqs.path) $w.inseqs
    set vars(inseqs.required)  1
    trace variable vars(inseqs.name) w  "::EMBOSS::sequence_changed [namespace current] inseqs"
    set vars(inseqs._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    iwidgets::tabnotebook $w.book_2 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_2 -side top -fill both
    set book(book_2) $w
    set page [$w.book_2 add \
	-label [subst {dendsection Section}]]
    $w.book_2 view [subst {dendsection Section}]
    lappend wlist $w
    set w $page

    lappend arguments onlydend
    checkbutton $w.onlydend \
	-text [subst {only produce dendrogram file}]\
	-variable [namespace current]::vars(onlydend)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.onlydend -side top -anchor w
    set vars(onlydend) [subst 0]
    set vars(onlydend.path) $w.onlydend
    set vars(onlydend.required)  0
    set vars(onlydend._type) bool

    lappend arguments dend
    checkbutton $w.dend \
	-text [subst {select if you want to do alignment using an old dendrogram}]\
	-variable [namespace current]::vars(dend)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.dend -side top -anchor w
    set vars(dend) [subst 0]
    set vars(dend.path) $w.dend
    set vars(dend.required)  0
    set vars(dend._type) bool

    lappend arguments dendfile
    iwidgets::entryfield $w.dendfile \
	-textvariable [namespace current]::vars(dendfile) \
	-labeltext [subst {name of old dendrogram file}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.dendfile component entry] -sticky nse
    set vars(dendfile) [subst NULL]
    pack $w.dendfile -side top -fill both
    set vars(dendfile.path) $w.dendfile
    set vars(dendfile.required)  0
    set vars(dendfile._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    lappend arguments insist
    checkbutton $w.insist \
	-text [subst {Insist that the sequence type is changed to protein}]\
	-variable [namespace current]::vars(insist)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.insist -side top -anchor w
    set vars(insist) [subst 0]
    set vars(insist.path) $w.insist
    set vars(insist.required)  0
    set vars(insist._type) bool

    set page [$w.book_2 add \
	-label [subst {slowsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments slowfast
    iwidgets::combobox $w.slowfast\
	-textvariable [namespace current]::vars(slowfast.name)\
	-labeltext [subst {Please select one}]
    trace variable vars(slowfast.name) w  "::EMBOSS::list_changed [namespace current] slowfast"
    eval $w.slowfast insert list end slow fast
    set vars(slowfast.mapping1) {slow s fast f}
    set vars(slowfast.mapping2) {f fast s slow}
    grid [$w.slowfast component entry] -sticky nse
    $w.slowfast delete entry 0 end
    array set tmpmap $vars(slowfast.mapping2)
    set def [subst s]
    catch {set def $tmpmap($def)}
    set vars(slowfast) $def
    $w.slowfast insert entry end $def
    $w.slowfast configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.slowfast -side top -fill both
    set vars(slowfast.path) $w.slowfast
    set vars(slowfast.required)  0
    set vars(slowfast.delimiter) ,
    set vars(slowfast._type) list

    set vars(slow) [subst {[expr {($vars(slowfast) != "f")}]}]
    set vars(slow.orig) $vars(slow)
    set vars(slow.expr) {[expr {($vars(slowfast) != "f")}]}
    trace variable vars(slowfast) w  "::EMBOSS::reset_value [namespace current] slow"
    set vars(slow._type) var

    lappend arguments pwgapc
    iwidgets::entryfield $w.pwgapc \
	-validate real \
	-textvariable [namespace current]::vars(pwgapc) \
	-labeltext [subst {Slow pairwise alignment: gap opening penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pwgapc component entry] -sticky nse
    set vars(pwgapc) [subst 10.0]
    pack $w.pwgapc -side top -fill both
    set vars(pwgapc.minimum) [subst 0.0]
    set vars(pwgapc.path) $w.pwgapc
    set vars(pwgapc.required)  0
    set vars(pwgapc._type) float

    lappend arguments pwgapv
    iwidgets::entryfield $w.pwgapv \
	-validate real \
	-textvariable [namespace current]::vars(pwgapv) \
	-labeltext [subst {Slow pairwise alignment: gap extension penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pwgapv component entry] -sticky nse
    set vars(pwgapv) [subst 0.1]
    pack $w.pwgapv -side top -fill both
    set vars(pwgapv.minimum) [subst 0.0]
    set vars(pwgapv.path) $w.pwgapv
    set vars(pwgapv.required)  0
    set vars(pwgapv._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_2 add \
	-label [subst {protsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments prot
    checkbutton $w.prot \
	-text [subst {Do not change this value}]\
	-variable [namespace current]::vars(prot)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.prot -side top -anchor w
    set vars(prot) [subst {[expr {($vars(insist) ? (!$vars(inseqs.protein)):$vars(inseqs.protein))}]}]
    set vars(prot.path) $w.prot
    set vars(prot.required)  0
    set vars(prot.orig) $vars(prot)
    set vars(prot.expr) {[expr {($vars(insist) ? (!$vars(inseqs.protein)):$vars(inseqs.protein))}]}
    trace variable vars(insist) w  "::EMBOSS::reset_value [namespace current] prot"
    trace variable vars(inseqs.protein) w  "::EMBOSS::reset_value [namespace current] prot"
    trace variable vars(inseqs.protein) w  "::EMBOSS::reset_value [namespace current] prot"
    set vars(prot._type) bool

    lappend arguments pwmatrix
    iwidgets::combobox $w.pwmatrix\
	-textvariable [namespace current]::vars(pwmatrix.name)\
	-labeltext [subst {Select matrix}]
    trace variable vars(pwmatrix.name) w  "::EMBOSS::list_changed [namespace current] pwmatrix"
    eval $w.pwmatrix insert list end blosum pam gonnet id own
    set vars(pwmatrix.mapping1) {own o id i pam p blosum b gonnet g}
    set vars(pwmatrix.mapping2) {p pam i id b blosum o own g gonnet}
    grid [$w.pwmatrix component entry] -sticky nse
    $w.pwmatrix delete entry 0 end
    array set tmpmap $vars(pwmatrix.mapping2)
    set def [subst b]
    catch {set def $tmpmap($def)}
    set vars(pwmatrix) $def
    $w.pwmatrix insert entry end $def
    $w.pwmatrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.pwmatrix -side top -fill both
    set vars(pwmatrix.path) $w.pwmatrix
    set vars(pwmatrix.required)  0
    set vars(pwmatrix.delimiter) ,
    set vars(pwmatrix._type) list

    lappend arguments pwdnamatrix
    iwidgets::combobox $w.pwdnamatrix\
	-textvariable [namespace current]::vars(pwdnamatrix.name)\
	-labeltext [subst {Select matrix}]
    trace variable vars(pwdnamatrix.name) w  "::EMBOSS::list_changed [namespace current] pwdnamatrix"
    eval $w.pwdnamatrix insert list end iub clustalw own
    set vars(pwdnamatrix.mapping1) {own o iub i clustalw c}
    set vars(pwdnamatrix.mapping2) {i iub o own c clustalw}
    grid [$w.pwdnamatrix component entry] -sticky nse
    $w.pwdnamatrix delete entry 0 end
    array set tmpmap $vars(pwdnamatrix.mapping2)
    set def [subst i]
    catch {set def $tmpmap($def)}
    set vars(pwdnamatrix) $def
    $w.pwdnamatrix insert entry end $def
    $w.pwdnamatrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.pwdnamatrix -side top -fill both
    set vars(pwdnamatrix.path) $w.pwdnamatrix
    set vars(pwdnamatrix.required)  0
    set vars(pwdnamatrix.delimiter) ,
    set vars(pwdnamatrix._type) list

    set vars(usermatrix) [subst {[expr {($vars(pwmatrix) == "o")}]}]
    set vars(usermatrix.orig) $vars(usermatrix)
    set vars(usermatrix.expr) {[expr {($vars(pwmatrix) == "o")}]}
    trace variable vars(pwmatrix) w  "::EMBOSS::reset_value [namespace current] usermatrix"
    set vars(usermatrix._type) var

    lappend arguments pairwisedata
    iwidgets::entryfield $w.pairwisedata \
	-textvariable [namespace current]::vars(pairwisedata) \
	-labeltext [subst {Filename of user pairwise matrix}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pairwisedata component entry] -sticky nse
    set vars(pairwisedata) [subst NULL]
    pack $w.pairwisedata -side top -fill both
    set vars(pairwisedata.path) $w.pairwisedata
    set vars(pairwisedata.required)  0
    set vars(pairwisedata._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_2 add \
	-label [subst {fastsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments ktup
    iwidgets::entryfield $w.ktup \
	-validate integer \
	-textvariable [namespace current]::vars(ktup) \
	-labeltext [subst {Fast pairwise alignment: similarity scores: K-Tuple size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.ktup component entry] -sticky nse
    set vars(ktup) [subst {[expr {($vars(prot)?1:2)}]}]
    pack $w.ktup -side top -fill both
    set vars(ktup.minimum) [subst 0]
    set vars(ktup.maximum) [subst 4]
    set vars(ktup.path) $w.ktup
    set vars(ktup.required)  0
    set vars(ktup.orig) $vars(ktup)
    set vars(ktup.expr) {[expr {($vars(prot)?1:2)}]}
    trace variable vars(prot) w  "::EMBOSS::reset_value [namespace current] ktup"
    set vars(ktup._type) integer

    lappend arguments gapw
    iwidgets::entryfield $w.gapw \
	-validate integer \
	-textvariable [namespace current]::vars(gapw) \
	-labeltext [subst {Fast pairwise alignment: similarity scores: gap penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapw component entry] -sticky nse
    set vars(gapw) [subst {[expr {($vars(prot)?3:5)}]}]
    pack $w.gapw -side top -fill both
    set vars(gapw.minimum) [subst 0]
    set vars(gapw.path) $w.gapw
    set vars(gapw.required)  0
    set vars(gapw.orig) $vars(gapw)
    set vars(gapw.expr) {[expr {($vars(prot)?3:5)}]}
    trace variable vars(prot) w  "::EMBOSS::reset_value [namespace current] gapw"
    set vars(gapw._type) integer

    lappend arguments topdiags
    iwidgets::entryfield $w.topdiags \
	-validate integer \
	-textvariable [namespace current]::vars(topdiags) \
	-labeltext [subst {Fast pairwise alignment: similarity scores: number of diagonals to be considered}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.topdiags component entry] -sticky nse
    set vars(topdiags) [subst {[expr {($vars(prot)?5:4)}]}]
    pack $w.topdiags -side top -fill both
    set vars(topdiags.minimum) [subst 0]
    set vars(topdiags.path) $w.topdiags
    set vars(topdiags.required)  0
    set vars(topdiags.orig) $vars(topdiags)
    set vars(topdiags.expr) {[expr {($vars(prot)?5:4)}]}
    trace variable vars(prot) w  "::EMBOSS::reset_value [namespace current] topdiags"
    set vars(topdiags._type) integer

    lappend arguments window
    iwidgets::entryfield $w.window \
	-validate integer \
	-textvariable [namespace current]::vars(window) \
	-labeltext [subst {Fast pairwise alignment: similarity scores: diagonal window size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.window component entry] -sticky nse
    set vars(window) [subst {[expr {($vars(prot)?5:4)}]}]
    pack $w.window -side top -fill both
    set vars(window.minimum) [subst 0]
    set vars(window.path) $w.window
    set vars(window.required)  0
    set vars(window.orig) $vars(window)
    set vars(window.expr) {[expr {($vars(prot)?5:4)}]}
    trace variable vars(prot) w  "::EMBOSS::reset_value [namespace current] window"
    set vars(window._type) integer

    lappend arguments nopercent
    checkbutton $w.nopercent \
	-text [subst {Fast pairwise alignment: similarity scores: suppresses percentage score}]\
	-variable [namespace current]::vars(nopercent)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.nopercent -side top -anchor w
    set vars(nopercent) [subst 0]
    set vars(nopercent.path) $w.nopercent
    set vars(nopercent.required)  0
    set vars(nopercent._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_2 add \
	-label [subst {matrixsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments matrix
    iwidgets::combobox $w.matrix\
	-textvariable [namespace current]::vars(matrix.name)\
	-labeltext [subst {Select matrix}]
    trace variable vars(matrix.name) w  "::EMBOSS::list_changed [namespace current] matrix"
    eval $w.matrix insert list end blosum pam gonnet id own
    set vars(matrix.mapping1) {own o id i pam p blosum b gonnet g}
    set vars(matrix.mapping2) {p pam i id b blosum o own g gonnet}
    grid [$w.matrix component entry] -sticky nse
    $w.matrix delete entry 0 end
    array set tmpmap $vars(matrix.mapping2)
    set def [subst b]
    catch {set def $tmpmap($def)}
    set vars(matrix) $def
    $w.matrix insert entry end $def
    $w.matrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.matrix -side top -fill both
    set vars(matrix.path) $w.matrix
    set vars(matrix.required)  0
    set vars(matrix.delimiter) ,
    set vars(matrix._type) list

    set vars(usermamatrix) [subst {[expr {($vars(matrix) == "o")}]}]
    set vars(usermamatrix.orig) $vars(usermamatrix)
    set vars(usermamatrix.expr) {[expr {($vars(matrix) == "o")}]}
    trace variable vars(matrix) w  "::EMBOSS::reset_value [namespace current] usermamatrix"
    set vars(usermamatrix._type) var

    lappend arguments dnamatrix
    iwidgets::combobox $w.dnamatrix\
	-textvariable [namespace current]::vars(dnamatrix.name)\
	-labeltext [subst {Select matrix}]
    trace variable vars(dnamatrix.name) w  "::EMBOSS::list_changed [namespace current] dnamatrix"
    eval $w.dnamatrix insert list end iub clustalw own
    set vars(dnamatrix.mapping1) {own o iub i clustalw c}
    set vars(dnamatrix.mapping2) {i iub o own c clustalw}
    grid [$w.dnamatrix component entry] -sticky nse
    $w.dnamatrix delete entry 0 end
    array set tmpmap $vars(dnamatrix.mapping2)
    set def [subst i]
    catch {set def $tmpmap($def)}
    set vars(dnamatrix) $def
    $w.dnamatrix insert entry end $def
    $w.dnamatrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.dnamatrix -side top -fill both
    set vars(dnamatrix.path) $w.dnamatrix
    set vars(dnamatrix.required)  0
    set vars(dnamatrix.delimiter) ,
    set vars(dnamatrix._type) list

    set vars(umamatrix) [subst {([expr {($vars(dnamatrix) == "own")}] ? True : False)}]
    set vars(umamatrix.orig) $vars(umamatrix)
    set vars(umamatrix.expr) {([expr {($vars(dnamatrix) == "own")}] ? True : False)}
    trace variable vars(dnamatrix) w  "::EMBOSS::reset_value [namespace current] umamatrix"
    set vars(umamatrix._type) var

    lappend arguments mamatrix
    iwidgets::entryfield $w.mamatrix \
	-textvariable [namespace current]::vars(mamatrix) \
	-labeltext [subst {Filename of user multiple alignment matrix}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.mamatrix component entry] -sticky nse
    set vars(mamatrix) [subst NULL]
    pack $w.mamatrix -side top -fill both
    set vars(mamatrix.path) $w.mamatrix
    set vars(mamatrix.required)  0
    set vars(mamatrix._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_2 add \
	-label [subst {gapsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments gapc
    iwidgets::entryfield $w.gapc \
	-validate real \
	-textvariable [namespace current]::vars(gapc) \
	-labeltext [subst {Multiple alignment: Gap opening penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapc component entry] -sticky nse
    set vars(gapc) [subst 10.0]
    pack $w.gapc -side top -fill both
    set vars(gapc.minimum) [subst 0.0]
    set vars(gapc.path) $w.gapc
    set vars(gapc.required)  0
    set vars(gapc._type) float

    lappend arguments gapv
    iwidgets::entryfield $w.gapv \
	-validate real \
	-textvariable [namespace current]::vars(gapv) \
	-labeltext [subst {Multiple alignment: Gap extension penalty}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapv component entry] -sticky nse
    set vars(gapv) [subst 5.0]
    pack $w.gapv -side top -fill both
    set vars(gapv.minimum) [subst 0.00]
    set vars(gapv.path) $w.gapv
    set vars(gapv.required)  0
    set vars(gapv._type) float

    lappend arguments unweighted
    checkbutton $w.unweighted \
	-text [subst {Transitions are unweighted}]\
	-variable [namespace current]::vars(unweighted)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.unweighted -side top -anchor w
    set vars(unweighted) [subst 0]
    set vars(unweighted.path) $w.unweighted
    set vars(unweighted.required)  0
    set vars(unweighted._type) bool

    lappend arguments endgaps
    checkbutton $w.endgaps \
	-text [subst {Use end gap separation penalty}]\
	-variable [namespace current]::vars(endgaps)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.endgaps -side top -anchor w
    set vars(endgaps) [subst 1]
    set vars(endgaps.path) $w.endgaps
    set vars(endgaps.required)  0
    set vars(endgaps._type) bool

    lappend arguments gapdist
    iwidgets::entryfield $w.gapdist \
	-validate integer \
	-textvariable [namespace current]::vars(gapdist) \
	-labeltext [subst {Gap separation distance}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.gapdist component entry] -sticky nse
    set vars(gapdist) [subst 8]
    pack $w.gapdist -side top -fill both
    set vars(gapdist.minimum) [subst 0]
    set vars(gapdist.path) $w.gapdist
    set vars(gapdist.required)  0
    set vars(gapdist._type) integer

    lappend arguments norgap
    checkbutton $w.norgap \
	-text [subst {No residue specific gaps}]\
	-variable [namespace current]::vars(norgap)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.norgap -side top -anchor w
    set vars(norgap) [subst 0]
    set vars(norgap.path) $w.norgap
    set vars(norgap.required)  0
    set vars(norgap._type) bool

    lappend arguments hgapres
    iwidgets::entryfield $w.hgapres \
	-textvariable [namespace current]::vars(hgapres) \
	-labeltext [subst {List of hydrophilic residues}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.hgapres component entry] -sticky nse
    set vars(hgapres) [subst GPSNDQEKR]
    pack $w.hgapres -side top -fill both
    set vars(hgapres.path) $w.hgapres
    set vars(hgapres.required)  0
    set vars(hgapres._type) string

    lappend arguments nohgap
    checkbutton $w.nohgap \
	-text [subst {No hydrophilic gaps}]\
	-variable [namespace current]::vars(nohgap)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.nohgap -side top -anchor w
    set vars(nohgap) [subst 0]
    set vars(nohgap.path) $w.nohgap
    set vars(nohgap.required)  0
    set vars(nohgap._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    lappend arguments maxdiv
    iwidgets::entryfield $w.maxdiv \
	-validate integer \
	-textvariable [namespace current]::vars(maxdiv) \
	-labeltext [subst {Cut-off to delay the alignment of the most divergent sequences}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxdiv component entry] -sticky nse
    set vars(maxdiv) [subst 30]
    pack $w.maxdiv -side top -fill both
    set vars(maxdiv.minimum) [subst 0]
    set vars(maxdiv.maximum) [subst 100]
    set vars(maxdiv.path) $w.maxdiv
    set vars(maxdiv.required)  0
    set vars(maxdiv._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst {The sequence alignment output filename}]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqoutset

    lappend arguments dendoutfile
    xentry $w.dendoutfile \
	-label [subst {The dendogram output filename}]\
	-textvariable [namespace current]::vars(dendoutfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.dendoutfile delete 0 end
    $w.dendoutfile insert end [subst emma1.out]
    pack $w.dendoutfile -side top -fill both
    set vars(dendoutfile.path) $w.dendoutfile
    set vars(dendoutfile.required)  1
    set vars(dendoutfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/emma.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
    ::EMBOSS::resizebook $book(book_2).book_2
}


}; # namespace eval

