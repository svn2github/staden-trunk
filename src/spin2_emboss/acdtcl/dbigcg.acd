package require Iwidgets
namespace eval ::EMBOSS::dbigcg {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_dbigcg*Xentry.entry.width 30
option add *e_dbigcg*Entryfield.width 30
option add *e_dbigcg*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) dbigcg
    set w [xtoplevel .e_dbigcg -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - dbigcg}
    label $w._title -text {Index a GCG formatted database}
    pack $w._title -side top -fill both
    set vars(dbigcg._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments idformat
    iwidgets::combobox $w.idformat\
	-textvariable [namespace current]::vars(idformat.name)\
	-labeltext [subst {Entry format}]
    trace variable vars(idformat.name) w  "::EMBOSS::list_changed [namespace current] idformat"
    eval $w.idformat insert list end EMBL {{Swiss-Prot, SpTrEMBL, TrEMBLnew}} {{Genbank, DDBJ}} NBRF
    set vars(idformat.mapping1) {NBRF PIR {Swiss-Prot, SpTrEMBL, TrEMBLnew} SWISS EMBL EMBL {Genbank, DDBJ} GENBANK}
    set vars(idformat.mapping2) {EMBL EMBL SWISS {Swiss-Prot, SpTrEMBL, TrEMBLnew} GENBANK {Genbank, DDBJ} PIR NBRF}
    grid [$w.idformat component entry] -sticky nse
    $w.idformat delete entry 0 end
    array set tmpmap $vars(idformat.mapping2)
    set def [subst EMBL]
    catch {set def $tmpmap($def)}
    set vars(idformat) $def
    $w.idformat insert entry end $def
    $w.idformat configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.idformat -side top -fill both
    set vars(idformat.path) $w.idformat
    set vars(idformat.required)  0
    set vars(idformat.delimiter) {;}
    set vars(idformat._type) list

    lappend arguments directory
    iwidgets::entryfield $w.directory \
	-textvariable [namespace current]::vars(directory) \
	-labeltext [subst {Database directory}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.directory component entry] -sticky nse
    set vars(directory) [subst .]
    pack $w.directory -side top -fill both
    set vars(directory.path) $w.directory
    set vars(directory.required)  1
    set vars(directory._type) string

    lappend arguments filename
    iwidgets::entryfield $w.filename \
	-textvariable [namespace current]::vars(filename) \
	-labeltext [subst {Wildcard database filename}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.filename component entry] -sticky nse
    set vars(filename) [subst *.seq]
    pack $w.filename -side top -fill both
    set vars(filename.path) $w.filename
    set vars(filename.required)  1
    set vars(filename._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments dbname
    iwidgets::entryfield $w.dbname \
	-textvariable [namespace current]::vars(dbname) \
	-labeltext [subst {Database name}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.dbname component entry] -sticky nse
    set vars(dbname) [subst {}]
    pack $w.dbname -side top -fill both
    set vars(dbname.path) $w.dbname
    set vars(dbname.required)  1
    set vars(dbname._type) string

    lappend arguments release
    iwidgets::entryfield $w.release \
	-textvariable [namespace current]::vars(release) \
	-labeltext [subst {Release number}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.release component entry] -sticky nse
    set vars(release) [subst 0.0]
    pack $w.release -side top -fill both
    set vars(release.path) $w.release
    set vars(release.required)  1
    set vars(release._type) string

    lappend arguments date
    iwidgets::entryfield $w.date \
	-textvariable [namespace current]::vars(date) \
	-labeltext [subst {Index date}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.date component entry] -sticky nse
    set vars(date) [subst 00/00/00]
    pack $w.date -side top -fill both
    set vars(date.path) $w.date
    set vars(date.required)  1
    set vars(date._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments staden
    checkbutton $w.staden \
	-text [subst {Use staden index file names}]\
	-variable [namespace current]::vars(staden)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.staden -side top -anchor w
    set vars(staden) [subst 0]
    set vars(staden.path) $w.staden
    set vars(staden.required)  0
    set vars(staden._type) bool

    lappend arguments indexdirectory
    iwidgets::entryfield $w.indexdirectory \
	-textvariable [namespace current]::vars(indexdirectory) \
	-labeltext [subst {Index directory}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.indexdirectory component entry] -sticky nse
    set vars(indexdirectory) [subst .]
    pack $w.indexdirectory -side top -fill both
    set vars(indexdirectory.path) $w.indexdirectory
    set vars(indexdirectory.required)  0
    set vars(indexdirectory._type) string

    lappend arguments sortoptions
    iwidgets::entryfield $w.sortoptions \
	-textvariable [namespace current]::vars(sortoptions) \
	-labeltext [subst {Sort option(s)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.sortoptions component entry] -sticky nse
    set vars(sortoptions) [subst {-T . -k 1,1}]
    pack $w.sortoptions -side top -fill both
    set vars(sortoptions.path) $w.sortoptions
    set vars(sortoptions.required)  0
    set vars(sortoptions._type) string

    lappend arguments systemsort
    checkbutton $w.systemsort \
	-text [subst {Use system sort utility}]\
	-variable [namespace current]::vars(systemsort)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.systemsort -side top -anchor w
    set vars(systemsort) [subst 1]
    set vars(systemsort.path) $w.systemsort
    set vars(systemsort.required)  0
    set vars(systemsort._type) bool

    lappend arguments cleanup
    checkbutton $w.cleanup \
	-text [subst {Clean up temporary files}]\
	-variable [namespace current]::vars(cleanup)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.cleanup -side top -anchor w
    set vars(cleanup) [subst 1]
    set vars(cleanup.path) $w.cleanup
    set vars(cleanup.required)  0
    set vars(cleanup._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/dbigcg.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

