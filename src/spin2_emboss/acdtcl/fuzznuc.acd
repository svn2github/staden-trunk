package require Iwidgets
namespace eval ::EMBOSS::fuzznuc {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_fuzznuc*Xentry.entry.width 30
option add *e_fuzznuc*Entryfield.width 30
option add *e_fuzznuc*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) fuzznuc
    set w [xtoplevel .e_fuzznuc -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - fuzznuc}
    label $w._title -text {Nucleic acid pattern search}
    pack $w._title -side top -fill both
    set vars(fuzznuc._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst dna]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments pattern
    iwidgets::entryfield $w.pattern \
	-textvariable [namespace current]::vars(pattern) \
	-labeltext [subst {Search pattern}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pattern component entry] -sticky nse
    set vars(pattern) [subst {}]
    pack $w.pattern -side top -fill both
    set vars(pattern.path) $w.pattern
    set vars(pattern.required)  1
    set vars(pattern._type) string

    lappend arguments mismatch
    iwidgets::entryfield $w.mismatch \
	-validate integer \
	-textvariable [namespace current]::vars(mismatch) \
	-labeltext [subst {Number of mismatches}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.mismatch component entry] -sticky nse
    set vars(mismatch) [subst 0]
    pack $w.mismatch -side top -fill both
    set vars(mismatch.minimum) [subst 0]
    set vars(mismatch.path) $w.mismatch
    set vars(mismatch.required)  1
    set vars(mismatch._type) integer

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments complement
    checkbutton $w.complement \
	-text [subst {Search complementary strand}]\
	-variable [namespace current]::vars(complement)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.complement -side top -anchor w
    set vars(complement) [subst 0]
    set vars(complement.path) $w.complement
    set vars(complement.required)  0
    set vars(complement._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outf
    xentry $w.outf \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outf delete 0 end
    $w.outf insert end [subst fuzznuc0.out]
    pack $w.outf -side top -fill both
    set vars(outf.path) $w.outf
    set vars(outf.required)  1
    set vars(outf._type) outfile

    lappend arguments mmshow
    checkbutton $w.mmshow \
	-text [subst {Show mismatches}]\
	-variable [namespace current]::vars(mmshow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.mmshow -side top -anchor w
    set vars(mmshow) [subst 0]
    set vars(mmshow.path) $w.mmshow
    set vars(mmshow.required)  0
    set vars(mmshow._type) bool

    lappend arguments accshow
    checkbutton $w.accshow \
	-text [subst {Show accession numbers}]\
	-variable [namespace current]::vars(accshow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.accshow -side top -anchor w
    set vars(accshow) [subst 0]
    set vars(accshow.path) $w.accshow
    set vars(accshow.required)  0
    set vars(accshow._type) bool

    lappend arguments descshow
    checkbutton $w.descshow \
	-text [subst {Show descriptions}]\
	-variable [namespace current]::vars(descshow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.descshow -side top -anchor w
    set vars(descshow) [subst 0]
    set vars(descshow.path) $w.descshow
    set vars(descshow.required)  0
    set vars(descshow._type) bool

    lappend arguments usashow
    checkbutton $w.usashow \
	-text [subst {Show USA}]\
	-variable [namespace current]::vars(usashow)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.usashow -side top -anchor w
    set vars(usashow) [subst 0]
    set vars(usashow.path) $w.usashow
    set vars(usashow.required)  0
    set vars(usashow._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/fuzznuc.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

