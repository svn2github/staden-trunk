package require Iwidgets
namespace eval ::EMBOSS::primers {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_primers*Xentry.entry.width 30
option add *e_primers*Entryfield.width 30
option add *e_primers*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) primers
    set w [xtoplevel .e_primers -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - primers}
    label $w._title -text {Simple version of primer3 to pick PCR primers}
    pack $w._title -side top -fill both
    set vars(primers._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst dna]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) seqall

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments target
    iwidgets::entryfield $w.target \
	-textvariable [namespace current]::vars(target) \
	-labeltext [subst {Target region(s)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.target component entry] -sticky nse
    set vars(target) [subst {}]
    pack $w.target -side top -fill both
    set vars(target.path) $w.target
    set vars(target.required)  0
    set vars(target._type) range

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments minsize
    iwidgets::entryfield $w.minsize \
	-validate integer \
	-textvariable [namespace current]::vars(minsize) \
	-labeltext [subst {Primer minimum size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.minsize component entry] -sticky nse
    set vars(minsize) [subst 18]
    pack $w.minsize -side top -fill both
    set vars(minsize.minimum) [subst 1]
    set vars(minsize.path) $w.minsize
    set vars(minsize.required)  0
    set vars(minsize._type) integer

    lappend arguments maxsize
    iwidgets::entryfield $w.maxsize \
	-validate integer \
	-textvariable [namespace current]::vars(maxsize) \
	-labeltext [subst {Primer maximum size}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxsize component entry] -sticky nse
    set vars(maxsize) [subst 27]
    pack $w.maxsize -side top -fill both
    set vars(maxsize.minimum) [subst {[expr {$vars(minsize)}]}]
    set vars(maxsize.minimum.orig) $vars(maxsize.minimum)
    set vars(maxsize.minimum.expr) {[expr {$vars(minsize)}]}
    trace variable vars(minsize) w  "::EMBOSS::reset_value [namespace current] maxsize.minimum"
    set vars(maxsize.maximum) [subst 35]
    set vars(maxsize.path) $w.maxsize
    set vars(maxsize.required)  0
    set vars(maxsize._type) integer

    lappend arguments maxdifftm
    iwidgets::entryfield $w.maxdifftm \
	-validate real \
	-textvariable [namespace current]::vars(maxdifftm) \
	-labeltext [subst {Maximum difference in Tm of primers}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maxdifftm component entry] -sticky nse
    set vars(maxdifftm) [subst 100.0]
    pack $w.maxdifftm -side top -fill both
    set vars(maxdifftm.path) $w.maxdifftm
    set vars(maxdifftm.required)  0
    set vars(maxdifftm._type) float

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output section}]]
    lappend wlist $w
    set w $page

    lappend arguments explainflag
    checkbutton $w.explainflag \
	-text [subst {Explain flag}]\
	-variable [namespace current]::vars(explainflag)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.explainflag -side top -anchor w
    set vars(explainflag) [subst 0]
    set vars(explainflag.path) $w.explainflag
    set vars(explainflag.required)  0
    set vars(explainflag._type) bool

    lappend arguments numreturn
    iwidgets::entryfield $w.numreturn \
	-validate integer \
	-textvariable [namespace current]::vars(numreturn) \
	-labeltext [subst {Number of results to return}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.numreturn component entry] -sticky nse
    set vars(numreturn) [subst 5]
    pack $w.numreturn -side top -fill both
    set vars(numreturn.minimum) [subst 0]
    set vars(numreturn.path) $w.numreturn
    set vars(numreturn.required)  0
    set vars(numreturn._type) integer

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst primers0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/primers.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

