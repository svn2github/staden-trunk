package require Iwidgets
namespace eval ::EMBOSS::prophecy {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_prophecy*Xentry.entry.width 30
option add *e_prophecy*Entryfield.width 30
option add *e_prophecy*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) prophecy
    set w [xtoplevel .e_prophecy -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - prophecy}
    label $w._title -text {Creates matrices/profiles from multiple alignments}
    pack $w._title -side top -fill both
    set vars(prophecy._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst gapany]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
   set vars(sequence.totweight) [subst 0]
    set vars(sequence._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments type
    iwidgets::combobox $w.type\
	-textvariable [namespace current]::vars(type.name)\
	-labeltext [subst {Select type}]
    trace variable vars(type.name) w  "::EMBOSS::list_changed [namespace current] type"
    eval $w.type insert list end Frequency Gribskov Henikoff
    set vars(type.mapping1) {Henikoff H Frequency F Gribskov G}
    set vars(type.mapping2) {H Henikoff F Frequency G Gribskov}
    grid [$w.type component entry] -sticky nse
    $w.type delete entry 0 end
    array set tmpmap $vars(type.mapping2)
    set def [subst F]
    catch {set def $tmpmap($def)}
    set vars(type) $def
    $w.type insert entry end $def
    $w.type configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.type -side top -fill both
    set vars(type.path) $w.type
    set vars(type.required)  1
    set vars(type.delimiter) ,
    set vars(type._type) list

    lappend arguments name
    iwidgets::entryfield $w.name \
	-textvariable [namespace current]::vars(name) \
	-labeltext [subst {Enter a name for the profile}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.name component entry] -sticky nse
    set vars(name) [subst mymatrix]
    pack $w.name -side top -fill both
    set vars(name.path) $w.name
    set vars(name.required)  1
    set vars(name._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    set vars(dogap) [subst {[expr {($vars(type) != "f")}]}]
    set vars(dogap.orig) $vars(dogap)
    set vars(dogap.expr) {[expr {($vars(type) != "f")}]}
    trace variable vars(type) w  "::EMBOSS::reset_value [namespace current] dogap"
    set vars(dogap._type) var

    iwidgets::tabnotebook $w.book_2 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_2 -side top -fill both
    set book(book_2) $w
    set page [$w.book_2 add \
	-label [subst {typesection Section}]]
    $w.book_2 view [subst {typesection Section}]
    lappend wlist $w
    set w $page

    lappend arguments threshold
    iwidgets::entryfield $w.threshold \
	-validate integer \
	-textvariable [namespace current]::vars(threshold) \
	-labeltext [subst {Enter threshold reporting percentage}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(type)=="F")}]}]]]
    grid [$w.threshold component entry] -sticky nse
    set vars(threshold) [subst 75]
    pack $w.threshold -side top -fill both
    set vars(threshold.minimum) [subst 1]
    set vars(threshold.maximum) [subst 100]
    set vars(threshold.path) $w.threshold
    set vars(threshold.required)  0
    set vars(threshold._type) integer
    set vars(threshold.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(type)=="F")}]]}
    trace variable vars(type) w  "::EMBOSS::reset_needed [namespace current] threshold"

    lappend arguments datafile
    set vars(datafile.protein) [subst {[expr {$vars(sequence.protein)}]}]
    iwidgets::combobox $w.datafile\
	-textvariable [namespace current]::vars(datafile)\
	-labeltext [subst {Scoring matrix}]
    eval $w.datafile insert list end [list_matrices p]
    grid [$w.datafile component entry] -sticky nse
    $w.datafile delete entry 0 end
    $w.datafile insert entry end [subst {[expr {($vars(type) == "G" ? "Epprofile" : $vars(type) == "H" ? "EBLOSUM62" : $vars(type) == "F" ? "EBLOSUM62" : "")}]}]
    $w.datafile configure \
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {($vars(type)!="F")}]}]]]
    pack $w.datafile -side top -fill both
    set vars(datafile.path) $w.datafile
    set vars(datafile.required)  0
    set vars(datafile.protein.orig) $vars(datafile.protein)
    set vars(datafile.protein.expr) {[expr {$vars(sequence.protein)}]}
    trace variable vars(sequence.protein) w  "::EMBOSS::reset_value [namespace current] datafile.protein"
    set vars(datafile.orig) $vars(datafile)
    set vars(datafile.expr) {[expr {($vars(type) == "G" ? "Epprofile" : $vars(type) == "H" ? "EBLOSUM62" : $vars(type) == "F" ? "EBLOSUM62" : "")}]}
    trace variable vars(type) w  "::EMBOSS::reset_value [namespace current] datafile"
    set vars(datafile._type) matrixf
    set vars(datafile.needed_expr)  {[::EMBOSS::convert_bool [expr {($vars(type)!="F")}]]}
    trace variable vars(type) w  "::EMBOSS::reset_needed [namespace current] datafile"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_2 add \
	-label [subst {dogapsection Section}]]
    lappend wlist $w
    set w $page

    lappend arguments open
    iwidgets::entryfield $w.open \
	-validate real \
	-textvariable [namespace current]::vars(open) \
	-labeltext [subst {Gap opening penalty}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(dogap)}]}]]]
    grid [$w.open component entry] -sticky nse
    set vars(open) [subst 3.0]
    pack $w.open -side top -fill both
    set vars(open.path) $w.open
    set vars(open.required)  0
    set vars(open._type) float
    set vars(open.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(dogap)}]]}
    trace variable vars(dogap) w  "::EMBOSS::reset_needed [namespace current] open"

    lappend arguments extension
    iwidgets::entryfield $w.extension \
	-validate real \
	-textvariable [namespace current]::vars(extension) \
	-labeltext [subst {Gap extension penalty}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(dogap)}]}]]]
    grid [$w.extension component entry] -sticky nse
    set vars(extension) [subst 0.3]
    pack $w.extension -side top -fill both
    set vars(extension.path) $w.extension
    set vars(extension.required)  0
    set vars(extension._type) float
    set vars(extension.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(dogap)}]]}
    trace variable vars(dogap) w  "::EMBOSS::reset_needed [namespace current] extension"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outf
    xentry $w.outf \
	-label [subst {Output filename}]\
	-textvariable [namespace current]::vars(outf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outf delete 0 end
    $w.outf insert end [subst prophecy0.out]
    pack $w.outf -side top -fill both
    set vars(outf.path) $w.outf
    set vars(outf.required)  1
    set vars(outf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/prophecy.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
    ::EMBOSS::resizebook $book(book_2).book_2
}


}; # namespace eval

