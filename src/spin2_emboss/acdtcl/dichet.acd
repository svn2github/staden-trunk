package require Iwidgets
namespace eval ::EMBOSS::dichet {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_dichet*Xentry.entry.width 30
option add *e_dichet*Entryfield.width 30
option add *e_dichet*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) dichet
    set w [xtoplevel .e_dichet -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - dichet}
    label $w._title -text {Parse dictionary of heterogen groups}
    pack $w._title -side top -fill both
    set vars(dichet._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments inf
    xentry $w.inf \
	-label [subst {Name of raw input file (dictionary of heterogen groups)}]\
	-textvariable [namespace current]::vars(inf) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.inf delete 0 end
    $w.inf insert end [subst {}]
    pack $w.inf -side top -fill both
    set vars(inf.path) $w.inf
    set vars(inf.required)  1
    set vars(inf._type) infile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments dogrep
    checkbutton $w.dogrep \
	-text [subst {Search a directory of files with keywords?}]\
	-variable [namespace current]::vars(dogrep)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.dogrep -side top -anchor w
    set vars(dogrep) [subst 0]
    set vars(dogrep.path) $w.dogrep
    set vars(dogrep.required)  1
    set vars(dogrep._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outf
    xentry $w.outf \
	-label [subst {Name of output file}]\
	-textvariable [namespace current]::vars(outf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outf delete 0 end
    $w.outf insert end [subst dichet0.out]
    pack $w.outf -side top -fill both
    set vars(outf.path) $w.outf
    set vars(outf.required)  1
    set vars(outf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments path
    iwidgets::entryfield $w.path \
	-textvariable [namespace current]::vars(path) \
	-labeltext [subst {Directory to search with keywords}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(dogrep)}]}]]]
    grid [$w.path component entry] -sticky nse
    set vars(path) [subst ./]
    pack $w.path -side top -fill both
    set vars(path.path) $w.path
    set vars(path.required)  0
    set vars(path._type) string
    set vars(path.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(dogrep)}]]}
    trace variable vars(dogrep) w  "::EMBOSS::reset_needed [namespace current] path"

    lappend arguments extn
    iwidgets::entryfield $w.extn \
	-textvariable [namespace current]::vars(extn) \
	-labeltext [subst {Exension of files to search in above directory}]\
	-state [lindex {disabled normal} [::EMBOSS::convert_bool [subst {[expr {$vars(dogrep)}]}]]]
    grid [$w.extn component entry] -sticky nse
    set vars(extn) [subst .ent]
    pack $w.extn -side top -fill both
    set vars(extn.path) $w.extn
    set vars(extn.required)  0
    set vars(extn._type) string
    set vars(extn.needed_expr)  {[::EMBOSS::convert_bool [expr {$vars(dogrep)}]]}
    trace variable vars(dogrep) w  "::EMBOSS::reset_needed [namespace current] extn"

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/dichet.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

