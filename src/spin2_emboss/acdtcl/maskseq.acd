package require Iwidgets
namespace eval ::EMBOSS::maskseq {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_maskseq*Xentry.entry.width 30
option add *e_maskseq*Entryfield.width 30
option add *e_maskseq*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) maskseq
    set w [xtoplevel .e_maskseq -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - maskseq}
    label $w._title -text {Mask off regions of a sequence.}
    pack $w._title -side top -fill both
    set vars(maskseq._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst any]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
    set vars(sequence._type) sequence

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {required Section}]]
    lappend wlist $w
    set w $page

    lappend arguments regions
    iwidgets::entryfield $w.regions \
	-textvariable [namespace current]::vars(regions) \
	-labeltext [subst {Regions to mask (eg: 4-57,78-94)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.regions component entry] -sticky nse
    set vars(regions) [subst {}]
    pack $w.regions -side top -fill both
    set vars(regions.path) $w.regions
    set vars(regions.required)  1
    set vars(regions._type) range

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outseq
    iwidgets::labeledframe $w.outseq \
	-labeltext [subst {Sequence output filename}]
    pack $w.outseq -side top -fill both
    lappend wlist $w
    set w [$w.outseq childsite]
    iwidgets::combobox $w.format\
	-textvariable [namespace current]::vars(outseq.format)\
	-labeltext {File format}
    eval $w.format insert list end [list_file_formats]
    grid [$w.format component entry] -sticky nse
    $w.format delete entry 0 end
    $w.format insert entry end fasta
    $w.format configure \
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.format.path) $w.format
    pack $w.format -side top -fill both
    xentry $w.name \
	-label {Filename}\
	-textvariable [namespace current]::vars(outseq) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    set vars(outseq.name.path) $w.name
    pack $w.name -side top -fill both
    $w.name delete 0 end
    $w.name insert end [subst sequence0.out]
    set vars(outseq.path) $w.outseq
    set vars(outseq.required)  1
    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    set vars(outseq._type) seqout

    lappend arguments maskchar
    iwidgets::entryfield $w.maskchar \
	-textvariable [namespace current]::vars(maskchar) \
	-labeltext [subst {Character to mask with}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.maskchar component entry] -sticky nse
    set vars(maskchar) [subst {[expr {($vars(sequence.protein)?"X":"N")}]}]
    pack $w.maskchar -side top -fill both
    set vars(maskchar.path) $w.maskchar
    set vars(maskchar.required)  0
    set vars(maskchar.orig) $vars(maskchar)
    set vars(maskchar.expr) {[expr {($vars(sequence.protein)?"X":"N")}]}
    trace variable vars(sequence.protein) w  "::EMBOSS::reset_value [namespace current] maskchar"
    set vars(maskchar._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/maskseq.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

