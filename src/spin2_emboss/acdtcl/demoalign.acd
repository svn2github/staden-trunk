package require Iwidgets
namespace eval ::EMBOSS::demoalign {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_demoalign*Xentry.entry.width 30
option add *e_demoalign*Entryfield.width 30
option add *e_demoalign*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) demoalign
    set w [xtoplevel .e_demoalign -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - demoalign}
    label $w._title -text {Reads a sequence set, writes an alignment file}
    pack $w._title -side top -fill both
    set vars(demoalign._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments sequence
    set vars(sequence)       [get_active_seq_id 1]
    if {$vars(sequence) == -1} {set vars(sequence) [get_active_seq_id 1]}
    set vars(sequence.name)  [seq_info $vars(sequence) name]
    sequence_changed [namespace current] sequence
    set vars(sequence.type) [subst any]
    seq_id $w.sequence \
	-textvariable [namespace current]::vars(sequence.name)\
	-start_value $vars(sequence.begin)\
	-end_value $vars(sequence.end)\
	-to [seq_info $vars(sequence) length]\
	-browse_cmd seq_browser\
	-update_cmd "{::EMBOSS::seq_updates [namespace current] sequence $w.sequence}"
    set vars(sequence) [subst {}]
    pack $w.sequence -side top -fill both
    set vars(sequence.path) $w.sequence
    set vars(sequence.required)  1
    trace variable vars(sequence.name) w  "::EMBOSS::sequence_changed [namespace current] sequence"
   set vars(sequence.totweight) [subst 0]
    set vars(sequence._type) seqset

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments outfile
    xentry $w.outfile \
	-label [subst {Alignment output filename}]\
	-textvariable [namespace current]::vars(outfile) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.outfile delete 0 end
    $w.outfile insert end [subst align0.out]
    pack $w.outfile -side top -fill both
    set vars(outfile.path) $w.outfile
    set vars(outfile.required)  1
    set vars(outfile._type) align

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {advanced Section}]]
    lappend wlist $w
    set w $page

    lappend arguments floatmatrix
    set vars(floatmatrix.protein) [subst {[expr {$vars(sequence.protein)}]}]
    iwidgets::combobox $w.floatmatrix\
	-textvariable [namespace current]::vars(floatmatrix)\
	-labeltext [subst {Matrix filename}]
    eval $w.floatmatrix insert list end [list_matrices p]
    grid [$w.floatmatrix component entry] -sticky nse
    $w.floatmatrix delete entry 0 end
    $w.floatmatrix insert entry end [subst {[expr {$vars(floatmatrix.protein)?"EBLOSUM62":"EDNAMAT"}]}]
    $w.floatmatrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.floatmatrix -side top -fill both
    set vars(floatmatrix.path) $w.floatmatrix
    set vars(floatmatrix.required)  0
    set vars(floatmatrix.protein.orig) $vars(floatmatrix.protein)
    set vars(floatmatrix.protein.expr) {[expr {$vars(sequence.protein)}]}
    trace variable vars(sequence.protein) w  "::EMBOSS::reset_value [namespace current] floatmatrix.protein"
    set vars(floatmatrix.orig) $vars(floatmatrix)
    set vars(floatmatrix.expr) {[expr {$vars(floatmatrix.protein)?"EBLOSUM62":"EDNAMAT"}]}
    trace variable vars(floatmatrix.protein) w  "::EMBOSS::reset_value [namespace current] floatmatrix"
    set vars(floatmatrix._type) matrixf

    lappend arguments intmatrix
    set vars(intmatrix.protein) [subst {[expr {$vars(sequence.protein)}]}]
    iwidgets::combobox $w.intmatrix\
	-textvariable [namespace current]::vars(intmatrix)\
	-labeltext [subst {Matrix filename}]
    eval $w.intmatrix insert list end [list_matrices p]
    grid [$w.intmatrix component entry] -sticky nse
    $w.intmatrix delete entry 0 end
    $w.intmatrix insert entry end [subst {[expr {$vars(intmatrix.protein)?"EBLOSUM62":"EDNAMAT"}]}]
    $w.intmatrix configure \
	-state [lindex {disabled normal} [subst 1]]
    pack $w.intmatrix -side top -fill both
    set vars(intmatrix.path) $w.intmatrix
    set vars(intmatrix.required)  0
    set vars(intmatrix.protein.orig) $vars(intmatrix.protein)
    set vars(intmatrix.protein.expr) {[expr {$vars(sequence.protein)}]}
    trace variable vars(sequence.protein) w  "::EMBOSS::reset_value [namespace current] intmatrix.protein"
    set vars(intmatrix.orig) $vars(intmatrix)
    set vars(intmatrix.expr) {[expr {$vars(intmatrix.protein)?"EBLOSUM62":"EDNAMAT"}]}
    trace variable vars(intmatrix.protein) w  "::EMBOSS::reset_value [namespace current] intmatrix"
    set vars(intmatrix._type) matrix

    lappend arguments dofloat
    checkbutton $w.dofloat \
	-text [subst {Use floating point matrix}]\
	-variable [namespace current]::vars(dofloat)\
	-state [lindex {disabled normal} [subst 1]]
    pack $w.dofloat -side top -anchor w
    set vars(dofloat) [subst 0]
    set vars(dofloat.path) $w.dofloat
    set vars(dofloat.required)  0
    set vars(dofloat._type) bool

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/demoalign.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

