package require Iwidgets
namespace eval ::EMBOSS::domainer {
namespace import ::EMBOSS::*
variable vars
variable arguments


option add *e_domainer*Xentry.entry.width 30
option add *e_domainer*Entryfield.width 30
option add *e_domainer*Combobox.width 27

proc create_dialogue {} {
    variable vars
    variable arguments
    set vars(application) domainer
    set w [xtoplevel .e_domainer -resizable 0]
    if {$w == {}} return
    bind $w <Destroy> \
"if {{$w} == {%W}} {::EMBOSS::destroy_dialogue [namespace current]}"
    fix_maxsize $w
    wm title $w {EMBOSS - domainer}
    label $w._title -text {Build domain coordinate files}
    pack $w._title -side top -fill both
    set vars(domainer._type) application

    iwidgets::tabnotebook $w.book_1 -tabpos n -padx 10 -equaltabs 0
    pack $w.book_1 -side top -fill both
    set book(book_1) $w
    set page [$w.book_1 add \
	-label [subst {input Section}]]
    $w.book_1 view [subst {input Section}]
    lappend wlist $w
    set w $page

    lappend arguments scop
    xentry $w.scop \
	-label [subst {Name of scop file for input (embl-like format)}]\
	-textvariable [namespace current]::vars(scop) \
	-checkcommand ::EMBOSS::check_infile\
	-state [lindex {disabled normal} [subst 1]]
    $w.scop delete 0 end
    $w.scop insert end [subst Escop.dat]
    pack $w.scop -side top -fill both
    set vars(scop.path) $w.scop
    set vars(scop.required)  1
    set vars(scop._type) infile

    lappend arguments cpdb
    iwidgets::entryfield $w.cpdb \
	-textvariable [namespace current]::vars(cpdb) \
	-labeltext [subst {Location of coordinate files for input (embl-like format)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.cpdb component entry] -sticky nse
    set vars(cpdb) [subst ./]
    pack $w.cpdb -side top -fill both
    set vars(cpdb.path) $w.cpdb
    set vars(cpdb.required)  1
    set vars(cpdb._type) string

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]

    set page [$w.book_1 add \
	-label [subst {output Section}]]
    lappend wlist $w
    set w $page

    lappend arguments cpdbscop
    iwidgets::entryfield $w.cpdbscop \
	-textvariable [namespace current]::vars(cpdbscop) \
	-labeltext [subst {Location of coordinate files for output (embl-like format)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.cpdbscop component entry] -sticky nse
    set vars(cpdbscop) [subst ./]
    pack $w.cpdbscop -side top -fill both
    set vars(cpdbscop.path) $w.cpdbscop
    set vars(cpdbscop.required)  1
    set vars(cpdbscop._type) string

    lappend arguments cpdbextn
    iwidgets::entryfield $w.cpdbextn \
	-textvariable [namespace current]::vars(cpdbextn) \
	-labeltext [subst {Extension of coordinate files (embl-like format)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.cpdbextn component entry] -sticky nse
    set vars(cpdbextn) [subst .pxyz]
    pack $w.cpdbextn -side top -fill both
    set vars(cpdbextn.path) $w.cpdbextn
    set vars(cpdbextn.required)  1
    set vars(cpdbextn._type) string

    lappend arguments pdbscop
    iwidgets::entryfield $w.pdbscop \
	-textvariable [namespace current]::vars(pdbscop) \
	-labeltext [subst {Location of coordinate files for output (pdb format)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pdbscop component entry] -sticky nse
    set vars(pdbscop) [subst ./]
    pack $w.pdbscop -side top -fill both
    set vars(pdbscop.path) $w.pdbscop
    set vars(pdbscop.required)  1
    set vars(pdbscop._type) string

    lappend arguments pdbextn
    iwidgets::entryfield $w.pdbextn \
	-textvariable [namespace current]::vars(pdbextn) \
	-labeltext [subst {Extension of coordinate files (pdb format)}]\
	-state [lindex {disabled normal} [subst 1]]
    grid [$w.pdbextn component entry] -sticky nse
    set vars(pdbextn) [subst .ent]
    pack $w.pdbextn -side top -fill both
    set vars(pdbextn.path) $w.pdbextn
    set vars(pdbextn.required)  1
    set vars(pdbextn._type) string

    lappend arguments cpdberrf
    xentry $w.cpdberrf \
	-label [subst {Name of log file for the embl-like format build}]\
	-textvariable [namespace current]::vars(cpdberrf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.cpdberrf delete 0 end
    $w.cpdberrf insert end [subst domainer.log1]
    pack $w.cpdberrf -side top -fill both
    set vars(cpdberrf.path) $w.cpdberrf
    set vars(cpdberrf.required)  1
    set vars(cpdberrf._type) outfile

    lappend arguments pdberrf
    xentry $w.pdberrf \
	-label [subst {Name of log file for the pdb format build}]\
	-textvariable [namespace current]::vars(pdberrf) \
	-checkcommand ::EMBOSS::check_outfile\
	-state [lindex {disabled normal} [subst 1]]
    $w.pdberrf delete 0 end
    $w.pdberrf insert end [subst domainer.log2]
    pack $w.pdberrf -side top -fill both
    set vars(pdberrf.path) $w.pdberrf
    set vars(pdberrf.required)  1
    set vars(pdberrf._type) outfile

    set w [lindex $wlist end]
    set wlist [lreplace $wlist end end]
    okcancelhelp $w._okcancelhelp -bd 2 -relief groove\
	-ok_command "::EMBOSS::run_dialogue [namespace current] $w" \
	-cancel_command "destroy $w" \
	-help_command {show_url [::EMBOSS::data_dir]/../doc/programs/html/domainer.html}
    pack $w._okcancelhelp -side bottom -fill x

    ::EMBOSS::resizebook $book(book_1).book_1
}


}; # namespace eval

