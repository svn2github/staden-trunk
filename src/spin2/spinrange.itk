# -----------------------------------------------------------------------------
# spinrange class corresponding scalebox
# -----------------------------------------------------------------------------

#
# Usual options.
#
itk::usual Spinrange {
    keep -background -borderwidth -cursor -foreground -highlightcolor \
	 -highlightthickness -insertbackground -insertborderwidth \
	 -insertofftime -insertontime -insertwidth -labelfont \
	 -selectbackground -selectborderwidth -selectforeground \
	 -textbackground -textfont
}

class Spinrange {
    inherit iwidgets::Spinner
    
    constructor {args} {
	Spinner::constructor -validate real
    } {}

    itk_option define -type type Type ""
    itk_option define -range range Range "" 
    itk_option define -step step Step 1 
    itk_option define -wrap wrap Wrap 1
    itk_option define -default default Default ""
    
    public method up {}
    public method down {}
    public method validate {}
}

# ------------------------------------------------
# Provide a lowercase access method for the class.
# ------------------------------------------------
proc ::spinrange {pathName args} {
    uplevel ::Spinrange $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
body Spinrange::constructor {args} {
    
    eval itk_initialize $args
    
    $itk_component(entry) delete 0 end
    
    if {$itk_option(-default) != ""} {
	$itk_component(entry) insert 0 $itk_option(-default)	
    } elseif {[lindex $itk_option(-range) 0] == ""} {
	$itk_component(entry) insert 0 "0"
    } else { 
	$itk_component(entry) insert 0 [lindex $itk_option(-range) 0] 
    }

    #
    # spinrange instance bindings.
    # FIXME: is it necessary?
    #
    bind $itk_component(entry) <Any-Leave> [code $this validate]
    bind $itk_component(entry) <Return> [code $this validate]  
}

# ------------------------------------------------------------------
# OPTION: -default
#
# Specify an initialization value to bo displayed in entry component.
# ------------------------------------------------------------------
configbody Spinrange::default {
    
    if {$itk_option(-default) != ""} {
	set def $itk_option(-default)
	if {![regexp {^[-+]?[0-9]*\.?[0-9]*([0-9]\.?[eE][-+]?[0-9]*)+$} $def] 
	&& ![regexp {^[-+]?[0-9]*\.?[0-9]+$} $def]} {
	    tk_messageBox -icon error -type ok  \
		    -message "bad default option,  default value must be\
		    an integer(or real)"
	    return 
	}
    }    
}
	

# ------------------------------------------------------------------
# OPTION: -type
#
# Specify .
# ------------------------------------------------------------------
configbody Spinrange::type {}

# ------------------------------------------------------------------
# OPTION: -range

# Set min and max values for spinrange.
# ------------------------------------------------------------------
configbody Spinrange::range {

    if {$itk_option(-range) != ""} {
	if {[llength $itk_option(-range)] != 2} {
	   tk_messageBox -icon error -type ok  \
		-message "wrong #args: should be\
		    \"$itk_component(hull) -range {min max}\ "
	    return 0
    	}

    	set min [lindex $itk_option(-range) 0]
    	set max [lindex $itk_option(-range) 1]

    	if {![regexp {^[-+]?[0-9]*\.?[0-9]*([0-9]\.?[eE][-+]?[0-9]*)+$} $min] 
	&& ![regexp {^[-+]?[0-9]*\.?[0-9]+$} $min]} {
	     tk_messageBox -icon error -type ok  \
		-message "bad range option \"$min\": minmum value must be\
		    an integer(or real)"
	    return 0
    	}
    	if {![regexp {^[-+]?[0-9]*\.?[0-9]*([0-9]\.?[eE][-+]?[0-9]*)+$} $max]
	&& ![regexp {^-?[0-9]*\.?[0-9]+$} $max]} {
    	  tk_messageBox -icon error -type ok  \
		-message "bad range option \"$max\": maxmum value must be\
		    an integer(or real)"
	    return 0 
    	}
    	if {$min > $max} {
    	  tk_messageBox -icon error -type ok  \
		-message "bad option starting range \"$min\": must be less\
		    than ending: \"$max\""
	    return 0 
    	}
    } 
}

# ------------------------------------------------------------------
# OPTION: -step
#
# Increment spinrange by step value(can be intger or float).
# ------------------------------------------------------------------
configbody Spinrange::step {
}

# ------------------------------------------------------------------
# OPTION: -wrap
#
# Specify whether spinrange should wrap value if at min or max.
# ------------------------------------------------------------------
configbody Spinrange::wrap {
}

# ------------------------------------------------------------------
# METHOD: up
#
# Up arrow button press event.  Increment value in entry. 
# Check boundary gave by option(-range).
# ------------------------------------------------------------------
body Spinrange::up {} {

    set min_v [lindex $itk_option(-range) 0]
    set max_v [lindex $itk_option(-range) 1]
    set step_v $itk_option(-step)   
    set count [$itk_component(entry) get]

    if {$min_v != "" && $max_v != ""} {
	if {$count < $min_v || $count >= $max_v} {
	    set count [expr {$min_v - $step_v}]
	}
	    set count [expr {$count + $step_v}]
    } else {
	set count [expr {$count + $step_v}]
    }
    $itk_component(entry) delete 0 end
    $itk_component(entry) insert 0 $count   
}

# ------------------------------------------------------------------
# METHOD: down
#
# Down arrow button press event.  Decrement value in entry. 
# Check boundary gave by option(-range).
# ------------------------------------------------------------------   
body Spinrange::down {} {

    set min_v [lindex $itk_option(-range) 0]
    set max_v [lindex $itk_option(-range) 1]
    set step_v $itk_option(-step) 
    set count [$itk_component(entry) get]
    
    if {$min_v != "" && $max_v != ""} {
	if {$count <= $min_v || $count > $max_v} {
	    set count [expr {$max_v + $step_v}]
	}
	    set count [expr {$count - $step_v}]
    } else {
	set count [expr {$count - $step_v}]
    }
    $itk_component(entry) delete 0 end
    $itk_component(entry) insert 0 $count  
    
}

# ------------------------------------------------------------------
# METHOD: validate
#
# Bindings used to check boundary when <Any-Leave> and <Return>.
# ------------------------------------------------------------------
body Spinrange::validate {} {

    set min_v [lindex $itk_option(-range) 0]
    set max_v [lindex $itk_option(-range) 1]   
    set o_count [$itk_component(entry) get]
    set count $o_count

    if {$min_v != "" && $max_v != ""} {	
	if {$count < $min_v } {
	    set count $min_v
	} elseif {$count > $max_v } {
	    set count $max_v
	}
	if {$o_count != $count} {
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $count
	}
    } else {    
	$itk_component(entry) delete 0 end
	$itk_component(entry) insert 0 $count
    }
}


