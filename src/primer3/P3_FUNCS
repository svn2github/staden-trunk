Data structures
===============

The key external data structures may be broken down into sequence paramaters,
primer paramaters and the primer3 internal state. Programmers may have
multiple copies of each of these.

seq_args contains a sequence and sequence-specific primer picking arguments.
Typically each sequence will have different options set.

primer_args contains the global parameters (which are likely to stay static
between sequences). This holds the "Global" boulder-io input tags.

primer_state contains data necessary for the internal working of
primer3. Keeping this in a separate data structure avoids unnecessary
initialisation costs when processing each sequence. primer_state also contains 
the results themselves. The components usable by external tools are:

typedef struct primer_state {
    /* private: fields not shown */
    /* public: */
    primer_rec *f, *r, *mid;	/* The primers */
    int n_f, n_r, n_m;		/* Number of elements in f, r and mid */
    pair_array_t best_pairs;	/* The best primer pairs */

    primer_error err;		/* Error handling */
} primer_state;

typedef struct primer_error {
    /* public: */
    int system_errno;			/* A copy of the system 'errno' */
    primer_errno local_errno;		/* Primer3 error code */
    char *error_msg;			/* text version of local_errno */
    /* private: */
    jmp_buf jmpenv;			/* errors caught in API funcs */
} primer_error;


primer3_lib.c
=============

primer_state *primer3_create(void)

    Initialises primer3 and allocates a 'state' buffer. This needs to be
    passed into all subsequent external primer3 API functions. When finished,
    used primer3_destroy to deallocate the state.
    This also initialises the alignment 'dpal' algorithm options required for
    use within primer3.

    Returns NULL upon an error.


int
primer3_chooose(primer_state *state,
                primer_args *pa,
	        seq_args *sa)

    The main interface for searching for primers. This searches in sequence
    'sa' for up to pa->num_return primers (left, right, pairs, etc).
    The results are stored in the state structure - see above.
    Returns 0 on success
            otherwise sets sa->error (and returns 1)

void primer3_destroy(primer_state *state)

    Frees up any memory used by th instance of primer3 referenced by 'state'.


void set_default_global_primer_args(primer_args *a)

    Initialises a primer_args structure to the default values.


char *pr_gather_warnings(const seq_args *sa, const primer_args *pa)

    This allocates a warning message associated with sequence 'sa' and primer
    parameters 'pa'. If no warning is necessary (as it all worked fine) then
    NULL is returned, otherwise a malloc() char * is returned.
    It is up to the caller to free this malloced string.


void pr_print_pair_explain(FILE *f, const seq_args *sa)

    This writes statistics about the primers analysed for 'sa' to the FILE
    stream 'f'.


void reverse_complement(const char *seq, char *s)
 
    Reverse and complement the sequence seq and put the result in s.


char *pr_oligo_sequence(const seq_args *sa, const primer_rec *o)

    Returns the oligo sequence for primer_rec 'o' as indexed into sequence
    'sa'. The result is returned as a static buffer so it does not need to be
    freed, but the result is only valid until the next call to
    pr_oligo_sequence.


char * pr_oligo_rev_c_sequence(const seq_args *sa, const primer_rec *o)

    As for pr_oligo_sequence, but returns the reverse and complement of the
    oligo.


int strcmp_nocase(char *s1, char *s2)

    A case insensitive version of strcmp. Unlike strcmp though this function
    only returns 0 for match and 1 for mismatch.


pr_append_str handling functions
--------------------------------

int pr_append(pr_append_str *x, const char *s)

    Appends a string onto a "pr_append_str" data type.
    Returns 0 for success, 1 for failure (out of memory).


int pr_append_w_sep(pr_append_str *x, const char *sep, const char *s)

    Used to build up separated lists of items. If 'x' is blank then 's' is
    added to 'x', otherwise both 'sep' and 's' are added.
    Returns 0 for success, 1 for failure (out of memory).


int pr_append_new_chunk(pr_append_str *x, const char *s)

    As pr_append_w_sep, but using a standardised separator (';').
    Returns 0 for success, 1 for failure (out of memory).


void pr_set_empty(pr_append_str *x)

    Sets 'x' to be a blank string.


int pr_is_empty(const pr_append_str *x)

    Tests whether 'x' is empty. Returns true or false.


format_output.c
===============

int
format_pairs(FILE *f,
	     const primer_args *pa,
	     const seq_args *sa,
	     const pair_array_t *best_pairs)

    This prints to FILE 'f', in a human friendly format, the best primer
    pairs 'best_pairs' chosen in sequence 'sa' with args 'pa'.
    Returns 0 for success, 1 for failure.


int
format_oligos(FILE *f,
	      const primer_args *pa,
	      const seq_args    *sa,
	      primer_rec  *h,
	      int n;
	      oligo_type l)

    Much like format_pairs, except this function displays primer information
    for a single left, right or internal primer.
    Returns 0 for success, 1 for failure.


boulder_input.c
===============

int
read_record(const program_args *prog_args,
	    primer_args *pa,
	    seq_args *sa)

    Reads a single boulder-io format record from stdin and constructs
    primer_args and seq_args structures. The seq_args structure is initialised 
    to blank defaults, but the primer_args structure retains any existing
    values.
    Returns 1 for a record read (and pa/sa updated), 0 otherwise.


void
free_record(seq_args *sa) 

    Deallocates any memory allocated from read_record in the seq_args (sa)
    structure.


void
free_seq_lib(seq_lib *p)

    Free exogenous storage associated with a seq_lib (but not the seq_lib
    itself).  Silently ignore NULL p.  Set *p to 0 bytes.


dpal.c
======

void dpal_set_default_nt_args(dpal_args *)

    Initialize the argument to the default matrix for nucleotide matches.


void dpal_set_h_nt_matrix(dpal_args *)

    Routine primarily for testing: sets CC & GG matches to 3, AA & TT 
    matches to 2.


int dpal_set_ambiguity_code_matrix(dpal_args *)

    The argument a must be a DNA scoring matrix.  Modifies a so that it for a
    match between any two ambiguity codes (or between ambiguity code and base),
    e.g. B and S, the score will be the maximum of score between any base in B
    and any base in S, in the example between any pair in {C, G, T} X {C, G}.
    This function overwrites any scores already associated with pairs of
    ambiguity codes.
    Return 0 on error, 1 on success.


int dpal(const unsigned char *, const unsigned char*,
	 const dpal_args *, dpal_results *);

    Align the first 2 arguments, using the scoring matix mat and the additional
    arguments supplied in the align_args.  Return the results in the
    align_results struct.
    Returns 0 for success, 1 for failure
