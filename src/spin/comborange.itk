# ------------------------------------------------------------------
# comborange class
# 
# Implements a "seq_id" widget. It provides several options to allow
# configure "seq_id" as needed.
# ------------------------------------------------------------------

itk::usual comborange {
    keep -background -borderwidth -cursor -foreground -highlightcolor \
	 -highlightthickness -insertbackground -insertborderwidth \
	 -insertofftime -insertontime -insertwidth -labelfont \
	 -selectbackground -selectborderwidth -selectforeground \
	 -textbackground -textfont
}

class Comborange {

    inherit itk::Widget

    constructor {args} {}

    itk_option define -feature feature Feature "no"
    itk_option define -identifier identifier Identifier "yes"
    itk_option define -trange trange Trange "yes"
    itk_option define -labeltext labeltext Labeltext ""
    itk_option define -single single Single "no"
    itk_option define -textvariable textVariable Variable ""
    itk_option define -labelsingle labelSingle Labelsingle ""
    itk_option define -default default Default ""
    itk_option define -width width Width 30
    itk_option define -start_value startValue Startvalue 0
    itk_option define -end_value endValue Endvalue 0
   
    public method get_s {}
    public method get_e {}
    public method get_seqname {}
    public method get_selected {}
    public method get_curselection {}
    public method get_single {}
   
    private method _seqfile_changed {args}
    private method _scroll_end {args}

 
    variable _seq
    variable _seqfile
    variable _from
    variable _to
}

#
# Provide a lowercase access method for the class.
# 
proc ::comborange {pathName args} {
    uplevel ::Comborange $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
body Comborange::constructor {args} {
    
    itk_component add frame {                    
	iwidgets::labeledframe $itk_component(hull).frame 
    } {
	usual
    }
    pack $itk_component(frame) -fill both -padx 1 -pady 1
    set cs [$itk_component(frame) childsite]

    iwidgets::combobox $cs.seqfile \
	    -labeltext "Seq identifier" \
	    -labelpos w \
	    -completion false \
	    -grab global \
	    -selectioncommand [code $this _seqfile_changed]
    
    pack $cs.seqfile -fill both  -padx 2 -pady 2
     
    set sequences [sequence_names]
    if {[llength $sequences] < 1} {
	SeqActivateMenu_Initial
    } elseif {[llength $sequences] == 1} {
	#ActivateMenu_Open1
    }

    foreach i $sequences {
	set dir [lindex $i 0]
	if {$dir == "H"} {
	    set _seq [lindex $i 1]
	    set _line [lindex $i 2]
	}
	$cs.seqfile insert list end [lindex $i 1]
    }
    
    regexp {([0-9]+)\.\.([0-9]+)} $_line dummy _from _to
   
    spinrange $cs.single -range "$_from $_to"\
                         -validate integer \
			 -sticky nse \
		         -width 7 
    pack $cs.single -fill both -padx 4 -pady 10

    twinnedrange $cs.trange -range "$_from $_to"    
    pack $cs.trange -fill both -padx 4 -pady 10

    set bg [$cs.seqfile cget -textbackground]
    iwidgets::scrolledlistbox $cs.list \
		                     -vscrollmode dynamic \
                                     -hscrollmode dynamic \
				     -selectmode extended \
				     -exportselection 0 \
				     -textbackground $bg \
				     -visibleitems 20x6 \
				     -borderwidth 2 \
				     -relief sunken     
    pack $cs.list -fill both -padx 4 -pady 10

    # Initialize the widget based on the command line options.
    eval itk_initialize $args

    if {[$cs.seqfile cget -textvariable] == ""} {
	$cs.seqfile configure -textvariable [scope _seqfile($this)]
    }
    global [$cs.seqfile cget -textvariable]
    trace variable [$cs.seqfile cget -textvariable] w "after idle {[code $this _seqfile_changed]}"
    
    $cs.seqfile delete entry 0 end
    if {$itk_option(-default) != ""} {
	$cs.seqfile insert entry 0 $itk_option(-default)
    } else {
	$cs.seqfile insert entry 0 $_seq
    }

    _scroll_end
    $cs.seqfile xview moveto 1.0
    $cs.seqfile configure -command "bell"
    #set ffgg [$cs.seqfile cget -foreground]
    #[$cs.seqfile component entry] configure -disabledforeground $ffgg 
    $cs.seqfile configure -editable false  
    $cs.single delete  0 end
    $cs.single insert end "$_from"
}

# ------------------------------------------------------------------
# OPTION: -feature
#
# Boolean describing whether or not use faeture table.
# ------------------------------------------------------------------
configbody Comborange::feature {

    switch $itk_option(-feature) {
	"yes" {

	}
	"no" {
	    pack forget $itk_component(frame).childsite.list 
	}
	default {
	    error "bad feature option \"$itk_option(-feature)\",\
		    should be either yes or no"
	}
    }
}

# ------------------------------------------------------------------
# OPTION: -identifier
#
# Boolean describing whether or not display sequence identifier.
# ------------------------------------------------------------------
configbody Comborange::identifier {

    switch $itk_option(-identifier) {
	"yes" {

	}
	"no" {
	    pack forget $itk_component(frame).childsite.seqfile
	}
	default {
	    error "bad feature option \"$itk_option(-identifier)\",\
		    should be either yes or no"
	}
    }
}

# ------------------------------------------------------------------
# OPTION: -trange
#
# Boolean describing whether or not display double base position.
# ------------------------------------------------------------------
configbody Comborange::trange {

    switch $itk_option(-trange) {
	"yes" {

	}
	"no" {
	    pack forget $itk_component(frame).childsite.trange
	}
	default {
	    error "bad feature option \"$itk_option(-trange)\",\
		    should be either yes or no"
	}
    }
}

# ------------------------------------------------------------------
# OPTION: -single
#
# Boolean describing whether or not display single base position.
# ------------------------------------------------------------------
configbody Comborange::single {

    switch $itk_option(-single) {
	"yes" {
	    pack forget $itk_component(frame).childsite.trange
	}
	"no" {
	    pack forget $itk_component(frame).childsite.single
	}
	default {
	    error "bad feature option \"$itk_option(-single)\",\
		    should be either yes or no"
	}
    }
}

# ------------------------------------------------------------------
# OPTION: -labeltext
#
# Specifies the label text for frame component.
# ------------------------------------------------------------------
configbody Comborange::labeltext {
    $itk_component(frame) configure -labeltext $itk_option(-labeltext)
}

# ------------------------------------------------------------------
# OPTION: -textvariable
#
# Specifies the name of the variable for the entryfield in combobox.
# ------------------------------------------------------------------
configbody Comborange::textvariable {

    set tv [$itk_component(frame).childsite.seqfile cget -textvariable]
    if {$tv != ""} {
	foreach t [trace vinfo $tv] {
	    trace variable $itk_option(-textvariable) \
		[lindex $t 0] [lindex $t 1]
	    trace vdelete $tv [lindex $t 0] [lindex $t 1]
	}
    }
    $itk_component(frame).childsite.seqfile \
	    configure -textvariable $itk_option(-textvariable)
}

# ------------------------------------------------------------------
# OPTION: -labelsingle
#
# Specifies the label text for the single base position.
# ------------------------------------------------------------------
configbody Comborange::labelsingle {
    $itk_component(frame).childsite.single \
	    configure -labeltext $itk_option(-labelsingle)
}

# ------------------------------------------------------------------
# OPTION: -width
#
# ------------------------------------------------------------------
configbody Comborange::width {
    $itk_component(frame).childsite.seqfile configure \
    	-width $itk_option(-width)
}

# -----------------------------------------------------------------------------
# OPTION: -default
#
# Specifies an initialization file to be displayed in Seq identifier. 
# -----------------------------------------------------------------------------
configbody Comborange::default { }

configbody Comborange::start_value { }

configbody Comborange::end_value { }

# ------------------------------------------------------------------
#configbody Comborange::updatecmd {
#
#}

# -----------------------------------------------------------------------------
# PRIVATE METHOD: _seqfile_changed
#
# Invoked when a new sequence is selected
# -----------------------------------------------------------------------------
body Comborange::_seqfile_changed {args} {

    set _line_selected ""
    set _seq_changed [$itk_component(frame).childsite.seqfile get]

    set seq_id [name_to_seq_id $_seq_changed]
    global $seq_id.start $seq_id.end

    set sequences [sequence_names]
    foreach i $sequences {
	set _seq_selected [lindex $i 1]
	if { $_seq_changed == $_seq_selected } {
	    set _line_selected [lindex $i 2]
	}
    }
	
    regexp {([0-9]+)\.\.([0-9]+)} $_line_selected dummy _from _to

    $itk_component(frame).childsite.trange configure -range "$_from $_to"
    $itk_component(frame).childsite.single configure -range "$_from $_to"

    set _tr [winfo children $itk_component(frame).childsite.trange]
    set _trstart [lindex $_tr 0]
    set _trend [lindex $_tr 1]
    $_trstart delete 0 end
    if {[info exists $seq_id.start] && $itk_option(-start_value) != 0} {   
	$_trstart insert 0 [set $seq_id.start]
    } else {
	$_trstart insert 0 $_from
    }
    $_trend delete 0 end
    if {[info exists $seq_id.end] && $itk_option(-end_value) != 0} {   
	$_trend insert 0 [set $seq_id.end]
    } else {
	$_trend insert 0 $_to
    }
    
    $itk_component(frame).childsite.single delete 0 end
    $itk_component(frame).childsite.single insert 0 "$_from"

    if {$itk_option(-feature) == "yes"} {
	set seq_ncds [seq_info $seq_id numbercds]  
	for {set i 1} {$i <= $seq_ncds} {incr i} {
	    set seq_key_index_cds($i) [seq_info $seq_id key_index_cds $i ]
	}
	$itk_component(frame).childsite.list delete 0 end
	for {set i 1} {$i <= $seq_ncds} {incr i} {
	$itk_component(frame).childsite.list insert end $seq_key_index_cds($i)
	}
    }

    $itk_component(frame).childsite.list configure -hscrollmode dynamic
    $itk_component(frame).childsite.list configure -vscrollmode dynamic

    _scroll_end 
}

# ------------------------------------------------------------------
# METHOD: get_s 
#
# Returns a value of the "start" entry_component.
# ------------------------------------------------------------------
body Comborange::get_s {} {

    return [$itk_component(frame).childsite.trange get_s]
}

# ------------------------------------------------------------------
# METHOD: get_e
#
# Returns a value of the "end" entry_component.
# ------------------------------------------------------------------
body Comborange::get_e {} {

    return [$itk_component(frame).childsite.trange get_e]
}

# ------------------------------------------------------------------
# METHOD: get_single
#
# Returns a value of the "single" entry_component.
# ------------------------------------------------------------------
body Comborange::get_single {} {

    return [$itk_component(frame).childsite.single get]
}
# ------------------------------------------------------------------
# METHOD: get_seqname
#
# Returns the sequence name in the entry_component.
# ------------------------------------------------------------------
body Comborange::get_seqname {} {

    set seq_name [$itk_component(frame).childsite.seqfile get]
    set seq_id [name_to_seq_id $seq_name]

    if {$seq_id == -1} {
	return ""
    } 
    return $seq_name
}

# ------------------------------------------------------------------
# METHOD: get_curselection
#
# Returns the contents of the listbox element indicated by the current 
# selection indexes.
# ------------------------------------------------------------------
body Comborange::get_curselection {} {
    
    return [$itk_component(frame).childsite.list getcurselection]
}

# ------------------------------------------------------------------
# METHOD: _scroll_end
#
# Ensures that the combobox displays the end of the sequence name and that
# the popdown list also shows the end. The reason is that the default width
# can be too small in some cases (such as long pathnames), but clearly it is
# the last component of the pathname which is the most useful to select
# between.
# ------------------------------------------------------------------
body Comborange::_scroll_end {args} {
    set cs [$itk_component(frame) childsite]

    [$cs.seqfile component entry] xview end
}
