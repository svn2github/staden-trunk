_split()
@node Vector_Clip
@chapter Screening Against Vector Sequences
@cindex Vector_Clip

@menu
@ifset html
* Vector_Clip-Introduction::   Introduction
@end ifset
* Vector_Clip-Algorithms:: Algorithms
* Vector_Clip-Options::    Command line options
* Vector_Clip-Parameters::    Command line parameters
* Vector_Clip-Errors::     Error codes
* Vector_Clip-Examples::   Examples
* Vector_Clip-Vector_Primer-Files:: Vector_Primer Files
* Vector_Clip-Vector_Primer-File-Notes:: Vector_Primer Notes
* Vector_Clip-Sites::      Defining the cloning and primer sites for vector_clip
* Vector_Clip-Cloning Site::   Finding the cloning site
@end menu

@ifset html
_split()
@node Vector_Clip-Introduction
@section Introduction
@end ifset
@cindex Screening against vector sequence
@cindex Vector sequence: screening

For most assembly engines to work well it is necessary to  present them
with data of good quality and which contains only the target sequence. One
pre-assembly task is to locate and mark all segments of readings which contain
vectors used in their production. In our package this task is performed by
vector_clip which compares batches of readings against vector sequences.
Sequence readings are stored in experiment file format 
(_fpref(Formats-Exp, Experiment File, formats))
 and, for
the majority of projects 
each experiment file should contain the data
required by vector_clip: the file names of the vectors to screen against,
and, for the sequencing vector, the position of the cloning and primer sites.
See 
_oref(Vector_Clip-Vector_Primer-Files, Vector_Primer files)
for an alternative and simpler method of defining vector data for vector_clip.
The program pregap4 
(_fpref(Pregap4-Introduction,Pregap4, pregap4)), 
contains modules for creating experiment files
from trace files, and for adding data about the vectors used. 
When
vector_clip runs it adds records to the reading's experiment file to 
denote the start and end of any segments which are found to match the vectors. 

For conventional sequencing projects there are two types of vector for which
readings will need to be screened: the sequencing vector, and, for cases
where, say, whole cosmids or BACs have been shotgunned, the cloning vector.  
These two
screening tasks are different.  When screening for the sequencing vector we
may expect to find data to exclude, both from the primer region and, when the
insert is short, from the other side of the cloning site. It is also a wise
precaution to check for rearrangements of the sequencing vector.  When
screening out cosmid vector we may find that either the 5' end, or the 3' end,
or the whole of the sequence is vector. Also for the cloning vector search we
need to compare both strands of the sequence.

In order to filter out readings that contain the sequences
of contaminant DNA such as E. coli, a separate program screen_seq should
be used (_fpref(Screen_seq, Screening for known possible contaminant
sequences, screening))

A further type of search is required for a new method that is being
developed at MRC HGMP, Hinxton, UK.  This new method (M. Starkey,
personal communication) is an application of a technology described as
"molecular indexing" @cite{Unrau, P. and Deugau, K.V. (1994) Non-cloning
amplification of specific DNA fragments from whole genomic DNA digests
using DNA indexers. Gene 145, 163-169}. It produces sequences with a
primer at their 3' ends which need to be found and removed.

Some groups are using transposons to produce random start points for
sequencing reactions, and vector_clip contains an experimental search
procedure for dealing with the data generated by such methods.

Vector_clip is usually run as part of the pregap4 process
(_fpref(Pregap4-Introduction,Pregap4, pregap4))
and will usually be called three times: the
first to locate and mark the sequencing vector; next to check for vector
rearrangements; and finally to locate and mark cosmid vector segments.

Vector_clip operates on batches of readings using files of file names:
one input file and two output files - one for the names of the readings
that pass and one for those that fail. The program also modifies the
reading files.

In earlier versions of vector_clip all the information
needed about the vector (i.e.  its name, location on disk, the cloning
and primer sites used) for each reading was expected to be stored in the reading's
experiment file (_fxref(Formats-Exp, Experiment File, formats)) but, as
is explained in the next paragraph, the 
newest version employs an alternative method for providing data about
sequencing vectors.
For notes
on defining the cloning and primer sites, see 
_oref(Vector_Clip-Sites, Defining the Positions of Cloning and Primer Sites for Vector_Clip).

The 1999.0 release of the package contained an experimental new method of
providing vector_clip with data about the vectors to search for. Using feedback
from the trial period we have simplified the method and improved the algorithm.

The new method
uses files containing, not the complete vector sequences,
but the segments of sequence between the primers and the cloning
site. These files are termed "vector_primer" files see 
_oref(Vector_Clip-Vector_Primer-Files, Vector_Primer files),
and the vector_primer
mode of vector_clip uses the data in these files to search for the vectors.

The vector_primer file can contain the data for up to (at present) 100 
vector and primer combinations, although it would not be efficient to
compare each reading against an unnecessarily large number of records.
When vector_clip finds a match to one of the vectors defined in the 
vector_primer file it can not only mark the matching segment in the reading,
but also adds the name of the file containing the vector sequence, and the
primer type to the readings experiment file. The vector file name can then
be used by vector_clip in its search for vector rearrangements, and the
primer type can be used by gap4 in its analysis of read pairs (Note, however,
that for read pair analysis, 
gap4 still needs to know which readings came from the same template,
so that data must be added to the Experiment file in some other way).

A big advantage of the vector_primer file method, is that it simplifies the
task of providing vector_clip with data. In addition, the task of creating the
vector_primer files is simplified in that the -V option in vector_clip
removes the necessity for the records in the vector_primer file to
contain precisely the sequence between the primer and the cloning site
_oref(Vector_Clip-Vector_Primer-File-Notes, Vector_Primer File Notes).

Vector_primer files are also used by the search for transposon data.

If setting up these programs seems a little
daunting, it is important to realise that the majority 
users need not concern themselves
with the details of vector_clip and the creation of experiment files for
their readings; or if they do, these configuration operations are
only performed
once per project, and are made relatively easy by the use of pregap4.


_split()
@node Vector_Clip-Algorithms
@section Algorithms


For locating sequencing vector the program uses a dynamic programming
algorithm and two percentage matches as cutoffs - one for the 5' end
and another for the 3' end. Both searches include the poor quality data
at the ends of the readings. 
This mode writes the SL and SR records in experiment files.

If the users selects the vector_primer file mode of vector_clip the
program searches the 5' end of each reading for
all of the forward and reverse sequence segments in the primer_vector
file and notes
the one which matches best. If this one is above the user defined
threshold the 5' clip point will be set and the
experiment file will be modified accordingly.
The program then compares the rest of the reading with all of the
segments in the vector_primer file to find the one which matches best.
Again if the user defined threshold is reached the experiment file will
be modified accordingly. If the best 5' and 3' matches come from different
records in the vector_primer file a warning message is printed.
If a 5' match is found it will be used to determine the file name of the
vector sequence and the primer type. If only a 3' match is found it will
be used to determine these items. If no match is found no PR record is
written.
This mode writes the SL, SR SF and PR records in experiment files. If the
vector file name is missing from the vector_primer file record, the SF
record is not written.

For locating cloning vector two algorithms are available, both of which
use hashing. 
The original method needs a "Word
length" (word_length), the "Number of diagonals to combine" (num_diags) and
a "Cutoff score" (diagonal_score).  The word length is the minimum number
of consecutive bases that will count as a match. The algorithm treats the
problem like a dot matrix comparison. First it finds all matches of length
word_length; then it locates the diagonal with the highest normalised
score.  Then it adds the scores for the adjacent diagonals (num_diags).  If
the combined score is at least "diagonal_score" the experiment file is
updated to indicate the location of the vector sequence.  The score
represents the proportion of a diagonal that contains matching words, and
the maximum score for any diagonal is 1.0.
This mode writes the CS records in experiment files.
If the whole reading is cloning vector
this mode writes a PS record containing "all cloning vector",


A newer method also hashes using "word_length" consecutive bases and 
accumulates the hits for each diagonal, but instead of using a score cutoff,
it decides if there is
a match using a probability threshold "P" supplied by the user. 
For each length of diagonal vector_clip calculates "E" the score that would be
expected for probability "P", and then compares it with the observed score "O".
If for any diagonal O>E a match is declared and expressed as 100(O-E)/E. This
new method is an attempt to overcome the problem that even though the
scores on diagonals are normalised to lie in the range 0.0 to 1.0 the scores
are still a function of the diagonal length. The probability P hence allows
vector_clip to use a different cutoff score for each length of diagonal.
Tests have shown that the probability based algorithm is very much more 
reliable than the older one. 
By default the program still
uses the old algorithm, the probability based one being switched on by
the user specifying a probability cutoff (option -P). It is strongly
recommended that the probability based method is used and for our data we have
found that a probability of 0.0000000000001 or 1.0e-13 gives good results.
This mode writes the CS records in experiment files.
If the whole reading is cloning vector
this mode writes a PS record containing "all cloning vector".

The search for "vector rearrangements" uses a simple algorithm which
looks only for a match of length "minimum match".  All readings that
contain a string of characters of at least this length that match a segment
of the vector sequence exactly will be classed as "vector rearrangements"
and their names will not be written to the file of passed file names.
This mode writes a PS record containing "vector rearrangement" in experiment 
files if a match is found. Note that if a reading's Experiment file does not
contain an SF (i.e. name of sequencing vector file) the vector rearrangements
search does not fail the reading: its name goes into the pass file.

The search for transposon generated data is somewhat complicated, as is 
explained below.

The transposon ends must be stored in a vector_primer file.
The vector sequence file should be named in the SF record.
Numerous scores are required.
       
First get the transposon end sequences from the vector_primer file.
Then get the vector sequence and rotate it around the cloning site.
Next use dynamic programming to search with both of the transposon end 
sequences and note the highest score. If above score L reset SL.
Now use hashing to 
search the 20 bases after SL for a match to any part of the 
vector, on both strands.
If the best match is above score l, use dynamic programming to 
try to align from the match point to the cloning site. If the 
alignment score is >= score R reset SL.
If the previous two steps fail to find a match to vector we assume that
the transposon inserted into the target DNA and not the vector.
The reading could hence run into vector at its 3' end so we
use dynamic programming to
search from SL onwards, for the sequences either side of the
cloning site (we do not know the orientation of the transposon
(and hence the read) relative to the vector).
If we find a match >= score R reset SR.

_split()
@node Vector_Clip-Options
@section Options

@example
Usage: vector_clip [options] file_of_filenames
Where options are:
    [-s mark sequencing vector]      [-c mark cloning vector]
    [-h hgmp primer]                 [-r vector rearrangements]
    [-w word_length (4)]             [-n num_diags (7)]
    [-d diagonal score (0.35)]       [-l minimum match (20)]
    [-L minimum % 5' match (60)]     [-R minimum % 3' match (80)]
    [-m default 5' position]         [-t test only]
    [-M Max vector length (100000)]  [-P max Probability]
    [-v vector_primer filename]      [-i vector_primer filename]
    [-V vector_primer length]
    [-p passed fofn]                 [-f failed fofn]
@end example

Options:

@table @code
@item -s
Mark sequencing vector. Searches for 5' primer, 3' running into vector.
@item -c
Mark cloning vector. Searches both strands for cloning vector.
@item -h
Hgmp primer. Searches 3' end for a primer.
@item -i vector_primer filename
Mark transposon data.
@item -r
Vector rearrangements. Searches for sequencing vector rearrangements.
@item -t
Test only. Does not change the experiment files, displays hits.
@end table

@node Vector_Clip-Parameters

@section Parameters (defaults in brackets)
@table @var
@item @code{-L} minimum percentage match 5' end (60)
sequencing vector searches and transposon search
@item @code{-R} minimum percentage match 3' end (80)
sequencing vector searches and transposon search
@item @code{-m} minimum 5' position
allows a minimum 5' end cutoff to be set if a sufficiently good match is not 
found (i.e. it is really a default 5' cutoff position). 
If a value of -1 is used the program will set the cutoff to be the 
distance between the primer and the cloning site.
@item @code{-v} vector-primer-pair filename
sequencing vector search using vector-primer-pair file
@item @code{-V} vector_primer length
the length of the sequence stored in the vector_primer file to use for
the 5' search
@item @code{-w} word_length (4)
cloning vector search hash length
@item @code{-P} probability
cloning vector search, (a score less likely than P is a match)
@item @code{-n} num_diags (7)
cloning vector search, old score based algorithm: number of diagonals to combine
@item @code{-d} diagonal score (0.35)
cloning vector search, old score based algorithm
@item @code{-l} minimum match (20)
sequencing vector rearrangements and transposon search minimum match length
@item @code{-M} maximum vector length (100000)
all algorithms, reset for vectors >100000 bases
@item @code{-p} passed fofn
file of file names for passed files
@item @code{-f} failed fofn
file of file names for failed files
@item input fofn ...
input file of file names
@end table

_split()
@node Vector_Clip-Errors
@section Error codes
@cindex Vector_Clip: error codes
@cindex error codes in vector_clip

The following errors can occur.

@cindex Vector_Clip: error codes
@enumerate 1
@item Error: could not open experiment file
@item Error: no sequence in experiment file
@item Error: sequence too short
@item Error: missing vector file name
@item Error: missing cloning site
@item Error: missing primer site
@item Error: could not open vector file
@item Error: could not write to experiment file
@item Error: could not read vector file
@item Error: missing primer sequence
@item Error: hashing problem
@item Error: alignment problem
@item Error: invalid cloning site
@item Warning: sequence now too short (no message)
@item Warning: sequence entirely cloning vector (no message)
@item Warning: possible vector rearrangement (no message)
@item Warning: error parsing vector_primer file
@item Warning: primer pair mismatch!
@item Aborting: more than X entries in vector_primer file
@end enumerate


_split()
@node Vector_Clip-Examples
@section Examples

Screen for sequencing vector using 5' cutoff of 70%, a 3' cutoff of 90%
and default 5' primer position of 30. The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.


@example
@code{vector_clip -s -L70 -R90 -m30 -pfiles.pass -f files.fail files.in}
@end example

Screen for sequencing vector using 5' cutoff of 60%, a 3' cutoff of 80%
and default 5' primer position of 30. The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail. This shows
that the default search is for sequencing vector.


@example
@code{vector_clip -m30 -pfiles.pass -f files.fail files.in}
@end example

Screen for sequencing vector using 5' cutoff of 60%, a 3' cutoff of 80%
and a vector-primer-pair file called vpfile. Only the 20 bases closest
to the cloning site will be used for the 5' search.
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.


@example
@code{vector_clip -v vpfile -V20 -pfiles.pass -f files.fail files.in}
@end example

Screen transposon data using 5' cutoff of 80%, a 3' cutoff of 85%, a match length of 10
and a vector-primer-pair file called vector_primer_file. 
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.


@example
@code{vector_clip -i vector_primer_file -L 80 -R 85 -l 10 -pfiles.pass \}
@code{            -f files.fail files.in}
@end example


Screen for cloning vector using the old algorithm with a word length of 4, 
summing 7 diagonals and diagonal cutoff score of 0.4. 
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.


@example
@code{vector_clip -c -w4 -n7 -d0.4 -pfiles.pass -f files.fail files.in}
@end example

Screen for cloning vector using the probability based algorithm with a 
word length of 4 and probability cutoff of 1.0e-13.
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.


@example
@code{vector_clip -c -P 1.0e-13 -pfiles.pass -f files.fail files.in}
@end example


Screen for 3' primer using a cutoff of 75%.
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.

@example
@code{vector_clip -h -R75 -pfiles.pass -f files.fail files.in}
@end example

Screen for sequencing vector rearrangements using a cutoff of 20 bases.
The batch of files to process are
named in files.in, the names of the passed files are written to
files.pass and the names of those that fail to files.fail.

@example
@code{vector_clip -r -l20 -pfiles.pass -f files.fail files.in}
@end example


_split()
@node Vector_Clip-Vector_Primer-Files
@section Vector_Primer file format
@cindex Vector_primer files
@cindex format: vector_primer files

The vector_primer files store
the data for each vector/primer pair combination as a single record
(line) and up to 100 records can be contained in a file. The items on each
line must be separated by spaces or tabs (only the file name can contain spaces)
and a newline character ends the record. 
It is important to realise that the format has been simplified since the first
version of the method appeared in release 1999.0 and any files created for the
1999.0 release will need to be edited!

The items in a record are:

name seq_r seq_f file_name

name is an arbitrary record name.
seq_r is the sequence between the reverse primer and the cloning site.
seq_f is the sequence between the forward primer and the cloning site.
file_name is the name of the file containing the complete vector sequence.

An example file containing two entries 
(for m13mp18, and a vector called f1) is 
shown below. "\" symbols have been used to denote wrapped lines and so it
can be seen that the first record is shown on two lines and the next on 1.

@example

m13mp18 attacgaattcgagctcggtaccc ggggatcctctagagtcgacctgcaggcatgcaagcttggc \
/pubseq/tables/vectors/m13mp18.seq
f1 CCGGGAATTCGCGGCCGCGTCGACT CTAGACTCGAGTTATGCATGCA  af_clones_vec
@end example


Note that the segments of sequence can be longer (or shorter) than the
sequences between the primer and the cloning site. The -V option of
vector_clip allows the user to specifiy that a fixed number of bases
closest to the cloning site be used for any particular run, and so the
same record in the vector_primer file could be used for several primers
as long as the cloning site was the same. If it is necessary to get the 
sequence segments
precisely defined refer to the figure below. This 
contains an annotated section of the
m13mp18 vector around the SmaI site, to see how it corresponds to the
first record in the vector_primer file. The primers shown are the 16mer 
reverse(-21) and the 17mer forward(-20), and the vector_primer
record is the sequence between the primers with a space at the cloning site,

followed by a file name.

@example
                                                 SmaI 
                                                 ++++++++10++ 
                         ---20--------10---------123456789012
               r(-21)    432109876543210987654321
         aacagctatgaccatg
 acacaggaaacagctatgaccatgattacgaattcgagctcggtacccggggatcctcta
       6210      6220      6230      6240      6250      6260

 ++++++20++++++++30++++++++40+
 34567890123456789012345678901       f(-20)
                              tgaccggcagcaaaatg
 gagtcgacctgcaggcatgcaagcttggcactggccgtcgttttacaacgtcgtgactgg
       6270      6280      6290      6300      6310      6320

@end example



@node Vector_Clip-Vector_Primer-File-Notes
@section Vector_Primer File Notes

There are several consequences of using vector_primer files
to specify the sequencing vector details. Please read a description
of the vector_primer file algorithm in the algorithms section 
_oref(Vector_Clip-Algorithms, Vector_clip algorithms).


Firstly, to get the vector segments of readings marked correctly
it is not necessary to include the relevant data in their
experiment files.

Secondly, because vector_clip compares all the primer-vector pairs in the
primer_vector file it would be inefficient to include very large numbers
of records in these files. Instead it would be better to have a master 
vector_primer file which contained all the combinations used in the lab
and then to copy the relevant ones to project specific files.

Thirdly, even though vector_clip can write the PR record (primer type) into
the experiment file if it finds a match, gap4 still needs the template name
data in order to do read pair analysis.

Finally note that the -V option for vector_clip means that the
segments of sequence in the vector_primer file need not be made exactly the
right length when the files are created: it matters only that the
cloning site is correctly specified and that there is sufficient length
of sequence on either side. For example, vector_primer files
could be created in which all records included 40 bases from either side
of the cloning sites. The -V option allows the
alignment to be limited to the segment of sequence closest to the
cloning site. For example, -V 20 specifies that at most 20 bases around
the cloning site are used. 

_split()
@node Vector_Clip-Sites
@section Defining Cloning and Primer Sites for Vector_Clip 
@cindex Cloning site, defining
@cindex Primer site, defining
@cindex Vector_Clip: cloning site, defining
@cindex Vector_Clip: primer site, defining
@cindex vector file formats
@cindex file formats for vectors
@cindex formats: vector files

Vector sequences should be stored in simple text files with up to 80
characters of data per line. Sequencing vectors are those vectors such
as m13 used to produce templates for sequencing.  All other vectors,
such as cosmid vectors, that are used to purify and grow the DNA prior
to it being subcloned into sequencing vectors are termed "cloning
vectors".  It is important that the files containing cloning vector
sequences which are used by vector_clip are arranged so that the cloning site
follows the last base in the file.  For example (where X is the cloning
site):

@example
start of file	
acatacatacatatata
acatagatagatacaga
.
.
.
cagatataX
end of file

     Cloning Vector File Base Ordering
@end example


In order for vector_clip to search readings for segments of sequencing 
vectors it either needs to use a vector_primer file or 
it needs to know the positions of the cloning site and primers.
If not using a vector_primer file, each reading's experiment file should contain SC and SP
records, and also a primer type record (PR).
The following section explains the numbering system used with
an example for m13mp18, and then describes how to use spin 
(_fpref(SPIN-Introduction, Introduction, spin))
to work out the values for other vector, cloning site, and primer combinations.


The position of the cloning site depends on the ordering of the bases in
the particular vector sequence file being used. That is, as the
sequences are circular, the file may be arranged to start at any base
and still give the same circular sequence.  Vector_Clip must be told the
correct position of the cloning site, then, relative to that, the
position of the first base that will be included in the reading. i.e.
the relative position of the first base 3' of the primer.

Below we use
EMBL entry M13MP18 as an example.  The figure includes a double stranded
listing of 120 characters of m13mp18 around the SmaI site at 6249, and 
some of the restriction sites. Between the restriction sites and the sequence
we have added lines to explain the numbering used by vector_clip. The
numbers below the row of "+" symbols show positive positions (to the right
of the SmaI cloning site), and the numbers below the "-" symbols show
negative positions (to the left of the cloning site). Below these lines
we show the sequences of the 16mer reverse primer "r(-21)" which is at
relative position -24, and the 17mer forward primer "f(-20)" which is at
relative position 41.

@example
The positions of SmaI site and forward and reverse primers for M13MP18

                               EcoRI                                            
                               .   TaqI                                         
                               .   .     SacI                                   
                               .   .     .     XmaI                             
                               .   .     .     .HpaII
                               .   .     .     ..AsuC2I                         
                               .   .     .     ..SmaI                           
                               .   .     .     ...  BamHI                       
                               .   .     .     ...  MboI                        
                               .   .     .     ...  Sau3AI                      
                               .   .     .     ...  XhoII                       
                               .   .     .     ...  . PspN4I          
                               .   .     .     ...  . .   XbaI        
                                                 ++++++++10++
                         ---20--------10---------123456789012
               r(-21)    432109876543210987654321
         aacagctatgaccatg
 acacaggaaacagctatgaccatgattacgaattcgagctcggtacccggggatcctcta
       6210      6220      6230      6240      6250      6260
 tgtgtcctttgtcgatactggtactaatgcttaagctcgagccatgggcccctaggagat

                                                                      
  HinfI                                                               
  . SalI                                                              
  . .AccI                                                             
  . ..        SdaI                                                    
  . ..        .  BspMI                                                
  . ..        .  .  BbuI         CfrI                                 
  . ..        .  .  Hsp92II      . BshI                               
  . ..        .  .  PaeI         . HaeIII                             
  . ..        .  .  SphI         . PalI                               
  . ..        .  .  . Cac8I      . .Bse1I        MaeII                
  . ..        .  .  . HindIII    . .BseNI        .  TaiI              
  . ..        .  .  . . AluI     . .BsrI         .  TscI              
  . ..        .  .  . . . MwoI   . .TspRI        .  .Tsp45I           
 ++++++20++++++++30++++++++40+
 34567890123456789012345678901       f(-20)
                              tgaccggcagcaaaatg
 gagtcgacctgcaggcatgcaagcttggcactggccgtcgttttacaacgtcgtgactgg
       6270      6280      6290      6300      6310      6320
 ctcagctggacgtccgtacgttcgaaccgtgaccggcagcaaaatgttgcagcactgacc

@end example


_split()
@node Vector_Clip-Cloning Site
@section Finding the Cloning and Primer Sites
@cindex Cloning site, finding
@cindex Primer site, finding

The problem addressed here is how to work out the positions of the cloning
and primer sites for vector_clip. The numbers can be
worked out from listings of the vector sequences but once you know how,
it is far easier to
use the restriction enzyme search in spin 
(_fpref(SPIN-Introduction, Introduction, spin))
to do it, and that
is what we explain here. Some familiarity with spin will help.
To use the restriction enzyme search in spin it is necessary to have created
a file containing the definitions of the sequences to search for
(_fpref(Formats-Restriction, Restriction enzyme files, renzymes))
These files give each enzyme a name and a set of strings (with cut positions
marked by "'"). The name is terminated by "/" and each string by  "/". An extra
"/" terminates all the data for each enzyme. For example
"fred/aaa'ttt/gatc'a//" defines enzyme fred to have two recognition sequences
aaattt and gatca with cut positions denoted by "'".

For our current purpose we treat the primer sequences as restriction enzymes
which each have a single recognition sequence; making sure that the sequence
is the sense of the primer that is present in the sequence being searched, 
and that the "cut positions" define the 3' ends (i.e. the end where the new
sequence will start). 
Again if we use the m13mp18 vector, its SmaI cloning site and the 17mer (-20) 
forward and 16mer (-21) reverse primers as an example. The reverse primer
has the sequence 5'aacagctatgaccatg3' and the forward one is 
5'gtaaaacgacggccagt3', and the SmaI site is ccc'ggg where "'" defines the cutsite. 

The restriction enzyme file should contain the following:

@example

f(-20)/'actggccgtcgttttac//
SmaI/CCC'GGG//
r(-21)/aacagctatgaccatg'//
@end example

This names the 17mer forward primer as f(-20) and defines its recognition
sequence as 'actggccgtcgttttac. Note that this is the complement of the primer
(which is what appears in the sequence being searched) and that the "cut position"
is defined
by the "'" symbol. SmaI is named and defined in the next record by
SmaI/CCC'GGG//. The 16mer reverse primer is named r(-21) and defined by
r(-21)/aacagctatgaccatg'//, and this time we search for the sequence of the
primer and the "cut position" is again at the 3' end.

Having started spin and read in the m13mp18 sequence select "Restriction enzyme map"
from the "search" menu. A dialogue will appear requesting "Select input source" and
with "6 cutter file" as the default. Select "personal" and give the name of the file
for m13mp18 (a file containing the definitions shown above should be found in 
$STADTABL/m13mp18_primers). The names "f(-20), SmaI and r(-21)" should appear in the
selection box in the dialogue. Select all three and the graphical result should 
appear.  Magnify the plot by hitting the "+50%" button and then scroll to the region 
around 6249 which should look as shown below.

_lpicture(primer_pos_plot)

This plot and the functionality of spin are sufficient to work out the numbers
for vector_clip, but there is also a way of getting the values printed in the
text output window (this is described later). To obtain the numbers from the plot
first touch the line showing the SmaI site, its position (6249) 
will be written in the
information line at the bottom of the plot. This is the position of the cloning site
and hence is the value for the SC record in the experiment file. Now click on the
line for the SmaI site and the information line will display 
"Select another cut"; click
on the line for the forward primer; the distance between the SmaI site and the
forward primer (41) will be displayed in the information line, and in the top
right hand box of the plot. Being to the right of the cloning site, this gives
a positive value for the experiment file SP record. Clicking on the SmaI site,
and then the line for the reverse primer, gives 24 which, being to the left, is 
a negative value for the SP record.

To get the numbers displayed in the text output window, select the "Output ordered
on position" item from the "Results" menu of the "Restriction enzyme map" plot.
For the example given here they will appear as shown below.

_picture(primer_pos_text)

Finally it is also possible to work out the numbering by using the restriction
enzyme search in the spin "sequence display" which can be selected from the "View"
menu. It will appear as shown below.

_lpicture(primer_pos_seq_display)


_split()
@node Screen_seq
@chapter Screening Readings for Contaminant Sequences
@cindex Screen_seq
@cindex screen_seq
@cindex Screening readings for contaminant sequences
@cindex screening for vectors
@cindex screening for bacterial sequences
@cindex filtering out extraneous readings
@cindex extraneous readings: filtering out
@cindex readings: extraneous
@cindex removing extraneous readings


@menu
@ifset html
* Screen_Seq-Introduction::   Introduction
@end ifset
* Screen_Seq-Parameters::     Command line options and parameters
* Screen_Seq-limits::         Limitations
* Screen_Seq-Errors::         Error codes
* Screen_Seq-Examples::       Examples
@end menu

@ifset html
_split()
@node Screen_Seq-Introduction
@section Introduction
@end ifset


This section explains how to use the program screen_seq to
filter out unwanted readings: i.e. how to
search for and separate readings containing the sequences of extraneous
DNA, such as vector or bacterial sequences. We have separated this task
from that of locating and marking the extents of sequencing vector and
other cloning vectors. There we require precise identification of the
junction between the vectors and the target DNA. The filtering process
described here is designed to spot strong matches between readings and a
panel of possible contaminating sequences, and it splits readings into
passes and fails. Readings that fail have a PS line containing the word
"contaminant" and a "CONT" tag added to
their experiment file.

Normal usage would be to compare a batch of readings in experiment file
format against a batch of possible contaminant sequences stored in (at
present) simple text files. Each batch is presented to the program as a
file of file names, and the program will write out two new files of file
names: one containing the names of the files that do not match any of
the contaminant sequences (the passes), and the other those that do
match (the
fails). It is also possible to compare single readings and single
contaminant files by giving their file names (i.e. it is not necessary
to use a file of file names for single files).

Given the frequent need to compare against the full E. coli genome the
algorithm is designed to be fast. Only one parameter is required: the minimum
match length, min_match. All readings which contain a segment of sequence
of length min_match which exactly matches a possible contaminant sequence
are filtered out.


The search is
conducted only over the clipped portion of the readings. On our aging
Alpha machine
it takes about 1 second to compare both strands of a reading against the
4.7 million bases of E. coli.

_split()
@node Screen_Seq-Parameters
@section Parameters
@table @var
@item @code{-l} Length of minimum match (25).
all readings with a match of this length are hits
@item @code{-m} Maximum vector length. 
the length of the longest sequence to screen against (100000).
@item @code{-i} Input file of reading file names. 
the file names of the readings to screen.
@item @code{-I} Input file of single reading to screen. 
the file name of the reading to screen.
@item @code{-s} Input file of sequence file names. 
the file names of the sequences to screen against.
@item @code{-S} Input file name of single sequence to screen against.
@item @code{-p} Passed output file of file names. 
for the names of the readings that do not match.
@item @code{-f} Failed output file of file names. 
for the names of the readings that match.
@item @code{-t} Test only mode. 
results are only written to stdout and the experiment files are not altered.
@end table


_split()
@node Screen_Seq-limits
@section Limits
@cindex screen_seq, limits


Screen_seq is currently set to be able to process a maximum of 10,000
readings and 5000 screening sequences in a single run. The maximum
length of any screening sequence is 100,000 although this can be
overridden by use of the -m parameter (set it to 5000000 for E. coli).
At present the sequences to screen against must be stored in simple text
files containing individual sequences, with no entry names, and <100
characters per line.

_split()
@node Screen_Seq-Errors
@section Error codes
@cindex Screen_seq: error codes
@cindex error codes in screen_seq

The following errors can occur.

@cindex Screen_seq: error codes
@enumerate 1
@item   "Failed to open file of file names to screen against". Fatal failure to
open the file of file names to screen against.
@item   "Failed to open single file to screen against". Fatal failure to
open the file to screen against.
@item   "Failed to open file of file names to screen". Fatal failure to
open the file of file names to screen.
@item   "Failed to open single file to screen". Fatal failure to
open the file to screen.
@item   "Failed to open file of passed file names". Fatal failure to
open the file of file names for readings that do not match.
@item   "Failed to open file of failed file names". Fatal failure to
open the file of file names for readings that match.
@item   "Error: could not open vector file". An individual sequence file
could not be opened.
@item   "Error: could not read vector file". An individual sequence file
could not be read.
@item   "Error: could not hash vector file". An individual sequence file
could not be prepared for comparison.
@item	"Error: could not open experiment file". The file does not exist
or is unreadable.
@item	"Error: no sequence in experiment file".
@item	"Error: sequence too short". The reading is shorter than the
minimum match length.
@item	"Error: could not write to experiment file". The disk is full or
the file is write protected.
@item   "Error: hashing problem". An error occurred in the comparison
algorithm. Please report to staden-package@@mrc-lmb.cam.ac.uk
@end enumerate

Inconsistencies in the selection of options, such as selecting -I and
-i, should also cause the usage message (shown below) to appear, and 
the program to terminate. 

@example
Usage: screen_seq [options and paramters] 
Where options and parameters are:
    [-l minimum match (25)]           [-m Max vector length (100000)]
    [-i readings to screen fofn]      [-I reading to screen]
    [-s seqs to screen against fofn]  [-S seq to screen against]
    [-t test only]
    [-p passed fofn]                  [-f failed fofn]
@end example

_split()
@node Screen_Seq-Examples
@section Examples


Screen the readings whose names are stored in fofn against a batch of
possible contaminant sequences whose names are stored in vnames. Write
the names of the readings that pass to file p and those that fail to
file f. Increase the maximum sequence length to 5000,000 characters and
require a minimum match of 20.

@example
@code{screen_seq -i fofn -s vnames -p p -f f -l20 -m5000000 }
@end example

Screen the single reading stored in xpg33.g1 against a batch of
possible contaminant sequences whose names are stored in vnames. If the
reading does not match write its name to file p, otherwise to
file f. Increase the maximum sequence length to 5000,000 characters and
require a minimum match of 20.

@example
@code{screen_seq -I xpg33.g1 -s vnames -p p -f f -l20 -m5000000 }
@end example

Screen the readings whose names are stored in fofn against a single
possible contaminant sequence stored in ecoli.seq. Write
the names of the readings that pass to file pass and those that fail to
file fails. Increase the maximum sequence length to 5000,000 characters and
require minimum match of 20.

@example
@code{screen_seq -i fofn -S ecoli.seq -p pass -f fails -l20 -m5000000 }
@end example

