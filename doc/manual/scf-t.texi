@ignore
@c MANSECTION=4
@unnumberedsec NAME

scf --- SCF File Format
@end ignore

@node Formats-Scf
@section SCF
@cindex SCF

SCF format files are used to store data from DNA sequencing
instruments. Each file contains the data for a single reading and
includes: its trace sample points, its called sequence, the positions
of the bases relative to the trace sample points, and numerical
estimates of the accuracy of each base. Comments and "private data"
can also be stored. The format is machine
independent and the first version was described in Dear, S and Staden, R. "A
standard file format for data from DNA sequencing instruments", DNA
Sequence 3, 107-110, (1992). 

Since then it has undergone several important changes. The first allowed for
different sample point resolutions. The second, in response to the need to
reduce file sizes for large projects, involved a major reorganisation of the
ordering of the data items in the file and also in the way they are
represented.  Note that despite these changes we have retained the original
data structures into which the data is read. Also this reorganisation in
itself has not made the files smaller but it has produced files that are more
effectively compressed using standard programs such as gzip. The io library
included in the package contains routines that can read and write all the
different versions of the format (including reading of compressed files). The
header record was not affected by this change. This documentation covers both
the format of scf files and the data structures that are used by the io
library. Prior to version 3.00 these two things corresponded much more
closely.


@menu
* Scf-Header::          Header record
* Scf-Sample::          Sample points
* Scf-Sequence::        Sequence information
* Scf-Comments::        Comments
* Scf-Private::         Private data
* Scf-File-structure::  File structure
* Scf-Notes::           Notes
@end menu

_split()
@node Scf-Header
@subsection Header Record
@cindex Header record: SCF
@cindex Header: SCF structure
@cindex SCF header record
@cindex Magic number: SCF
@cindex SCF magic number

The file begins with a 128 byte header record that describes the
location and size of the chromatogram data in the file. Nothing is
implied about the order in which the components (samples, sequence and
comments) appear. The version field is a 4 byte character array
representing the version and revision of the SCF format. The current
value of this field is "3.00".

@c INDENT=0.2i
@example
/*
 * Basic type definitions
 */
typedef unsigned int   uint_4;
typedef signed   int    int_4;
typedef unsigned short uint_2;
typedef signed   short  int_2;
typedef unsigned char  uint_1;
typedef signed   char   int_1;

/*
 * Type definition for the Header structure
 */
#define SCF_MAGIC (((((uint_4)'.'<<8)+(uint_4)'s'<<8) \
                     +(uint_4)'c'<<8)+(uint_4)'f')

typedef struct @{
    uint_4 magic_number;
    uint_4 samples;          /* Number of elements in Samples matrix */
    uint_4 samples_offset;   /* Byte offset from start of file */
    uint_4 bases;            /* Number of bases in Bases matrix */
    uint_4 bases_left_clip;  /* OBSOLETE: No. bases in left clip (vector) */
    uint_4 bases_right_clip; /* OBSOLETE: No. bases in right clip (qual) */
    uint_4 bases_offset;     /* Byte offset from start of file */
    uint_4 comments_size;    /* Number of bytes in Comment section */
    uint_4 comments_offset;  /* Byte offset from start of file */
    char version[4];         /* "version.revision", eg '3' '.' '0' '0' */
    uint_4 sample_size;      /* Size of samples in bytes 1=8bits, 2=16bits*/
    uint_4 code_set;         /* code set used (but ignored!)*/
    uint_4 private_size;     /* No. of bytes of Private data, 0 if none */
    uint_4 private_offset;   /* Byte offset from start of file */
    uint_4 spare[18];        /* Unused */
@} Header;
@end example

@quotation
For versions of SCF files 2.0 or greater (@strong{Header.version} is `greater
than' "2.00"), the version number, precision of data, the uncertainty code set
are specified in the header.  Otherwise, the precision is assumed to be 1
byte, and the code set to be the default code set.  The following uncertainty
code sets are recognised (but still ignored by our programs!).
@end quotation

@example
0       @{A,C,G,T,-@}   (default)
1       Staden
2       IUPAC (NC-IUB)
3       Pharmacia A.L.F. (NC-IUB)
4       @{A,C,G,T,N@}   (ABI 373A)
5       IBI/Pustell
6       DNA*
7       DNASIS
8       IG/PC-Gene
9       MicroGenie
@end example

_split()
@node Scf-Sample
@subsection Sample Points.
@cindex Sample points: SCF
@cindex SCF: Sample points
@cindex Samples1: SCF structure
@cindex Samples2: SCF structure

The trace information is stored at byte offset
@strong{Header.samples_offset} from the start of the file. For each
sample point there are values for each of the four bases.  
@strong{Header.sample_size} holds the
precision of the sample values. The precision must be one of "1"
(unsigned byte) and "2" (unsigned short). The sample points need not be
normalised to any particular value, though it is assumed that they
represent positive values. This is, they are of unsigned type.

With the introduction of scf version 3.00, in an attempt to produce
efficiently compressed files, the sample points
are stored in A,C,G,T order; i.e. all the values for base A, followed by all
those for C, etc. In addition they are stored, not as their original 
magnitudes, but in terms of the
differences between successive values. The C language code used to
transform the values for precision 2 samples is shown below.


@example
void delta_samples2 ( uint_2 samples[], int num_samples, int job) @{
 
    /* If job == DELTA_IT:
     *  change a series of sample points to a series of delta delta values:
     *  ie change them in two steps:
     *  first: delta = current_value - previous_value
     *  then: delta_delta = delta - previous_delta
     * else
     *  do the reverse
     */
 
    int i;
    uint_2 p_delta, p_sample;
 
    if ( DELTA_IT == job ) @{
        p_delta  = 0;
        for (i=0;i<num_samples;i++) @{
            p_sample = samples[i];
            samples[i] = samples[i] - p_delta;
            p_delta  = p_sample;
        @}
        p_delta  = 0;
        for (i=0;i<num_samples;i++) @{
            p_sample = samples[i];
            samples[i] = samples[i] - p_delta;
            p_delta  = p_sample;
        @}
    @}
    else @{
        p_sample = 0;
        for (i=0;i<num_samples;i++) @{
            samples[i] = samples[i] + p_sample;
            p_sample = samples[i];
        @}
        p_sample = 0;
        for (i=0;i<num_samples;i++) @{
            samples[i] = samples[i] + p_sample;
            p_sample = samples[i];
        @}
    @}
@}
@end example

The io library data structure is as follows:

@example
/*
 * Type definition for the Sample data
 */
typedef struct @{
        uint_1 sample_A;           /* Sample for A trace */
        uint_1 sample_C;           /* Sample for C trace */
        uint_1 sample_G;           /* Sample for G trace */
        uint_1 sample_T;           /* Sample for T trace */
@} Samples1;

typedef struct @{
        uint_2 sample_A;           /* Sample for A trace */
        uint_2 sample_C;           /* Sample for C trace */
        uint_2 sample_G;           /* Sample for G trace */
        uint_2 sample_T;           /* Sample for T trace */
@} Samples2;
@end example

_split()
@node Scf-Sequence
@subsection Sequence Information.
@cindex SCF: sequence
@cindex Sequence: SCF
@cindex Base: SCF structure

Information relating to the base interpretation of the trace is stored
at byte offset Header.bases_offset from the start of the file. 
Stored for each base are: its
character representation and a number (an index into the Samples data
structure) indicating its position within the trace. The relative
probabilities of each of the 4 bases occurring at the point where the
base is called can be stored in @strong{prob_A} , @strong{prob_C} ,
@strong{prob_G} and @strong{prob_T}.

From version 3.00 these items are stored in the following order: all
"peak indexes", i.e. the positions in the sample points to which the
bases corresponds; all the accuracy estimates for base type A, all for
C,G and T; the called bases; this is followed by 3 sets of empty int1
data items. These values are read into the following data structure by
the routines in the io library.

@example
/*
 * Type definition for the sequence data
 */
typedef struct @{
    uint_4 peak_index;        /* Index into Samples matrix for base posn */
    uint_1 prob_A;            /* Probability of it being an A */
    uint_1 prob_C;            /* Probability of it being an C */
    uint_1 prob_G;            /* Probability of it being an G */
    uint_1 prob_T;            /* Probability of it being an T */
    char   base;              /* Called base character        */
    uint_1 spare[3];          /* Spare */
@} Base;
@end example

_split()
@node Scf-Comments
@subsection Comments.
@cindex SCF: comments
@cindex Comments: SCF

Comments are stored at offset Header.comments_offset from the start of
the file. Lines in this section are of the format:

@quotation
<Field-ID>=<Value>
@end quotation

<Field-ID> can be any string, though several have special meaning and
their use is encouraged.

@example
ID      Field                           Example
MACH    Sequencing machine model        MACH=Pharmacia A.L.F.
TPSW    Trace processing software       TPSW=A.L.F. Analysis
          version                         Program, Version=1.67
BCSW    Base calling software version   BCSW=A.L.F. Analysis
                                          Program, Version=1.67
DATF    Data source format              DATF=AM_Version=2.0
DATN    Data source name                DATN=a10c.alf
CONV    Format conversion software      CONV=makeSCF v2.0
@end example

Other fields might include:

@example
ID      Field                           Example
OPER    Operator                        OPER=sd
STRT    Time run started                STRT=Aug 05 1991  12:25:01
STOP    Time run stopped                STOP=Aug 05 1991  16:26:25
PROC    Time processed                  PROC=Aug 05 1991  18:50:13
EDIT    Time edited                     EDIT=Aug 05 1991  19:06:18
NAME    Sample name                     NAME=a21b1.s1
SIGN    Average signal strength         SIGN=A=56,C=66,G=13,T=18
SPAC    Average base spacing            SPAC=12.04
SCAL    Factor used in scaling traces   SCAL=0.5
ACMP    Compression annotation          COMP=99,6
ASTP    Stop annotation                 STOP=143,12
@end example

@example
@group
/*
 * Type definition for the comments
 */
typedef char Comments[];                /* Zero terminated list of
                                           \n separated entries */
@end group
@end example

_split()
@node Scf-Private
@subsection Private data.
@cindex SCF: private data
@cindex Private data: SCF

The private data section is provided to store any information required
that is not supported by the SCF standard. If the field in the header
is 0 then there is no private data section. We impose no restrictions
upon the format of this section. However we feel it maybe a good idea
to use the first four bytes as a magic number identifying the used
format of the private data.

_split()
@node Scf-File-structure
@subsection File structure.
@cindex SCF: file structure
@cindex File structure: SCF

From SCF version 3.0 onwards the in memory structures and the data on the disk
are not in the same format. The overview of the data on disk for the different
versions is summarised below.

@example

Versions 1 and 2

(Note Samples1 can be replaced by Samples2 as appropriate.)

Length in bytes                        Data
---------------------------------------------------------------------
128                                    header
Number of samples * 4 * sample size    Samples1 or Samples2 structure
Number of bases * 12                   Base structure
Comments size                          Comments
Private data size                      private data

Version 3

Length in bytes                        Data
---------------------------------------------------------------------------
128                                    header
Number of samples * sample size        Samples for A trace
Number of samples * sample size        Samples for C trace
Number of samples * sample size        Samples for G trace
Number of samples * sample size        Samples for T trace
Number of bases * 4                    Offset into peak index for each base
Number of bases                        Accuracy estimate bases being 'A'
Number of bases                        Accuracy estimate bases being 'C'
Number of bases                        Accuracy estimate bases being 'G'
Number of bases                        Accuracy estimate bases being 'T'
Number of bases                        The called bases
Number of bases * 3                    Reserved for future use
Comments size                          Comments
Private data size                      Private data
---------------------------------------------------------------------------
@end example

_split()
@node Scf-Notes
@subsection Notes

@node Scf-Notes-Ordering
@subsubsection Byte ordering and integer representation.
@cindex SCF: byte ordering
@cindex Byte ordering: SCF

"Forward byte and reverse bit" ordering will be used for all integer
values. This is the same as used in the MC680x0 and SPARC processors,
but the reverse of the byte ordering used on the Intel 80x86 processors.

@example
         Off+0   Off+1  
       +-------+-------+  
uint_2 |  MSB  |  LSB  |  
       +-------+-------+  

         Off+0   Off+1   Off+2   Off+3
       +-------+-------+-------+-------+
uint_4 |  MSB  |  ...  |  ...  |  LSB  | 
       +-------+-------+-------+-------+
@end example

To read integers on systems with any byte order use something like this:

@example
uint_2 read_uint_2(FILE *fp)
@{
    unsigned char buf[sizeof(uint_2)];

    fread(buf, sizeof(buf), 1, fp);
    return (uint_2)
        (((uint_2)buf[1]) +
         ((uint_2)buf[0]<<8));
@}

uint_4 read_uint_4(FILE *fp)
@{
    unsigned char buf[sizeof(uint_4)];

    fread(buf, sizeof(buf), 1, fp);
    return (uint_4)
        (((unsigned uint_4)buf[3]) +
         ((unsigned uint_4)buf[2]<<8) +
         ((unsigned uint_4)buf[1]<<16) +
         ((unsigned uint_4)buf[0]<<24));
@}
@end example

_split()
@node Scf-Notes-Compression
@subsubsection Compression of SCF Files

The SCF format version 3.00 has been designed with file compression in mind.
No new information is recorded when compared to the version 2.02 format,
except the data is stored in a manner conducive to efficient compression.

Experimentation @footnote{Analysed using a data set of 100 ABI (and their SCF
equivalent) files} has shown that 16 bit SCF version 3.00 files can achieve a
9:1 compression ratio and 8 bit SCF files a 14.5:1 compression ratio. These
figures are for SCF files without quality values compressed using the
@code{bzip} utility. @code{gzip} tends to give between 20 to 40% larger files
than @code{bzip}. Compressed SCF files containing accuracy values tend to be
around 10% larger than those without accuracy values.

Whilst compression is not a specific part of the SCF standard, the size of
trace files and the compression ratios attainable suggests that it is wise to
handle compressed files. The Staden Package utilities, such as gap4 and trev,
automatically uncompress and compress SCF files as needed.

Note that at present, on the fly compression, as just described, is not
implemented for the Windows version of the package.
