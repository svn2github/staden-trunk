#
# Reads in a PostScript file generated by TeXInfo.
#
# The contents pages are initially at the end of the postscript file, so this
# tool reorders these to put them between the first 2 (cover sheet) and the
# actual manual start.
#
# We make assumptions to do this. The page structure will initially be:
#
# Page 1 - title
# Page 2 - copyright
# Page 1 - 1st Page
# Page 2 - 2nd Page
# ...
# Page -1 - 1st contents page
# Page -2 - 2nd contents page
#

proc process_header {line} {
    global element header subdoc

    if {[regexp {^%%Page:\s*(-?\d*)\s*(-?\d*)} $line all vpage rpage]} {
	puts stderr "Start Page $vpage"
	set subdoc 0
	set element $vpage
	return start_page
    } else {
	append header $line\n
    }
    return header
}

proc process_start_page {line} {
    global element start_page subdoc
    if {[regexp {^%%BeginDocument} $line]} {
	incr subdoc
    }
    if {[regexp {^%%EndDocument} $line]} {
	incr subdoc -1
    }
    if {$subdoc == 0} {
	if {[regexp {^%%Page:\s*(-?\d*)\s*(-?\d*)} $line all vpage rpage]} {
	    if {[info exists start_page($vpage)]} {
		puts stderr "Page $vpage"
		set element $vpage
		return page
	    } else {
		puts stderr "Start Page $vpage"
		set element $vpage
		return start_page
	    }
	}
	if {[regexp {^%%Trailer} $line]} {
	    puts stderr "Trailer"
	    return trailer
	}
    }
    append start_page($element) $line\n
    return start_page
}

proc process_page {line} {
    global element page subdoc
    if {[regexp {^%%BeginDocument} $line]} {
	incr subdoc
    }
    if {[regexp {^%%EndDocument} $line]} {
	incr subdoc -1
    }
    if {$subdoc == 0} {
	if {[regexp {^%%Page:\s*(-?\d*)\s*(-?\d*)} $line all vpage rpage]} {
	    puts stderr "Page $vpage"
	    set element $vpage
	    return page
	}
	if {[regexp {^%%Trailer} $line]} {
	    puts stderr "Trailer"
	    return trailer
	}
    }
    append page($element) $line\n
    return page
}

proc process_trailer {line} {
    append trailer $line\n
    return trailer
}

# Load the document into an array consisting of elements start, title,
# copyright, pagex, page-x, end
set state header
set header ""
set trailer ""

puts stderr "Header"
while {[gets stdin line] != -1} {
    set state [process_$state $line]
}

# Print up the pages in their logical order
puts $header
set count 1
foreach p [lsort -integer [array names start_page]] {
    puts "%%Page: $p $count"
    puts $start_page($p)
    incr count

}
set pages [lsort -integer [array names page]]
set pospage {}
set negpage {}

foreach p $pages {
    if {$p < 0} {
	set negpage "$p $negpage"
    } else {
	lappend pospage $p
    }
}

set pages "$negpage $pospage"
foreach p $pages {
    puts "%%Page: $p $count"
    puts $page($p)
    incr count
}
puts $trailer
exit