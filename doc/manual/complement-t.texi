_split()
@node Complement
@section Complement a Contig

This function 
(which is available from the gap4 Edit menu)
is used to complement a contig, which means that it will
complement and reverse all its readings and reorder them to produce a
contig with the opposite orientation. It operates on a single contig
selected via a dialogue box.

_split()
@node Enter Tags
@section Enter Tags
@cindex tags: entering from a file
@cindex entering tags from file
@cindex annotations: entering from a file
@cindex entering annotations from file


This routine 
(which is available from the gap4 Edit menu)
is used to add a set of tags (_fpref(Intro-Anno, Annotation
readings and contigs, gap4)) stored in a file, to the database. The file
format (see below) is identical to the output produced by the "save tags to
file" option of "Find Repeats". _fxref(Repeats, Find Repeats, repeats) The
format is a subset of the experiment file format. _fxref(Formats-Exp,
Experiment Files, formats) The two are close enough for Enter tags to use an
experiment file as input. The only input required is the name of the file to
read and a file browser can be used to aid its selection.

Note that "Enter tags" will remove any results plotted in the Contig 
Comparator.

The start of a typical file is shown below.

@example
CC   Repeat number 0, end 1
ID   zf48g3.s1
TC   REPT b 1031..1072
TC        Repeats with contig zf48g3.s1, offset 957
CC   Repeat number 0, end 2
ID   zf48g3.s1
TC   REPT b 957..998
TC        Repeats with contig zf48g3.s1, offset 1031
CC   
CC   Repeat number 1, end 1
ID   zf48g3.s1
TC   REPT b 1102..1130
TC        Repeats with contig zf48g3.s1, offset 953
CC   Repeat number 1, end 2
ID   zf48g3.s1
TC   REPT b 953..981
TC        Repeats with contig zf48g3.s1, offset 1102
@end example

_split()
@node Shuffle Pads
@section Shuffle Pads
@cindex pads: realigning
@cindex realigning sequences
@cindex shuffle pads

This function realigns all of the sequences within a contig to improve
pad placement. This can be considered as the replacement to the old
Shuffle Pads command within the contig editor. (Being outside of the
editor allows this to be autoamtically scripted.) The contigs to
realign are specified as either a single contig, all contigs or to
input a contig names from a file or a gap4 list. Currently the entire
contig will be shuffled, which can take some time on large contigs. In
future we plan to allow regions to be specified.

Padding (gapping) problems originate in many sequence assembly
algorithms, including gap4's, where sequences are aligned against a
consensus rather than a profile. As an example let us consider
aligning @code{TCAAGAC} (Sequence4) to the following contig:

@example
Sequence1:    GATTCAAAGAC
Sequence2:      TTCAA*GACGG
Sequence3:        CAAAGACGGATC

Consensus:    GATTCAAAGACGGATC
@end example

The consensus contains a triple A because that is the most likely
sequence, however we have three possible ways to align a sequence
containing double A:

@example
alignment1:      TCAA*GAC
alignment1:      TCA*AGAC
alignment1:      TC*AAGAC
Consensus:    GATTCAAAGACGGATC
@end example

All of these have identical alignment scores because the cost of
inserting a gap into the sequence is identical at all
points. Alignment algorithms typically always pick the same end to
place pads (ie left end or right end), but after contigs get
complemented and more data inserted this often yields pads at both as,
as follows:

@example
Sequence1:    GATTCAAAGAC
Sequence2:      TTCAA*GACGG
Sequence3:        CAAAGACGGATC
Sequence4:       TC*AAGAC
Consensus:    GATTCAAAGACGGATC
@end example

The new Shuffle Pads algorithm implements the same ideas put forward
by Anson and Myers in ReAligner. It aligns each sequence against a
consensus vector where the entire column of bases in the consensus are
used to compute match, mismatch and indel scores. The result is that
pads generally get shuffled to the same end (not necessarily always
left or always right) and the total number of disagreements to the
consensus reduces.
