@node X2
@chapter More preprocessing, simple assembly and editing

@node X2-obj
@section The Objectives of the Practical

These step by step instructions are intended to get you through the mechanics
of using the programs to produce the required results. The bare minimum of
explanation will be offered as you proceed. At various stages in the exercises
you will be referred to the on-line manual for the relevant programs which
will provide a much fuller explanation of what you have done and why.

@node X2-overview
@section An Overview of the Practical Session

This exercise delves further into pregap4, introduces the contig editor and
the use of confidence values:

@enumerate
@item Templates / Read-Pairs
@item Naming conventions
@item Assembly automation
@item A first look at the contig editor
@item Confidence values
@end enumerate

@node X2-data
@section Obtaining a set of data for this exercise

In this exercise, the first intention is to look in more detail at the pregap4
processes. To do this sensibly, we require a rather larger set of data than
for the previous exercise. Once again, we will simulate several days of hard
work with a set of file copies (are not computers
wonderful?). _ifdef([[_unix]],[[Firstly you need to create another new
folder. For consistencies sake we will do this once more in your home
directory, so make sure you are back there by typing:

@example
cd
@end example
 
The @b{cd} command allows you to change your @b{c}urrent @b{d}irectory to any
specified directory, as you have done before. Used by itself with no
arguments, it makes the current directory the "@i{home}" directory of the
current user. To illustrate this type in:

@example
pwd
@end example

This will @b{p}rint your current @b{w}orking @b{d}irectory. Inspect the
contents of your home directory by typing in:

@example
ls
@end example

You should see listed the debris from the previous exercise(s), hopefully all
tidied away in directories specific to each activity. As before we should set
up a new directory for this exercise and move into it:

@example
mkdir exercise2
cd exercise2
@end example

Check that you have indeed changed directories by again typing in:

@example
pwd
@end example
]])_ifdef([[_windows]],[[Firstly you need to create a new folder using the
explorer window. It doesn't matter where this is, but I suggest you choose a
directory within your own `home' area and call it exercise2. Throughout the
notes when we refer to exercise2 we mean this newly created folder. It is not
a good idea to simply modify the original copies of the course data as this
may then require reinstalling the package if you need to rerun this
tutorial.]])

Next we need to copy the data from the @b{course/data/phred_data} subdirectory
of the Staden Package installation. _ifdef([[_unix]],[[Once again we will
simulate days of work with a single UNIX copy command:

@example
cp $STADENROOT/course/data/phred_data/* .
@end example

which is a request to the UNIX operating system to @b{c}o@b{p}y all files
(@b{*}) from a directory within the Staden Package installation to the current
directory (@b{.}). When you are again prompted for further action by UNIX,
type in:

@example
ls
@end example

to list the files you have copied. ]])_ifdef([[_windows]],[[Use the explorer
window to move to the location of this directory. Then press Control-A to
highlight everything; Control-C to "copy" these into the Windows cut-buffer;
change the view back to your exercise2 folder; and finally Control-V to
"paste" the files into exercise2.

]])Now you have a couple of hundred ZTR files. These files represent a newly
generated batch of read data ready to be processed by pregap4 and then
assembled into contigs by gap4. Nothing can be assumed about the relative
positions of these reads as they have been generated using "shotgun"
sequencing techniques from a single cosmid. Logically, they should be exactly
as they would be generated by the sequencer (i.e. ABI, ALF or SCF format) but
there are practical difficulties in obtaining such a set of data for an
exercise like this one. People (at the Sanger Centre at least, where these
reads originated) tend to store their raw ABI data off line, but their
phred-processed files remain easily accessible. Thus, entirely for practical
reasons, we will start with ZTR files instead of raw sequencer data. Hence
this data has also been base called using phred (not included with the Staden
Package) which reanalyses the traces and produces new base calls along with
estimations of the accuracy of each call. Phred is not the only program to do
this, but it is currently the most widely used.

Included amongst your ZTR files is the file @b{lorist6.vector}. This contains
the sequence of the cosmid vector used for this data. If you were to view this
_ifdef([[_unix]],[[using @b{more}]])[[]]_ifdef([[_windows]],[[in
@b{wordpad}]]) you would see this sequence in all its inarticulate glory. In
real life, you may have to retrieve this sequence from the databases, but here
we are allowed to cheat a little.

@node X2-setup
@section Setting up and running pregap4

You now have all the data you require to run pregap4 as you did during the
last exercise. We shall start up pregap4 as before, ready to start
configuring.

_ifdef([[_unix]],[[
@example
pregap4 &
@end example
]])

As in the previous exercise, it is helpful to have the manual web pages
readily available. Why not use the @b{Help} button to invoke a web browser
with the pregap4 @i{Introduction} pages in view. Whenever you find the notes
do not tell you all that you wish to know, use the context driven Help buttons
to bring up the relevant manual pages.

Once again, we shall start with selecting the files to
process. _ifdef([[_unix]],[[Click on @b{Add Files} to bring up a file browser
window. Selecting ZTR (at the bottom of this new window) should show a whole
list of files, which we wish to select (all of them). One way to do this is to
click and drag in the @i{Files:} panel with the left mouse button, but for
many files this quickly becomes tedious. Alternatively click on the
first file listed (@i{xb54a3.s1.ztr}) to highlight this sequence. Then scroll
right down to the bottom of the list and press (and hold) the shift key while
clicking (with the left mouse button again) on the last file
(@i{xc39c12.s1.ztr}). However quickest of all is simply to press
@b{Control}-@b{A}. This should now be highlighting all the files, so now
close the @i{Open Multiple Files} window by clicking on
@b{OK}.]])_ifdef([[_windows]],[[Click on @b{Add Files} and change the display
to the exercise2 folder. Selecting @b{Files of Type} @b{ZTR} should show a
whole list of files. Select all of these by clicking in the file list panel
and pressing @b{Control-A}. Finally close down the dialogue with the @b{Open}
button.]])  You should now have the files with their full pathnames
listed in the pregap4 window. Using this method you can select many sets of
files from multiple directories, but in this case we have more than enough
already. Indeed as we have so many we will not be interactively viewing the
traces.

Select pregap4's "Configure Modules" mode and then select and configure the
modules appropriate for this set of data. You already have experience of what
these modules do and how to configure them, so this is just a summary:

@table @asis
@item Disable "@b{Estimate Base Accuracies}"
Phred has already been run on these files, and it does a much better job than "eba".

@item Disable "@b{Trace Format Conversion}"
This data already consists of ZTR files.

@item Enable "@b{Initialise Experiment Files}"
This should already be enabled.

@item Enable "@b{Augment Experiment Files}"
This should already be enabled, but you need to make a few changes. You can
specify how lines should be added to each experiment file individually. To do
this you could prepare a properly formatted data file containing all the
line values required for each read. To use this file you would select the
@b{Simple Text Database} option at this stage. We will not use this approach
here, although it will be investigated in a supplementary exercise.

Alternatively, you may specify just one rule per line type to be applied to
all experiment files augmented by pregap4. This is the option suitable for
this exercise. Select it by clicking on the @b{Experiment File Line Types}
option. A new window titled @i{Experiment file line types} will float forth
listing all the experiment line types it is possible to set with this option.

@image{pregap4-augment,4in}

The rule you specify for each line type may be either a constant @i{Value} to
be used in every experiment file, or a constant @i{Command} to be executed for
each experiment file, the value returned by the @i{Command} being the value
used for the experiment file line. To select whether to use a @i{Value} or a
@i{Command} use the button by the relevant line type@footnote{Try clicking on
one and you will see how the choice can be made.}. The default being @i{Value}
in all cases.

If you elect to enter a constant value, then all experiment files processed
will have identical lines of that type. If however you enter a command, this
is not necessarily true. Even though the command is identical for all
experiment files augmented, the value generated when that command is executed
need not always be the same. For example, if you were to use a command to
define values for the @b{SI} line that, if translated into natural English
read@footnote{Sadly, of course, you cannot enter commands in natural
English. You have to use a language that is "natural" to hackers, but is felt
to be a trifle harsh by the majority of the rest of the world. We will say a
little more of this later, but for now, I will just try and indicate what can
be done with the command option, assuming one can handle the syntax. A full
consideration of the language required to construct command for this option is
beyond the scope of this course. As you will discover, for this exercise we
will define the settings of some experiment file lines using command. However,
we will be using commands already composed for us by the package developers.}:

"Look at the third letter of the read name and if the character is a 1, then
the range is 1000bp to 1500bp, otherwise the range is 1400bp to 2200bp"

then the value used for the @b{SI} line could differ depending upon the value
of the third letter of the read name. Thus the read name is used to code
information that pregap4 can transfer to the corresponding experiment
file@footnote{The strategy of coding information in read names is used for
many "real" projects, including the one which produced this data.}.

For this exercise, use a constant @b{Value} for the @b{SI} line to set a lowest
and highest value for the expected @b{S}ize of @b{I}nsert for all
reads@footnote{From the perspective of pregap4, that means adding to
(i.e. Augmenting) each experiment file an @b{SI} line specifying the
appropriate range.}. To do this, scroll down until you find the @b{SI}
line. Select the data entry box for SI, by clicking on it once, and
enter@footnote{Note that the syntax for the entry is displayed at the bottom
of the screen as an "example value". In fact, you are using the example
value.}:

@example
1400..2000
@end example

which suggests that you expect that all of the reads to be processed were
generated from inserts of at least @b{1400}bp, but not more than
@b{2000}bp. This information can help gap4 determine the orientation and
separation of contigs and to show where contig joining might be possible, as
you will see later. Now press the @b{OK (and save)} button to write out the
constant @b{SI} line value to the configuration file.

_ifdef([[_unix]],[[If you now move back to a to your UNIX window and type in:

@example
ls -lrt
@end example

you will see that your newest file is called@footnote{pregap4.config is the default name of the configuration file for pregap4. It will be read and obeyed everytime pregap4 is executed in this directory. You will be adding more information to this file as you continue with pregap4. As your settings as saved in a file, you only need to define them once.}:

@example
pregap4.config
@end example

to have a look inside this file you have just created, type in:

@example
more pregap4.config
@end example

and note that the SI line constant value to be added to all experiment files
has been remembered.]])_ifdef([[_windows]],[[If you now move back to a
wordpad window and view the config.pg4 file you will see that the SI line
constant value has been remembered.]])

@item Enable "@b{Quality Clip}".

The default values for Quality Clip assume that we are using
phred-scaled scores, which includes "Estimate Base Accuracies", AQTA and
Phred itself. So we can leave the defaults as before.

A phred-style confidence value uses the range
@tex
$$-10 * log_{10}(P_{error})$$
@end tex
where
@tex
$P_{error}$
@end tex
is the probability that this base call is in error. Hence the default
value of @b{15} for @b{Average confidence} is equivalent to requesting
that the average error-rate at all points along the sequence is less
than 3% (approximately).

@item Enable "@b{Sequencing Vector Clip}"

@b{Use} the @b{vector-primer file} mode again and click on @b{Select
vector-primer subset} to specify @b{m13mp18/SmaI} as the vector and cut-site
combination.  Note that this time we will be using both forward and reverse
primers. The vector-primer file contains two short DNA sequences - one for
each side of the cut-site. We can either tell pregap4 ourselves how to
determine which sequences are forward readings and which are reverse readings,
or we can let vector_clip decide for itself based on which of the two
vector-primer sequences it matches best.

@item Enable "@b{Screen for Unclipped Vector}"

Accept the default parameters.

@item Enable "@b{Cloning Vector Clip}"

Specify @b{lorist6.vector} as the @b{Vector file name}.

@item Enable "@b{Gap4 shotgun assembly}"

Here we have the option of getting pregap4 itself to do a rather simplistic
sequence assembly. In fact it makes use of gap4, but it does not provide the
full range of assembly configuration options. So for more complex issues it is
best to use gap4 itself for the assembly (as you will see later) or to use one
of the third-party assembly systems. For now we will take the simple approach
as this is the fastest way to get a real assembly up on the screen.
	
You will need to type in a gap4 database name here. We will gloss over the
details of what this practically means as this is covered later, but in short
it is simply a couple of new files in this folder. Type in @b{testdb} as the
@b{Gap4 database name}. The version number can be left as zero, but we will
need to tick the @b{Create new database} option as we are creating an entirely
new assembly, rather than adding data into an existing assembly project.

Click on another module name (but not the tick/cross bit) to check that the
@b{edit} label next to the "Gap4 shotgun assembly" option is changed to @b{ok}.

@item Disable everything else.
@end table

Just to check, there should now be no module still labelled @b{edit}, and
@i{only} the following modules should be selected for execution:

@itemize @bullet
@item Initialise Experiment Files
@item Augment Experiment Files
@item Quality Clip
@item Sequencing Vector Clip
@item Screen for Unclipped Vector
@item Cloning Vector Clip
@item Gap4 shotgun assembly
@end itemize

You have almost finished supplying pregap4 with all the configuration
information it requires to process your data. There is just one vital step
left.

When setting the parameters for the "Sequencing Vector Clip" module, you told
pregap4 that it should look for the forward and reverse primer sites around
@b{SmaI} in @b{m13mp18}. Vector clip itself can work out which readings use
the forward primer and which use the reverse primer. However it cannot tell
which sequences should be "paired" together. We call the piece of DNA inserted
into m13mp18 the "@i{template}" (also sometimes referred to as "@i{the
insert}"). We need a mechanism of associating each sequence with a template so
that gap4 can know when a template has sequences from both ends.

There are a number of possible solutions to this problem@footnote{You could
use the @b{Simple Text Database} approach offered in the "Augment Experiment
Files" module to individually label reads "forward" or "reverse" with "this"
template. As mentioned previously, using a Simple Text Database will be
investigated in a supplementary exercise.}. The one that has been employed for
your data is to encode this information in the reading
name. _ifdef([[_unix]],[[To investigate exactly how this has been done, move
back to your UNIX window and type:

@example
ls
@end example

You will notice that most files end with @b{.s1.ztr}, but a few end with
@b{.f1.ztr} and @b{.r1.ztr}. The *@b{.s1} and *@b{.f1} files are forward
readings, whilst the @b{.r1} files are reverse readings. To see things a
little clearer, try typing in:

@example
ls xb63e5.*
@end example

to look at the files starting with @b{xb63e5}.]])_ifdef([[_windows]],[[To
investigate exactly how this has been done, move back to your explorer window
and look carefully at the filenames.

You will notice that most files end with @b{.s1.ztr}, but a few@footnote{OK,
so it's just the one, but try to think "general purpose" here.} end with
@b{.r1.ztr} and @b{.f1.ztr}. The *@b{.s1} and *@b{.f1} files are forward
readings, whilst the @b{.r1} files are reverse readings. Look at the files
starting with @b{xb63e5} for example.]]) In the naming convention used here,
the section of the name before the first full stop is the
"template"@footnote{or "insert" if you so prefer.}  name. So, we can tell from
the read names that the template named @b{xb63e5} has been sequenced from
either end. In the terminology of the Staden Package, the reads
@b{xb63e5.f1.ztr} and @b{xb63e5.r1.ztr} form a @i{read pair}@footnote{I.e. they
are two reads of the same template (or insert) in opposite directions.}. As
you will see later, awareness of @i{read pairs} allows gap4 to detect errors in
contig assembly and to suggest contig joins that it might be fruitful to
attempt. So, we have now identified two reasons for wanting pregap4 to record
whether a read is a forward or reverse read in its experiment file.

The template name for a reading will be recorded in the @b{TN} line of its
experiment file@footnote{And the primer type (@b{PR}) and chemistry (@b{CH})
will also be recorded. A full description of all experiment file line types
and the values to which they may be set is, of course, available in the
manual. You can get to the online version from the pregap4 Help (if a little
awkwardly). Try it, by clicking on the main pregap4 @b{Help} button and
choosing the Contents option. Next click on the @b{Brief} button at the top of
the pregap4 "Contents Page". This takes you to the brief version of the
"Contents Page" for the whole manual, from which you should click on the
@b{File Formats} link. You final destination is at the other end of the
@b{Explanation of Records} link.}. So pregap4 needs to know how to construct a
TN experiment file line from the information stored in the read name. This
requires that a @b{Command}, to be executed by the "Augment Experiment Files"
module of pregap4, be associated with that experiment line file type. You have
already seen how this might be done@footnote{During the configuration of the
"Augment Experiment File" module, using the @b{Experiment File Line Types}
option. Select the @b{Command} option for the @b{TN} line and type in the
command.}, but not easily.

As the construction of Commands for the "Augment Experiment Files" module of
pregap4 is not easy, pregap4 offers users two predefined read naming
conventions. When one of these read naming schemes is selected, corresponding
pre-defined "Augment Experiment Files" module Commands are automatically set
up. The two naming schemes currently on offer@footnote{You can also add your
own naming schemes. How to write these and add them to pregap4's repertoire is
fully described in the manual. Have a quick look before moving on. First click
on the main pregap4 @b{Help} button and choose @b{Contents}. From the
"Contents List", select the @b{Writing Your Own Naming Schemes} link.} are
both Sanger Centre creations. Stretching originality to its utmost limits,
these are labelled "Old Sanger Centre Naming Scheme" and "New Sanger Centre
Naming Scheme"@footnote{Read all about them by clicking on the @b{Pregap4
Components} link from the pregap4 Contents page. If you wish to see what the
naming scheme definition looks like at the file-system level then try viewing
the following file:
@example
_ifdef([[_unix]],[[$STADENROOT]])[[]]_ifdef([[_windows]],[[%STADENROOT%]])/lib/pregap4/templates/sanger_names_old.p4t
@end example
}.

The naming scheme used for this data set is the "Old Sanger Centre Naming
Scheme". To inform pregap4 of this fact, select the @b{Load Naming Scheme}
option from the @b{File} pull down menu. This will pop up a new window in
which you are asked to provide a @b{Naming scheme file name}@footnote{Note
that you are also asked whether you wish to @b{Save to config file} or not. If
you leave the @b{Yes} button selected, the configuration changes you make by
choosing the "Old Sanger Centre Naming Scheme" will be recorded in your
@b{_ifdef([[_unix]],[[pregap4.config]])[[]]_ifdef([[_windows]],[[config.pg4]])}
file and used by subsequent invocations of pregap4 in this directory. If you
were making a naming scheme selection for the current run of pregap4 only, you
would need to click on the No button beside the Save to config file
option.}. Unless you know what this name might be, click on the @b{Browse}
button. After due consideration of all the possibilities, you should reach the
conclusion that the thinking man (or woman's) best reasoned choice should be
@b{sanger_names_old.p4t}. Click on it and then on the
_ifdef([[_unix]],[[@b{OK}]])_ifdef([[_windows]],[[@b{Open}]]) button. You may
now click on @b{OK} in the "load naming scheme" window.
 
What you have achieved by selecting your naming scheme, is to set up three
Commands to be obeyed by pregap4 when it runs its "Augment Experiment Files"
module. To see that this is the case, select the @b{Experiment File Line
Types} option (from either the @b{Information source} menu or the "Augment
Experiment Files" module). The "Experiment file line types" window you saw
previously when configuring the "Augment Experiment Files" modules will once
more appear. You should see that, in addition to the @b{SI} line @b{Value} you
set to be added to all experiment files, a Value has also been set for the
@b{CF} line as a consequence of your configuration of the "Cloning Vector
Clip" module. The three unintelligible Command entries for the @b{CH}
(@b{CH}emistry), @b{PR} and @b{TN} lines, are the consequences of your naming
scheme selection. Once you have admired them sufficiently, click on the
@b{Cancel} button to send the window back from whence it came.

We have discussed the way the @b{T}emplate @b{N}ame (@b{TN}) and @b{PR}imer
type (@b{PR}) is encoded in the read name. The "Old Sanger Centre Naming
Scheme" also encodes the sequencing @b{CH}emistry (recorded in the @b{CH}
experiment file line). Most of these sequences have been sequenced using
dye-primer technology. This is where the fluorescent dye, which is detected by
the scanning equipment on the ABI automatic sequencing machines, is attached
to the first base of the sequences. Another common method is dye-terminator
sequencing, where the dye is (not unsurprisingly) attached to the last
base. As each method has its own merits and pitfalls it is useful to know
which has been used for each read. For this particular test set only a few
sequences use dye-terminator chemistry. These contain a '@b{t}' in the letters
after the full stop and before the @code{.ztr}. _ifdef([[_unix]],[[To list
them type:

@example
ls *.*t*.ztr
@end example

You should see 5 of them. We could have used a simpler wild-card pattern, but
here we explicitly ask for any filename with @b{t} in the part of the name
after the fullstop just in case @b{t} is used anywhere in the template
name. Whilst in our UNIX window, have another look at the contents of your
pregap4.config file:

@example
more pregap4.config
@end example

]])_ifdef([[_windows]],[[To list them, look in the explorer window again. You
should see five or so.

Finally, whilst in the explorer window, have another look at the contents of
your config.pg4 file.]]) Note that your naming convention additions have been
recorded and will therefore be acted upon during subsequent invocations of
pregap4 in this directory. However, it is still not the case that all your
settings have been saved on disk. To ensure that they are, select the:

@display
@b{Save All Parameters (in all modules)}
@end display

option from the @b{File} pull down menu. That sounds like it should cover
about everything. If you now switch to the "Textual Output" tab you will see
some confirmation that pregap4 has done something, which can be verified using
_ifdef([[_unix]],[[@b{more}]])_ifdef([[_windows]],[[@b{wordpad}]]) yet again.

Taking a closer look than previously, you should see that the
_ifdef([[_unix]],[[@b{pregap4.config}]])_ifdef([[_windows]],[[@b{config.pg4}]])
file has grown considerably. Sections of text are separated by names in square
brackets. There is a section headed @code{[naming_scheme]} which is the
component which we added to pregap4 describing how to extract information from
sequences adhering to the Sanger Centre naming conventions. You should also
see @code{[module_list]}. This describes all the modules listed in the
configure modules panel, not just those which we have enabled. The file also
includes one section per module named in a fashion that should allow you to
guess the module (e.g. named @code{[::sequence_vector_clip]} for the "Sequence
Vector Clip" module). These hold the configuration details for each of the
separate modules that we have supplied settings for.

Pregap4 now knows how it should process batches of reads for the sequencing
project to be managed in the current directory. All the information it
requires is stored in the file you have just looked through. Technically, at
this stage there is no need for pregap4's lovely GUI. We could quit the
program and run pregap4 as a background batch job. _ifdef([[_unix]],[[This
would require typing in "@b{pregap4 -nowin *.ztr}" to the UNIX
window]])[[]]_ifdef([[_windows]],[[This would require bringing up a
command-shell (a.k.a DOS) and typing in "@b{pregap4 -nowin *.ztr}"]]). However
in this case we will set pregap4 running using the @b{Run} command from the
@b{Modules} menu (also found at the bottom of the Files to Process and
Configure Modules panels). This has the added advantage that if you managed to
incorrectly configure any of the modules then you can quickly go back and
correct the mistakes, preferably without anyone even noticing. One handy hint
- if you find that you make the occasional mistake when configuring pregap4,
try @b{Run}ning the procedure with a small set of, say, 10 files just to check
that it works.

Pregap4 should now be trundling along displaying a dot for each sequence being
processed. This may take a while, so may I suggest that this is a suitable
time to stretch your legs. At some stage it should, hopefully, proudly
announce:

@example
***   Processing finished   ***
@end example

_ifdef([[_unix]],[[Once pregap4 has finished, take a look at the files:

@example
ls
@end example

As in the last exercise, you will have created a number of new "files of
filenames" (the ones beginning with pregap.), these you can list in order of
creation with the command:

@example
ls -lrt pregap.*
@end example

Also you will have created a new experiment file for each of the original ZTR
files. As these all end with @b{.exp}, you can list them with the command:

@example
ls *.exp
@end example

and inspect a few of them (press the @b{q} key when you have had enough) with
the command:

@example
more *.exp
@end example

The all important file here is @b{pregap.passed} which holds a list of all the
files that have been successfully processed. As you will see if you type in:

@example
more pregap.passed
@end example

This file is a "file of file names" listing the experiment files to be
processed by gap4 and assembled into contigs. A nice trick to persuade UNIX to
give one a quick estimate of the success, or otherwise, of one's pregap4ing
involves the @b{wc} command. In this context, @b{wc} stands for @b{w}ord
@b{c}ount. @b{wc} also counts lines and characters. Try typing in:

@example
wc pregap.*
@end example

and UNIX will count the number of lines, words and characters in every file
whose name begins with pregap. @b{wc} spoke to me thus@footnote{Your numbers
may not be precisely the same as mine as the files include the full pathnames
and so are partially dependent on which directory you run things in.
Also, you could produce less redundant information with the command:

@example
wc -l pregap.*
@end example

The @b{-l} tells @b{wc} to only count lines. For the full story of @b{wc}, you
need to consult the relevant part of the UNIX manual by typing in:
@example
man wc
@end example
}:

@example
         0         0         0 pregap.cvec_failed
       165       165      6995 pregap.cvec_passed
         0         0         0 pregap.failed
       337      1330     25682 pregap.log
       165       165      2375 pregap.passed
      1169      5164     77730 pregap.report
         0         0         0 pregap.screenvec_failed
       165       165      6995 pregap.screenvec_passed
         0         0         0 pregap.svec_failed
       165       165      6995 pregap.svec_passed
      2166      7154    126772 total
@end example

The first column of numbers shows the number of lines in each file, the second
the number of words and the third is the number of characters. It is the
number of lines that is of interest here, because the number of lines in the
file is also the number of filenames (excepting the files that are not files
of filenames, such as @b{pregap.report} and @b{pregap.log}). I can see at a
glance that I started with 165 SCF files (from the @b{pregap.passed} and
@b{pregap.failed} lines) of which all ultimately
passed.]])_ifdef([[_windows]],[[Once pregap4 has finished, use the Windows
explorer to take a look around the files you have created. As in the last
exercise, you will have created a number of new "files of filenames" (the ones
beginning with pregap.), these you can list in order of creation using (in the
explorer window) @b{View} menu @result{} @b{Arrange Icons} @result{} @b{By
Date}. If we were to go on and assemble these sequences within gap4 itself
then the all-important file here would be pregap.passed, which contains a list
of all the files which have successfully made it through all the modules.

Also you will have created a new experiment file for each of the original SCF
files. As these all end with @b{.exp}. Inspect a few in @b{wordpad} and note
the new @b{PR}, @b{CH} and @b{TN} lines.]])

Finally, and perhaps most importantly, you will have created a gap4
database. These are the files named:

@example
testdb.0
testdb.0.aux
testdb.0.log
@end example

Assuming all has worked correctly, you may now shut down pregap4 by selecting
@b{Exit} from the @b{File} menu.

The testdb.0 and testdb.0.aux file between them comprise the actual assembly
project. The testdb.0.log file contains a simple record of commands performed
on this database. It may be useful when diagnosing problems.

_ifdef([[_unix]],[[Before continuing to the next stage, exit netscape. As you
will see, the same access to the manual is available from within gap4.]])

@node X2-gap4
@section A first glance of Gap4.

We can now start up @b{gap4} to see what pregap4 has done for
us. _ifdef([[_unix]],[[Type in:

@example
gap4 &
@end example

After a brief pause the main gap4 window should appear, which consists of
three sections:]])_ifdef([[_windows]],[[You can start gap4 using the windows
start menu and then open the database, but by far the easiest at this stage
(as we have the explorer window already open) is simply to double click on the
testdb.0.aux file. After a brief pause two windows should appear. The main
gap4 window (the largest of the two) consists of three sections:]])

@itemize @bullet
@item
The menu buttons along the top from which most of the gap4 functions are
selected.

@item
A scrolling @i{Output window} in the centre into which gap4 directs all its
textual output.

@item
A scrolling @i{Error window} at the bottom in which gap4 records all its more
painful moments.
@end itemize

_ifdef([[_unix]],[[Pregap4 has created a database for us, so now we wish to
open this in gap4. Do this by clicking on the @b{File} menu and selecting the
@b{Open} command. This will pop up a file-browser window, offering the choice
of just one database: @b{testdb.0.aux}. Double left-click on this to select
this database (or single click and press @b{OK}).

A second window should now be displayed by gap4, labelled the @i{Contig
Selector}.]])[[]]_ifdef([[_windows]],[[The second window is labelled @i{Contig
Selctor}.]]) This window represents the lengths of the contigs (initially in no
particular order) that have been generated. Waft your mouse cursor over the
lines (or line) and information about the various contigs will be displayed in
the bottom section of the contig selector window. If the course so far has
gone according to plan, you will only have one single contig. This does not
make for a particularly interesting contig selector plot so look in the
"Contig selector introduction" help for a more complete illustration.

_ifdef([[_unix]],[[If you now move your mouse cursor over to your UNIX window
(the one from which you invoked gap4), you can check in UNIX what gap4 has
done by typing in:

@example
ls -l t*
@end example

You are requesting that all the files in your current directory whose names
begin with t are listed long. The following files should be listed, one to a
line with their protection levels, ownership details, size, time of creation
and date of creation:

@example
testdb.0
testdb.0.BUSY
testdb.0.aux
testdb.0.log
@end example

The first and third of these files comprise version @b{0} of the database
called @b{testdb}. The second file, @b{testdb.0.BUSY}, does not contain data,
it is a security device. While the file @b{testdb.0.BUSY} exists, no other
user may open version 0 of the database testdb and start making simultaneous
updates (although it is possible to open the database in "read-only" mode to
view the data). The fourth file, @b{testdb.0.log}, contains a record of what
you do and when you do it whilst you are running gap4. The main purpose of the
log file is to provide useful information to send with any bug reports you
might be inclined to send to James@footnote{Not, of course, that any of
James's code would ever include any bugs to be reported!!}.
]])_ifdef([[_windows]],[[If you now look in your windows explorer window once
more you will find that a new file has been created: @b{testdb.0.BUSY}

This file does not contain data; it is a security device. While the file
@b{testdb.0.BUSY} exists, no other user may open version 0 of the database
testdb and start making simultaneous updates.]])

For now, note that in all cases the 0 at the end of the database name
indicates the version of the database to which the file belongs. You will make
other versions of this database later in the exercise. Corresponding database
filenames will vary only by the version character.

Take a look at the BUSY file _ifdef([[_unix]],[[by typing in:

@example
more testdb.0.BUSY
@end example

]])_ifdef([[_windows]],[[in @b{wordpad}.]]) It contains just the hostname of
the machine running gap4 and the process identifier for the gap4 process which
is using the database. Its purpose is to ensure, by its presence rather than
its contents, that the database is opened for updates only once at any one
time. Clearly if a single database was being edited by two gap4 processes at
the same time, chaos would be assured. gap4 will create a BUSY file when its
opens a database in order to prevent other gap4's from simultaneously editing
the database. If a user cannot open (and edit) a database because of the
unexpected presence of a BUSY file, the contents of the BUSY file will offer
clues concerning the identity and whereabouts of the user already using the
database. In the case of a computer or gap4 crash then the BUSY file will be
left in existence and it must be removed before gap4 will again open the
database. If a crash is suspected, the BUSY file contents can be used to make
certain that gap4 is really no longer
running[[]]_ifdef([[_unix]],[[@footnote{The most usual way would be to use the
UNIX command @b{ps} to check whether a process with the recorded identifier is
running on the recorded host computer. Exactly how you would do this with ps
would depend on the type of computer you are dealing with.}]]).

_ifdef([[_unix]],[[Take a look at the @b{.log} file by typing in:

@example
more testdb.0.log
@end example

It contains a record of everything that has happen to the database since its
creation. Not a lot as yet, but it may well become more interesting as the
exercise progresses.]])_ifdef([[_windows]],[[You could try to look at the
@b{.log} file in @b{wordpad}, but unfortunately it complains that it is in use
by gap4. The log file contains all the time-stamped headers from the main
output window, since the creation of this database. These headers are the bits
with the darker grey background - at the moment this just contains the various
@i{open} and @i{close} database comments and a note that an assembly was
performed.]])

@node X2-editor
@section An introduction to the contig editor.

@subsection Backing up the database before you start. 

Gap4 provides an extremely versatile and intuitive contig editor. In the next
sections of this exercise, it is intended that you experiment freely with this
tool, not worrying too much about whether your efforts improve or degrade the
quality of your data. The editor is a "powerful" tool, which in a computing
context means it offers you as many ways of messing up as it does of improving
things. With this in mind, a sensible first step is to make a backup of your
database. To do this, select the @b{Copy database} option from the @b{File}
pull down menu. gap4 responds by producing a little window which enquires:

@example
New version character
@end example

The version of the database you are working on is version @b{0}, logically
therefore, the next version to create is version @b{1}. We could however
choose any character we wish (including letters). For this exercise it does
not matter as we will not be returning to the backup unless something terrible
happens (which is very unlikely), so pick whatever version character you
wish. For illustration purposes we will choose @b{1} and press
@b{OK}. _ifdef([[_unix]],[[To check that anything has happened, type in to a
UNIX window:

@example
ls -ltr
@end example

Amongst the output you should see the following new
files:]])_ifdef([[_windows]],[[To check that anything has happened, you can
check in a windows explorer window to see what new files have been
created. These should be:]])

@example
testdb.1
testdb.1.aux
testdb.1.log
@end example

Note that there is no @b{BUSY} file for the new version of your database as
you are still using version @b{0}.

@subsection Starting up the contig editor. 

Select the @b{Edit contig} option from the @b{Edit} pull down menu. As you
have just started processing a new version of your database, the default
contig will be the longest. Here you may only have a single contig, but in
general, when you move your mouse to the @i{Contig Selector} window and click
on the lines representing the contigs, you change the identity of the contig
to be edited. Start up the @b{Contig Editor} by clicking on the @b{OK} button
of the @i{Edit contig} window. After a short pause, the contig editor will
appear on your screen.

The first thing to notice is the @b{Help} button. If you click on this you
will see you have direct access to all relevant topics. Particularly of use to 
new users is the @i{Control summary} section.

@image{gap4-editor1,6.3in}

@subsection Moving around your contig display. 

In your @i{Contig Editor} window, you will have a display of the start of your
chosen contig with one sequence per line. This intuitive representation of the
aligned readings of your contig is used to guide your editing. First try out
the various ways of selecting the portion of your contig to be displayed. For
delicate movements use the four buttons labelled @b{<<}, @b{<}, @b{>} and
@b{>>}. By clicking on these buttons with your left mouse button you can
achieve the following effects:

@table @b
@item <<
move the contig display half a screen to the left.
@item <
move the contig display one base to the left.
@item >
move the contig display one base to the right.
@item >>
move the contig display half a screen to the right.
@end table

For slightly less subtle movement, place the mouse cursor in the long scroll
bar above the contig display and:

@itemize @minus
@item
Click the left mouse button to the right of the light grey blob to move the
contig display a complete screen to the right.

@item
Click the left mouse button to the left of the light grey blob to move the
contig display a complete screen to the left.

@item
Click and hold with the left mouse button on the light grey blob and drag it
to the left and/or right. The contig display will follow your every move.
@end itemize

_ifdef([[_unix]],[[For completely unsubtle movement, imagine the long scroll
bar to represent the entire length of your contig. The little grey blob
represents the position and relative size of the currently displayed bit of
contig. Move your mouse cursor to any portion of the scroll bar and click with
your middle mouse button. The display will leap to the corresponding part of
your contig. With this mechanism you can go from on end to the other of the
very longest contig with a single click of your middle mouse button.]])

Finally, move your mouse cursor actually onto the display of aligned readings
and click (left mouse button) on one of the displayed bases. The selected base
will be highlighted. You can now move the highlighting from base to base
(and/or read to read) with the arrow keys on your keyboard. If you try to move
off the end of the displayed portion of contig in this fashion, the screen
will shift a half screen in the appropriate direction to accommodate you.

@subsection Editing the consensus sequence

There are two types of editing action available, @i{replace} and @i{insert}
(replace being what you get when the Insert button is not lit). When you start
the contig editor it will be in replace mode. You can toggle between modes by
clicking (left mouse button) on the box that is labelled @b{Insert}. After one
click, the button should still say Insert, but should be lit.

The contig editor will allow you to edit anything in any way, if you insist
(see @i{Super editing}, below). However, it will only normally allow you to
make reasonably safe alterations. In particular, it will allow you to remove
and/or insert padding characters (the "@b{*}" symbols) into your consensus
sequence (amending the aligned readings accordingly).

Try inserting a few pads into your consensus sequence by clicking on a random
consensus sequence character and typing @b{*} a few times. Pads are introduced
into the consensus sequence and all aligned readings are amended
accordingly. Remove the pads you have introduced by pressing the @b{Delete} or
@b{Backspace} key the same number of times you typed in *. The
@b{_ifdef([[_unix]],[[Backspace]])[[]]_ifdef([[_windows]],[[Delete]])} key will
remove the character _ifdef([[_unix]],[[to the left
of]])_ifdef([[_windows]],[[underneath]]) the editing
cursor. _ifdef([[_unix]],[[By default the Delete key also does the same, but
it may be adjusted to remove the character underneath the editing cursor
instead@footnote{This is achieved by editing (or creating) your
@b{$HOME/.gaprc} file to contain:

@example
set_def  CONTIG_EDITOR.DELETE_RIGHT  1
@end example
}.]])_ifdef([[_windows]],[[The Backspace key
will remove the character to the left of the editing cursor.]])

You can, of course, delete other padding characters from your consensus
sequence. Find some and try it. However, as discussed below, doing so does
alter some of your readings in a fashion that really deserves more thought.

@subsection Undoing edits 

You can undo edits with the @b{Undo} button. Each time you click on this
button, an edit operation is undone. Try it out by clicking repeatedly on the
@b{Undo} button. You should see all your deleted pads get undeleted and then
all your inserted pads get reinserted until you get back to exactly where you
started. If you attempt to go beyond where you started, you editor will squeak
with irritation.

Being able to undo a series of mistaken editing operations is an extremely
useful option to have available.

@subsection Finding problems and editing them

In cases where phred-style confidence values are available, editing can be
greatly sped up. The next section of this exercise demonstrates this. However
as we cannot be sure that these values will always be available we will
initially demonstrate a more simplistic approach to problem detection and
correction.

The places in your contig that will most probably require editing are where
the consensus sequence is undetermined. That is, where there is a
@b{-}@footnote{Indicating a position in the contig where there is insufficient
agreement in the aligned readings to determine the base type.} or
@b{*}@footnote{Indicating a position in the contig where the consensus amongst
aligned readings is that there is no base.} in the consensus sequence. You can
skip along to the next such "problem" in the consensus sequence by clicking on
the @b{Next Search} button. A new window titled "Search" will shimmy in from
backstage. Position it somewhere where it is accessible, but does not obscure
the "Contig Editor" window. Note that this window offers to search for all
sorts of things, but in our case we wish to click on @b{problem}. So we search
@b{forward} for the very next problem in the contig. Click on the @b{Search}
button. Try it a few times. You should only find @b{*} characters at this
stage with only the very occasional -. The default consensus calculation is
insistent on some sort of decision in every position.

@image{gap4-editor2,6.3in}

"@b{-}" characters will appear in the consensus if you are more demanding
about the percentage of the "vote" that @b{A}, @b{C}, @b{G}, @b{T} or @b{*}
has to win to be the consensus base. To do this go to the box in the top left
hand corner of the editor window which says "@b{Cons}". If you click on the
small up arrow to the right of this box the value will increase. After a
while you should start seeing @b{-} characters in the consensus,
especially if you are in a region with poor coverage or low
quality. Several consensus algorithms are available, ranging from basic
counting of base calls to Bayesian analysis of phred scores (which is
now the default)@footnote{Read at least the first section on
consensus calculation in the manual, which provides a much more complete
description of how the consensus is calculated. We got to the
appropriate section via the Index (last item in the Contents list). Look
for Consensus Calculation.}.

By altering the value in the box labelled @b{Qual} you control a simple
display showing the quality of bases, although there are better ways of
showing this as you will see later. Increasing the @b{Qual} value will
gradually turn bases red (when they have a confidence value lower than
the @b{Qual} value). The use of value @b{-1} has changed slightly since
the 2001.0 (and earlier) Staden Package releases - now this is treated
the same as value @b{0} when using the confidence-value mode of
consensus generation.

@image{gap4-traces1,6.3in}

Once you have exhausted the possibilities of the @b{Cons} and @b{Qual}
boxes, click on the @b{Search} button of the @i{search} window a few
more times and successive problem characters ("@b{-}"s or "@b{*}"s) will
be highlighted. Using the features discussed thus far, you cannot do
anything about "@b{-}"s in the consensus sequence, so continue clicking
until you come to a @b{*}.

Now move the mouse cursor into the contig display and press the right arrow
key to highlight the base immediately to the right of the @b{*} consensus
character. As you have already discovered, you may delete @b{*}s from the
consensus sequence. Press the @b{Backspace} key and the example you have found
with the @b{Search} button of the @i{search} window will be removed.

@subsection Checking the trace data

Removing padding characters from the contig consensus in this way is all very
well. The contig becomes, superficially at least, ever more beautiful and
convincing as consensus pads disappear. However, deleting a consensus pad will
normally involve deleting at least one definite base character (that is, an
@b{A}, @b{C}, @b{G} or @b{T}) from the aligned readings. It would be
preferable to do this only after examining the raw data from which that base
was determined. This being the case, perhaps we should approach the previous
edit more cautiously. First undo the pad deletion you have just affected by
clicking once on the @b{Undo} button.

Now move the mouse cursor over any definite base character that will be
deleted as a consequence of removing the consensus pad again and click the
left mouse button twice in rapid succession or by positioning the cursor and
pressing @b{Control} and @b{T}.  A window displaying the trace data for the
relevant region of the reading will appear. The base you clicked on will be
indicated by a vertical line. Examine the trace data around the base whose
presence is in question and see if it supports the case for eradication.

You will also notice that in the editor window, the name of the sequence on
display is highlighted. If this sequence was reversed and complemented to make
this assembly (i.e. in "real life" the read runs from right to left) then the
sequence name will be preceded by a minus sign "@b{-}". Note that the trace for
such a sequence will appear in the same orientation as the sequence in the
editor window - that is reversed and complemented too@footnote{Although
right-clicking on the trace and selecting @b{Complement} will allow you
to complement the view for that trace.}

Before making your final decision about the deletion of the consensus pad,
display the traces for a few more of the readings aligned at that point
(particularly both readings with and without padding characters at that point
and readings from both strands, if possible). You can display up to five
traces simultaneously. If you select more than five, they will be made
available, but only five at a time@footnote{This number may be modified by
typing something other than @b{5} into the @b{Rows:} box at the top of the
@i{Trace display} window, however you will need an impressively large
screen.}. You can use the scroll bar at the right of your traces window to
control which five of the traces you have selected are in view.

You can invoke the traces for all reads at a particular point, all centred on
the same base position, by clicking twice in rapid succession with the left or
middle mouse buttons on the appropriate consensus character. Try it on the
consensus position you are investigating now.

Also you can get gap4 to automatically display the traces which would best be
used for verifying and solving problems. To enable this, use the editor
@b{settings} menu, follow the @b{Trace display} cascade, and select
@b{Auto-display traces}. From now on the @b{Search} button of the @i{search}
window will display up to three traces for you when searching for
problems. These traces are the "best" trace from each strand that agrees with
the consensus and the "best" (or worst, depending on how you look at life)
trace that disagrees with the consensus. Often not all three choices will be
available. Try it.

Once you have weighed all the evidence, and considered carefully the wisdom
(or otherwise) of deleting the padding character@footnote{We mean the padding
character of several paragraphs ago. Should your contact with this fine * be a
thing of the past, any old * will do.} from the consensus sequence, move the
mouse cursor back onto the contig display, click (left mouse button this time)
on the base immediately to the right of the @b{*} in the consensus and
@i{@b{ZAP IT!}} by pressing the @b{Delete} key.

Get rid of your trace displays before continuing. You can quit
individual trace displays by right-clicking on the trace and selecting
@b{quit}. To get rid of all displayed traces in one go, click on the
@b{close} button in the top-right hand corner of the trace display
window.

@subsection Viewing hidden data and extending readings. 

At various stages of the earlier processing of your data, sequence from either
end of most of readings will have been "hidden". The details of where and why
are contained in the various field of the experiment file. If you recall,
sequence may be "hidden" because it matches vector sequence (usually at the
start of a reading) or because the corresponding trace data is of poor quality
(usually at the end of a reading). Hidden sequence is not deleted, it is just
labelled so that it may be disregarded by gap4 during, for example, contig
assembly or the evaluation of contig quality. That it is not to say that the
hidden sequence is not available within the gap4 database. Click on the
@b{Cutoffs} button of the @i{Contig Editor} window and gap4 will add the hidden
sequence to its display largely in a fetching shade of grey.

Sequence that was hidden because it matched the sequencing vector appears in
grey characters but its background is also shaded in a pale pink
colour@footnote{I.e. tagged as sequencing vector. More about tags later.}. You 
should also have noticed that the non-hidden data right at the start of the
contig was also coloured differently. This is the "cosmid" vector detected by
the pregap4 @i{Cloning vector clip} module. Unlike the m13mp18 sequencing
vector, it does not need to be hidden as all these sequences still align
together. Furthermore when dealing with multiple contigs the coloured cosmid
vector can act as a useful indicator of the which contigs contain the clones
ends.

You can make any stretch of hidden sequence become part of a reading if you
wish. It would clearly be more sensible to first search along your contig
display for a stretch of hidden sequence that appears to align with the
existing consensus sequence. Such sequence probably deserves to be
promoted. Having found a suitable stretch of grey bases, click on the first
'unhidden' base (if at the left end) or the first hidden base (if at the right
end). You can now either extend or reduce the hidden region by holding down
the @b{control} or @b{alt} key and using the @b{left} or @b{right arrow} keys
as appropriate. Try moving in both directions to convince yourself it is
possible to both extend and/or reduce the length of hidden sequence. Note that
you can reveal sequencing vector if you wish, but at least it remains tagged
as sequencing vector. Try and end up with the hidden sequence beginning in the
most reasonable position.

When hiding or "unhiding" long sections of sequence, use the @b{<} (less than)
and @b{>} (greater than) keys. These set the cutoff point to the position of
the editing cursor. @b{<} sets the cutoff point for the left end of the
sequence and @b{>} for the right end of the sequence. Try it and see. It is
quite easy to make large scale mistakes using this feature, a good time to
remember the @b{Undo} button.

By adjusting the starting positions of hidden sequence, you can improve the
quality of your contig by including sequence that retrospectively appears
correct, even though it is represented by trace data that was earlier judged
to be of insufficient quality. You can also hide sequence that unjustifiably
evaded the earlier trimming (possibly a very short stretch of vector
sequence). There should be lots of places you could believably promote hidden
sequence, you might find it more difficult to find a good region of unhidden
sequence to hide.

Where the releasing of hidden sequence becomes a little debatable, remember
you can always use the trace data for guidance (two rapid clicks of the left
mouse button on an appropriate base). Note that you can bring up the trace
data for hidden sequence. Try it.

Adjusting hidden data is a very important editing operation. If you have not
done it before, I suggest you practice on a few regions of the contig you are
editing before moving on.

@subsection Using the Align function to align Hidden Data

Revealing hidden data and editing it into shape becomes very tricky when you
reach a point where the hidden sequence is not correctly aligned to the
consensus. There is, therefore, a special function for sorting out these local
alignments in the hidden data before you unhide them.

This function is in the @b{Commands} menu. Do not select the function yet - you
need to choose the piece of hidden data that you wish to align to the
consensus first. (And don't worry about the other functions on this menu: you
will come back to them later.)

Go back to the Editor and find a piece of hidden data that looks fairly good
but which reaches a point where the alignment is no longer correct. Highlight
a region of this misaligned sequence by pressing and holding down the left
mouse button over one of the aligned bases and dragging the cursor (with mouse
button still held down) into the misaligned sequence. A line will appear under
the sequence. When you have highlighted enough sequence, let go of the mouse
button. If you wish to underline more than a screen full, let go of the mouse
button, scroll along to the end of the region you wish to select, and then
press the shift key in conjunction with the left mouse button.

Now select the @b{Align} command from the @b{Commands} menu. The region you
highlighted will now be aligned to the consensus by the insertion of pads. You
can then unhide this sequence.

@subsection A quick look at Super editing. 

Or editing for the adventurous.

The only way you could directly alter the sequence composition of any of your
readings using the editing procedures so far discussed is by deleting a pad
from the consensus sequence or replacing characters in readings (see
above). All very tame and cautious (and sensible). It is, however, possible to
edit your readings as boldly as you wish. Click on the @b{Edit Modes} button
and you will be presented with a long list of ambitious editing
operations. Most are disabled (the check boxes or ticks next to the names are
empty), but a few harmless ones are allowable.

Selecting @b{Mode set 1} or @b{Mode set 2} will switch between two sets of
allowable editing modes. Choose @b{Mode Set 2} and popup the @b{Edit Modes}
menu again to see what it's done. All but the most incautious operations are
now enabled.

Turn on @b{Insert} mode and click on any base of any reading and start to type
in DNA sequence. The bases you type will be incorporated into your
reading. Observe the pained response of your consensus sequence (especially if
you have consensus cutoff set to 100%).

Click on another base of another reading and try the @b{Delete} key a few
times. You can shrink your readings as well as expand them.

Now click on the @b{Insert} button again to turn on @i{replace} mode. Then
click on another base in an, as yet, unsullied region of your contig
display. Type some more DNA sequence. This time the extant bases of your
victim reading are replaced by the sequence you type. You will observe that
your consensus sequence likes this operation little better than the last.

For the really adventurous try turning on all the items in the @b{Edit Modes}
menu. You should now be able to insert and delete entire columns of bases by
directly editing the consensus. At this stage we should perhaps point out the
rather handy @b{Show edits} option, which can be found in the @b{Settings}
menu. This will highlight your attempts at wrecking the data in several
equally nasty colours. Edits may also be searched for using the @b{Next
search} button.

This is an excellent time to remember that the @b{Undo} button works
regardless of edit mode. If you click enough times on the undo button you
should be able to get back completely to you start position. The undo function
has an impressively large memory.

@subsection Making a quick tag and leaving the contig editor. 

Just to add a bit of colour before leaving the contig editor, make a couple of
tags@footnote{I.e. label a couple of regions. Quite random labels will do
here. We really just need something to show up in the graphical displays we
will look at in a minute.}. First, tag at least one region of the consensus
sequence by clicking on a consensus sequence base and dragging to the right or
left@footnote{To tag a really long region (not a bad idea here as the less
subtle you are, the better your tag will show up later), click once on where
you wish to start your tag with your left hand mouse button. Then move way
up/down your contig and, @i{holding the @b{shift} key down}, click again with
your left hand mouse button where you would like your tag to end.}. This
should cause a stretch of consensus sequence to be underlined. Then click your
right hand mouse button over your contig editor@footnote{Just to show that
this is possible... The right mouse button pops up the editor commands menu.}
and select @b{Create Tag} from the menu that will appear. In the tag creation
window that sallies forth, click on the @b{Type} button and choose whimsically
the type of tag you would like to create from the multitude of options
offered. Should you care so to do, you could add a comment to your tag by
typing suitable profundities into the text panel (just below the
buttons). Once you are satisfied, click on the @b{Save} button and your tag is
complete. The underlined portion of your consensus should now be tastefully
coloured. Repeat the whole operation for a portion of one of the individual
reads of your contig. Hopefully, you will be able to see your tags later in
various graphical windows.

@image{gap4-tag,2.7in}

As you will see from the manual, there are a number of other editing features
to look at. This will be enough for now though, so click on the @b{Quit}
button. gap4 enquires:

@example
Save changes ?
@end example

and offers you the alternatives of @b{Yes}, @b{No} or @b{Cancel}. @b{Cancel}
would assume you wish to continue editing endlessly, so the choice is between
@b{Yes} and @b{No}. Think boldly, and in the knowledge that this is just a
temporary copy of your database, click on the @b{Yes} button. After
concentrating hard for a few seconds the contig editor window fades away.

@node X2-confidence
@section Editing with confidence

@subsection Setting up gap4 for use with confidence values.

As mentioned at the start of this exercise, the traces files for this database
have been base called using phred. This provides us with a mechanism of
greatly speeding up the editing process. From release 2002.0 onwards
(Gap v4.7) gap4 defaults to using these confidence values for computing
the consensus. If you use an older version, or if you have no confidence
values available (even from Estimate Base Accuracies) then you will need
to know how to change the consensus algorithm. Click on the main
@b{Options} menu and select @b{Consensus algorithm}.

@image{gap4-consen,2.7in}

You will be presented with a choice of three methods:

@table @b
@item Base frequencies:
Basically we just use the most common base type aligned in each column.

@item Weighted base frequencies:
We pick the base type with the highest sum of quality/confidence values. This
just assumes that the confidence values are on some unknown linear scale
(which they are not for phred).

@item Confidence values:
Pick the most probable base type, where the probability is calculated in
a rather complex fashion by considering the probability of each aligned
base, the base types, the sequence strand, and the sequencing
chemistry. This is the most suitable choice for phred base-calls and
ATQA/Estimate Base Accuracies confidence values. It's worth noting that
this is algorithm is entirely independent of the phrap consensus
generation (which also produces consensus confidence values).
@end table

We shall pick the last of those three - @b{Confidence values}. It should
already be enabled.

The consensus cutoff is used to decide when the consensus base type should be
one of the four nucleotides or when it should be a dash (indicating an unknown
consensus). We have already experimented with this in the Contig Editor,
but that value was local to just that window; here we have the option of
setting this (and the quality cutoff) on a more permanent basis. For now
leave this as the default setting.

We now have the choice of pressing either @b{OK} or @b{OK
Permanent}. Pressing @b{OK} will choose these values for the duration of this
gap4 session. @b{OK Permanent} will use these values for this session and all
subsequent sessions. It does this by storing the values in your @b{.gaprc}
file held in your home directory. We will be editing data later which has not
been base called by phred, so choose @b{OK}.

Now we are ready to see what the phred base-calls look like. Bring up a contig
editor to view the contig. If you can see the lilac coloured cosmid vector
tags, scroll to the right past these to view an unadorned section of
sequence@footnote{Also, pressing @b{Control q} will toggle the display of all
tags on and off. This may be used as a quick way to see the confidence values
underneath tags.}. Now use the editor @b{Settings} menu to select both @b{Show
reading quality} and @b{Show consensus quality}. You should see that the
background of your bases and consensus sequence has changed to a series of
light and dark greys. The darker the background the poorer the quality. Try
scrolling along, bringing up traces at some really dark sections and some
really light sections to get a feel for things. By clicking on the @b{Show
confidence} check-button at the top of the @i{Trace display} window you can
also view the confidence values superimposed on the traces.

Try scrolling the editor so that position 5950 is approximately in the centre
of the editor. Notice the low quality, dark, sections of the consensus
sequence. If we use the @b{Settings} menu once more to turn on both
@b{Highlight disagreements} and @b{By background} colour then you'll be able
to clearly see the reason for the low quality consensus.

At position 5945 (or possibly a few either side, depending on how many edits
you made earlier) we have three @b{G}'s and three @b{*}'s. Of these, all three
@b{G}'s are from sequences that have not been complemented, and all of the
@b{*}'s are from sequences that have been complemented. Try looking at the
traces; in particular the top two - @b{xc05a10.s1} (-145) and @b{xb63e5.r1}
(84). Both look to be reasonable data, but you will see a clear difference in
the number of @b{G} peaks. This difference is not real. It has been caused by
a "GC compression", which can be common in dye-primer sequencing. If you look
closely at the trace with a single @b{G} at this point you should see that it
is slightly wider and much taller than most other @b{G} peaks; it is really
two @b{G} peaks (almost perfectly) superimposed upon one another.

@image{gap4-editor3,6.3in}

In this case it is this conflict which produces a low confidence consensus
base. Elsewhere the lack of good data anywhere (e.g. low coverage with only
poor data) or single stranded regions may also produce low confidence
consensus bases. The important point to consider here though is that editing
is directed by the consensus confidence, rather than individual sequence
confidence.

There are a variety of ways of "fixing" the problem in our above example:

@itemize @minus
@item
Overtype enough @b{*}'s with @b{G}'s so that the consensus becomes a good
@b{G}.

@item
Set the confidence values for all @b{*}'s to be zero, so that all that is left
is the quality values for the @b{G} peaks.

@item
Set the confidence value for one @b{G} peak to be 100 (the maximum), which
will force the consensus to be a @b{G} with confidence value 100.
@end itemize

The choice is largely up to you, but personally we prefer to keep intact as
much original data as is possible, which leads to the above option
3. Confidence values may be adjusted in the editor either by over-typing the
base@footnote{See the @b{Settings} menu @b{Set Default Confidences}
command. The default is that over-typed and inserted bases have a confidence
of 100, but we may chose any value we wish.}, or by using one of the following
key presses.

@multitable @columnfractions .4 .6
@item Shift + Up Arrow
@tab Increase confidence by 1
@item Shift + Down Arrow
@tab Decrease confidence by 1
@item Control + Up Arrow
@tab Increase confidence by 10
@item Control + Down Arrow
@tab Decrease confidence by 10
@item Left square bracket "@b{[}"
@tab Set confidence to 0
@item Left square bracket "@b{]}"
@tab Set confidence to 100
@end multitable

@subsection Listing the error rates

Before we get too carried away scrolling along admiring the greyness of it all
we should consider our final aims for this project. Many people consider their
sequencing "finished" when they only expect to have 1 error in every 20000
bases (for example). Others may have more stringent criteria. Because the
consensus bases are probabilistically determined it is possible to estimate the
total number of consensus errors in any given region. An option to list this
is available both as part of the contig editor (@b{Commands} menu: @b{List
Confidence}) and from the main gap4 menus (@b{View} menu: @b{List
Confidence}). Both options work in the same manner. As we already have the
editor running we shall use the editor copy.

Select @b{List Confidence}. It will bring up a new window asking for the
section of the consensus to analyse and a question asking whether you want to
only update the information line (the very bottom line of the editor
window). Just accept the defaults for now and hit @b{Apply}. You should see
that the editor "information line" (at the bottom of the window) now contains
something like the following:

@example
Expected no. of errors between 1 and 9569 is 3.87. Error rate = 1/2471
@end example

This has been computed using the consensus confidence values and so is only an
expected number of errors. If we knew the real number of errors then we'd also
know the real sequence! Now, back in the list confidence dialogue window, try
answering @b{No} to @b{Only update information line} and pressing
@b{OK}. Unlike Apply, the OK button will shut down the window after producing
the information. The main gap4 output window should now contain a large table
of information starting with something looking similar to the following
(you'll need to scroll up to see this):

@example
Sequence length = 9569 bases.
Expected errors =    3.87 bases (1/2471 error rate).
Value  Frequencies   Expected  Cumulative   Cumulative  Cumulative
                     errors    frequencies  errors      error rate
-------------------------------------------------------------------
  0         0         0.00         0         0.00       1/2471.34
  1         1         0.79         1         0.79       1/3109.19
  2         0         0.00         1         0.79       1/3109.19
  3         0         0.00         1         0.79       1/3109.19
  4         1         0.40         2         1.19       1/3571.13
  5         2         0.63         4         1.82       1/4674.44
  6         0         0.00         4         1.82       1/4674.44
  7         1         0.20         5         2.02       1/5179.25
  8         0         0.00         5         2.02       1/5179.25
  9         3         0.38         8         2.40       1/6510.03
 10         2         0.20        10         2.60       1/7535.32
 11         2         0.16        12         2.76       1/8612.8
 12         1         0.06        13         2.82       1/9131.38
 13         3         0.15        16         2.97       1/10661
 14         3         0.12        19         3.09       1/12297.3
 15         3         0.09        22         3.19       1/14004.8
 16         3         0.08        25         3.26       1/15740.8
 17         5         0.10        30         3.36       1/18831.1
 18         1         0.02        31         3.38       1/19437.4
 19         3         0.04        34         3.42       1/21052.4
 20         8         0.08        42         3.50       1/25549.3
 21         9         0.07        51         3.57       1/31576.5
 22         9         0.06        60         3.63       1/38858
 23         5         0.03        65         3.65       1/43260.2
 24         4         0.02        69         3.67       1/46616.2
 25         6         0.02        75         3.69       1/51363.8
 26         8         0.02        83         3.71       1/57574.1
 27        12         0.02        95         3.73       1/67264.1
 28        19         0.03       114         3.76       1/85325.3
 29        11         0.01       125         3.77       1/97345.8
 30        12         0.01       137         3.79       1/110882
@end example

Initially we are told the same as before; the length, expected number of
errors, and expected error rate. Next is a table which we can use to see just
how much work is required to achieve our goal error rate. The first column in
the table is a confidence value; 0 represents the lowest quality and 99 the
highest. The second column is how many consensus bases have that particular
confidence value. The third column is the expected number of errors in those
bases (computed from the first two columns). The next two columns are the
total number of consensus bases with this confidence value or lower and the
total expected number of errors in those bases. The final column is the
expected error rate that we would achieve if all the errors for this
confidence value and lower were fixed.

So from the above example we can see that to achieve a 1 in 20000 error rate
we need to check all consensus bases with confidence less than or equal to
19. There are 34 such bases in the entire contig, of which we expect 3 or 4 to
be incorrect. Checking these 34 bases and fixing any errors would leave only
0.45 expected errors and hence gives us the desired 1 in 20000 error
rate. Remember that this is all estimated, so once we've checked these 34
consensus bases we should use @b{List Confidence} again to see the latest
situation.

To check 34 bases may sound like a lot of work. However consider that this is
less than 0.4% of the total consensus bases. Additionally, for this project,
if we checked every disagreeing base in the alignments we would have to check
357 consensus bases! (Naturally this should give us a much higher quality
consensus sequence than our 1 in 20000 error rate.)

It is also likely during this editing procedure that we will notice some
problems cannot be resolved by manual editing alone. At this stage we would be
maintaining a list of additional experiments to perform, such as rerunning a
sequence using dye-terminator sequencing, or ordering an oligo for
primer-walking to produce additional depth of alignments.

@subsection Editor search by consensus quality

We now know that we wish to search for all consensus bases with a confidence
<= 19. Move back to your contig editor window. We are not interested in
making sure that our sequencing of the cosmid cloning vector is perfect, so
position the editing cursor just past this - around about base 200. Now hit
the @b{Next Search} button to bring up the editor search window.

In here is a large list of search options - press @b{Help} for a description
of them all. The option we are interested in is @b{consensus quality}. Select
this and type @b{19} in to the box next to the @b{Value} label. Then just hit
@b{search}, or if you find it easier (and less cluttered) hit the @b{Next
Search} button in the contig editor again. With luck you should now be seeing
a base around about position 880. This problem arises because we have not got
data on two strands and the two sequences that we have for the one strand are
both poor quality. There's little we can do here except either leave the
problem as it is, or perform directed sequencing experiments to obtain the
opposite strand. Hitting search a few more times will find more problems in
this same region, so with luck a single experiment may solve all of this. The
next problem found, ignoring any that may have been created by our editing
experiments earlier, is around base 5050, which appears to be another GC
compression.

@subsection Editor search by discrepancies

It may appear that we have completed finishing to a 1 in 20000 error rate, but
many people may not feel entirely safe with this conclusion without a further
additional search. (Also for this data it is unlikely that we could finish to
this degree of accuracy without additional experiments.)

The editor @b{discrepancies} search type can look for conflicts in the
alignments where two disagreeing bases in any single column are both above a
specified confidence level. To some extent this measure is already taken into
account in the consensus confidence value, however it may prove useful when
your project contains very similar repeats. You do not necessarily need to fix
these "problems", but if it pleases you, then do so.

Bring up the editor search window and select the @b{discrepancies} search
mode. Type in @b{30} in the @b{value} box beneath this. A value of 30
corresponds to a 1 in 1000 error rate (20 is 1 in 100, 40 is 1 in 10000). This
is the confidence for particular bases rather than the consensus - no
consensus is used at all in this search. Make sure that the editor editing
cursor is set to the first base in the contig and then start the
search. You'll probably find, not unsurprisingly, that many of the places it
jumps to are the same ones that the consensus has a low quality for.

@subsection Plotting confidence values

If you prefer to take a larger overview of the confidence for your assembly
try the @b{Confidence Values Graph} option in the main gap4 @b{View}
menu. This will bring up a dialogue asking which contigs you wish to plot;
just hit @b{OK} here to plot everything. Next a window titled Consistency
display will appear showing a graphical plot of the confidence
values. Initially this appears to be rather alarmist, but remember that the
scale is logarithmic so we are probably only interested in the lowest
spikes. You may turn click on the @b{crosshairs} checkbutton for more precise
positional feedback on which base numbers your mouse pointer is hovering
over. The contig editor may also be controlled from this (and other plots) as
will be seen in greater detail in the subsequent exercise.

@image{gap4-confidence,6in}

From this window we can also plot strand coverage, reading depth and read-pair
coverage. Try turning on @b{strand coverage} (local @b{View} menu) and select
@b{Problems} as the @b{Plot type}. This will display two dashed horizontal
lines representing the locations of problems on each strand. It should be
obvious that many (but not all) of the poor quality consensus bases are due to
single stranded regions. This is not surprising as the consensus algorithm
takes this into account when assigning confidence.

@subsection Shutting down Gap4

Finally, finish the exercise by quitting gap4. Firstly shut down any
remaining contig editor windows and then select @b{Exit} from the main
gap4 @b{File} menu.
